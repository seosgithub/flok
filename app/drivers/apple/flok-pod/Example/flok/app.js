analytics = {
  track: function() {
  },

  page: function() {
  },

  group: function()  {
  },

  identify: function() {
  }
}
window = {}
callout_tick = 0;
callout_queue = {};

function callout_wakeup() {
  callout_tick += 1;

  //Get an array of things that should fire now
  var arr = callout_queue[callout_tick];
  if (arr === undefined) {
    return;
  }
  delete callout_queue[callout_tick];

  for (var i = 0; i < arr.length; ++i) {
    var e = arr[i];

    //Send event
    var ep_ok = int_event(e.ep, e.ename, {});

    //Reschedule interval if the ep still exists
    if (e.interval && ep_ok) {
      reg_interval(e.ep, e.ename, e.ticks);
    }
  }
}

function reg_timeout(ep, ename, ticks) {
  //Create an array if there isn't already one
  if (callout_queue[ticks+callout_tick] === undefined) {
    callout_queue[ticks+callout_tick] = [];
  }

  //Insert an item
  callout_queue[ticks+callout_tick].push({
    ep: ep,
    ename: ename,
    ticks: ticks,
    interval: false
  });
}

function reg_interval(ep, ename, ticks) {
  //Create an array if there isn't already one
  if (callout_queue[ticks+callout_tick] === undefined) {
    callout_queue[ticks+callout_tick] = [];
  }

  //Insert an item
  callout_queue[ticks+callout_tick].push({
    ep: ep,
    ename: ename,
    ticks: ticks,
    interval: true 
  });
}

//The view-controller hierarchy is managed by this set of functions.


  //Maintain type information for pointers
  //Is it a spot ('spot'), view (main spot) ('view'), or view controller ('vc')?
  debug_ui_ptr_type = {};

  //Keep track of what view are embedded into spots
  debug_ui_spot_to_views = {};
  debug_ui_view_to_spot = {};

  //The first view controller that contains a view attached to the root spot (0)
  debug_root_vc = null;


//Embed a view-controller into a named spot. If spot is null, then it is assumed
//you are referring to the root-spot.
function _embed(vc_name, sp, context, event_gw) {
  //Lookup VC ctable entry
  var cte = ctable[vc_name];

  //Find the root view name
  
    if (cte === undefined) {
      throw "Tried to embed a flok controller named: '" + vc_name + "' but you have not created that controller yet, add controller :" + vc_name + " do ...";
    }
  
  var vname = cte.root_view;

  //Get spot names
  var spots = cte.spots;

  //Actions
  var actions = cte.actions;

  //Allocate a list of tels, the base is the actual 'vc', followed by
  //the 'main' spot, and so on
  var base = tels(spots.length+1);

  spots.unshift("vc") //Borrow spots array to place 'vc' in the front => ['vc', 'main', ...]
    //Initialize the view at base+1 (base+0 is vc), and the vc at base+0
main_q.push([4, "if_init_view", vname, {}, base+1, spots])
    
main_q.push([4, "if_controller_init", base, base+1, vc_name, context])

    
      //Keep track of the view-controller attached to root spot (0)
      if (sp == 0) {
        debug_root_vc = base;
      }

      //Track vc
      debug_ui_ptr_type[base] = 'vc';
      debug_ui_ptr_type[base+1] = 'view';
      //Start at 2 because spot[0] is (currently) acting as vc, spot[1] is main view
      for (var i = 2; i < spots.length; ++i) {
        debug_ui_ptr_type[base+i] = 'spot';
      }

      //Track what view is going into the spot
      debug_ui_spot_to_views[sp] = debug_ui_spot_to_views[sp] || [];
      debug_ui_spot_to_views[sp].push(base+1);
      debug_ui_view_to_spot[base+1] = sp;
    

main_q.push([2, "if_attach_view", base+1, sp])
  spots.shift() //Un-Borrow spots array (it's held in a constant struct, so it *cannot* change)

  //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
  var embeds = [];
  for (var i = 1; i < spots.length; ++i) {
    embeds.push([]);
  }

  //Create controller information struct
  var info = {
    context: context,
    action: "choose_action",
    cte: cte,
    embeds: embeds,
    event_gw: event_gw,
    stack: [],
  };

  //Register controller base with the struct, we already requested base
  tel_reg_ptr(info, base);

  //Register the event handler callback
  reg_evt(base, controller_event_callback);

  //Call __init__
  cte.__init__(base);

  //Call the on_entry function with the base address
  cte.actions[info.action].on_entry(base);

  return base;
}

//Called when an event is received
function controller_event_callback(ep, event_name, info) {
  //Grab the controller instance
  var inst = tel_deref(ep);

  //Now, get the ctable entry
  var cte = inst.cte;

  //Now find the event handler for the current action of the controller
  var handler = cte.actions[inst.action].handlers[event_name];
  if (handler !== undefined) {
    handler(ep, info);
  } else {
    //Recurse
    if (inst.event_gw != null) {
      controller_event_callback(inst.event_gw, event_name, info);
    }
  }
}

function crc_init() {
  var c;
  crc_table = [];
  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    crc_table[n] = c;
  }
}
crc_init();

function crc32(seed, str) {
  var crc = seed ^ (-1);

  for (var i = 0; i < str.length; i++) {
    crc = (crc >>> 8) ^ crc_table[(crc ^ str.charCodeAt(i)) & 0xFF];
  }

  return (crc ^ (-1)) >>> 0;
};

//Everything to do with dynamic dispatch

//Receive some messages
//Each message is in one flat array
//that has the following format
//[n_args, function_name, *args]
//Here is an example with one call
//  [1, 'print', 'hello world']
//Here is an example with two successive calls
//  [2, 'mul', 3, 4, 1, 'print', 'hello world']
function int_dispatch(q) {
  //If there are things on the defer queue, then grab
  //one of them for now and do it
  if (edefer_q.length > 0) {
    var ep = edefer_q.shift();
    var ename = edefer_q.shift();
    var info = edefer_q.shift();
    int_event(ep, ename, info);
  }

  //Where there is still things left on the queue
  while (q.length > 0) {
    //Grab the first thing off the queue, this is the arg count
    var argc = q.shift();

    
      var method_name = q.shift();
      if (this[method_name] === undefined) {
        throw "Couldn't find method named: " + method_name;
      } else {
        this[method_name].apply(null, q.splice(0, argc));
      }
    
  }

  //Now push all of what we can back
  var dump = [];

  //Add 'i' to start
  var incomplete = false;

  //Send main queue
  if (main_q.length > 0) {
    var out = [0];
    for (var i = 0; i < main_q.length; ++i) {
      out.push.apply(out, main_q[i]);
    }
    dump.push(out);
    main_q = [];
  }

  if (net_q.length > 0 && net_q_rem > 0) {
    //Always pick the minimum between the amount remaining and the q length
    var n = net_q.length < net_q_rem ? net_q.length : net_q_rem;
    if (n != net_q.length) { incomplete = true; }

    var out = [1];
    var piece = net_q.splice(0, n);
    for (var i = 0; i < piece.length; ++i) {
      out.push.apply(out, piece[i]);
    }

    dump.push(out);
  }

  if (disk_q.length > 0 && disk_q_rem > 0) {
    //Always pick the minimum between the amount remaining and the q length
    var n = disk_q.length < disk_q_rem ? disk_q.length : disk_q_rem;
    if (n != disk_q.length) { incomplete = true; }

    var out = [2];
    var piece = disk_q.splice(0, n);
    for (var i = 0; i < piece.length; ++i) {
      out.push.apply(out, piece[i]);
    }
    dump.push(out);
  }

  if (cpu_q.length > 0 && cpu_q_rem > 0) {
    //Always pick the minimum between the amount remaining and the q length
    var n = cpu_q.length < cpu_q_rem ? cpu_q.length : cpu_q_rem;
    if (n != cpu_q.length) { incomplete = true; }

    var out = [3];
    var piece = cpu_q.splice(0, n);
    for (var i = 0; i < piece.length; ++i) {
      out.push.apply(out, piece[i]);
    }
    dump.push(out);
  }

  if (gpu_q.length > 0 && gpu_q_rem > 0) {
    //Always pick the minimum between the amount remaining and the q length
    var n = gpu_q.length < gpu_q_rem ? gpu_q.length : gpu_q_rem;
    if (n != gpu_q.length) { incomplete = true; }

    var out = [4];
    var piece = gpu_q.splice(0, n);
    for (var i = 0; i < piece.length; ++i) {
      out.push.apply(out, piece[i]);
    }
    dump.push(out);
  }

  if (incomplete || edefer_q.length > 0) { dump.unshift("i"); }

  if (dump.length != 0) {
    if_dispatch(dump);
  }
}

function ping() {
main_q.push([0, "pong"])
}

function ping1(arg1) {
main_q.push([1, "pong1", arg1])
}

function ping2(arg1, arg2) {
main_q.push([1, "pong2", arg1])
main_q.push([2, "pong2", arg1, arg2])
}

function ping3(arg1) {
  if (arg1 == "main") {
main_q.push([0, "pong3"])
  } else if (arg1 == "net") {
net_q.push([0, "pong3"])
  } else if (arg1 == "disk") {
disk_q.push([0, "pong3"])
  } else if (arg1 == "cpu") {
cpu_q.push([0, "pong3"])
  } else if (arg1 == "gpu") {
gpu_q.push([0, "pong3"])
  }
}

function ping4(arg1) {
  if (arg1 == "main") {
main_q.push([0, "pong4"])
  } else if (arg1 == "net") {
net_q.push([0, "pong4"])
  } else if (arg1 == "disk") {
disk_q.push([0, "pong4"])
  } else if (arg1 == "cpu") {
cpu_q.push([0, "pong4"])
  } else if (arg1 == "gpu") {
gpu_q.push([0, "pong4"])
  }
}

function ping4_int(arg1) {
  if (arg1 == "main") {
  } else if (arg1 == "net") {
    ++net_q_rem;
  } else if (arg1 == "disk") {
    ++disk_q_rem;
  } else if (arg1 == "cpu") {
    ++cpu_q_rem;
  } else if (arg1 == "gpu") {
    ++gpu_q_rem;
  }
}

//Queue something to be sent out
main_q = [];
net_q = [];
disk_q = [];
cpu_q = [];
gpu_q = [];

//Each queue has a max # of things that can be en-queued
//These are decremented when the message is sent (not just queued)
//and then re-incremented at the appropriate int_* mod entry.
net_q_rem = 5;
disk_q_rem = 5;
cpu_q_rem = 5;
gpu_q_rem = 5;


function spec_dispatch_q(queue, count) {
  for (var i = 0; i < count; ++i) {
    queue.push([0, "spec"]);
  }
}


//Generate a random seed
gen_seed = Math.floor(Math.random() * 1000000000);
gen_seed_s = Math.floor(Math.random() * 1000000000);

function gen_id() {
  gen_seed += 1;
  return crc32(gen_seed, gen_seed_s).toString();
}


kern_log_stdout = [];
function kern_log(str) {
  kern_log_stdout.push(str);
}

function kern_log_json(json) {
  //We don't want to capture a reference
  kern_log_stdout.push(
      JSON.parse(JSON.stringify(json))
  );
}



//Network Callback Related

var tp_to_info = {};

function get_req(owner, url, params, callback) {
  //Even though it's the same function, create a tp because we need to track owner somehow.
  var tp = tel_reg(get_req_callback);
  tp_to_info[tp] = {
    owner: owner,
    callback: callback
  };

  //Create request
net_q.push([4, "if_net_req", "GET", url, params, tp])
}

function get_req_callback(tp, success, info) {
  var _info = tp_to_info[tp];
  if (tel_exists(_info.owner) === true) {
    _info.callback(info);
  }

  tel_del(tp);
  delete tp_to_info[tp];
}


  


//Support for the telepathy protocol
tel_idx = 3;

//Global table linking telepointers to objects (like functions)
tel_table = {};

//This function creates N telepathic pointers and returns the starting index
//of the first pointer returned.  Successive pointers are just increments
//of the base value by one. Should be used as much as possible as it
//reduces the communication overhead (by allowing pipelining on futures),
//and prevents native pointers from entering the system (which allows more
//interesting abstractions like slaves)
function tels(n) {
  var o = tel_idx;
  tel_idx += n;
  return o;
}

function tel_reg(e) {
  var tp = tels(1);
  tel_table[tp] = e;

  return tp;
}

function tel_reg_ptr(e, tp) {
  tel_table[tp] = e;
}

function tel_del(tp) {
  delete tel_table[tp];
}

function tel_deref(tp) {
  return tel_table[tp];
}

function tel_exists(tp) {
  return tp in tel_table;
}

function time() {
  //Usually defined in rtc
  return __epoch__;
}

//Configure pg_dummy0

  function pg_dummy0_init(ns, options) {
    pg_dummy0_init_params = {ns: ns, options: options};
    pg_dummy0_ns = ns;

    pg_dummy0_spec_did_init = true;

    pg_dummy0_write_vm_cache_clone = [];
  }

  function pg_dummy0_watch(id, page) {
  }

  function pg_dummy0_unwatch(id) {
  }

  function pg_dummy0_write(page) {
    //Deep clone vm_cache at call time
    //Used by specs looking to see if HD lookup happends
    pg_dummy0_write_vm_cache_clone.push(JSON.parse(JSON.stringify(vm_cache)));
  }


//Configure pg_mem0, pg_mem1, pg_mem2

  function pg_mem0_init(ns, options) {
    pg_mem0_init_params = {ns: ns, options: options};
    pg_mem0_ns = ns;

    
      pg_mem0_spec_did_init = true;
    
  }

  function pg_mem0_watch(id, page) {
  }

  function pg_mem0_unwatch(id) {
  }

  function pg_mem0_write(page) {
    vm_transaction_begin();
    vm_cache_write(pg_mem0_ns, page);
    vm_transaction_end();
  }

  function pg_mem1_init(ns, options) {
    pg_mem1_init_params = {ns: ns, options: options};
    pg_mem1_ns = ns;

    
      pg_mem1_spec_did_init = true;
    
  }

  function pg_mem1_watch(id, page) {
  }

  function pg_mem1_unwatch(id) {
  }

  function pg_mem1_write(page) {
    vm_transaction_begin();
    vm_cache_write(pg_mem1_ns, page);
    vm_transaction_end();
  }

  function pg_mem2_init(ns, options) {
    pg_mem2_init_params = {ns: ns, options: options};
    pg_mem2_ns = ns;

    
      pg_mem2_spec_did_init = true;
    
  }

  function pg_mem2_watch(id, page) {
  }

  function pg_mem2_unwatch(id) {
  }

  function pg_mem2_write(page) {
    vm_transaction_begin();
    vm_cache_write(pg_mem2_ns, page);
    vm_transaction_end();
  }



function pg_net_sim_init(ns, options) {
  pg_net_sim_spec_did_init = true;
  pg_net_sim_ns = ns;

  //Set timer to tick every 2 seconds
  reg_evt(-9393, pg_net_sim_tick_handler);
  reg_interval(-9393, "tick", 4*2);

  pg_net_sim_waiting_for_response = [];
}

function pg_net_sim_tick_handler(ep, ename, info) {
  while (pg_net_sim_waiting_for_response.length > 0) {
    var e = pg_net_sim_waiting_for_response.shift();
    vm_transaction_begin();
      vm_cache_write(pg_net_sim_ns, pg_net_sim_stored_pages[e.id]);
    vm_transaction_end();
  }
}

function pg_net_sim_watch(id, page) {
  if (pg_net_sim_stored_pages[id] === undefined) {
    throw "Could not get page with id: " + id;
  }

  pg_net_sim_waiting_for_response.push({id: id});
}

function pg_net_sim_unwatch(id) {
}

function pg_net_sim_write(page) {
  vm_cache_write(pg_net_sim_ns, page);
}

//Special support function to simulate pages stored
//on a server
pg_net_sim_stored_pages = {};
function pg_net_sim_load_pages(pages) {
  for (var i = 0; i < pages.length; ++i) {
    var page = pages[i];
    pg_net_sim_stored_pages[page._id] = page;
  }
}


//Configure pg_sockio

  //Destination for events sent from the sockio driver
  function __pg_sockio0_xevent_handler(ep, ename, einfo) {
    //Events
    //update - From the sockio interface, an update refers to a page update
    //interval - Every 15 seconds, from the callout timer.
    if (ename === "update") {
      //If changes_id was given
      if (einfo.changes_id !== undefined) {
        //This is a friendly function that will ignore mis-matches of changes_id
        vm_mark_changes_synced(vm_cache[pg_sockio0_ns][einfo.page._id], einfo.changes_id);
      }

      //If page exists, then we need to rebase the page, this will actually
      //modify einfo.page. If the cached entry has no changes, then nothing
      //is done.
      if (vm_cache[pg_sockio0_ns][einfo.page._id] !== undefined) {
        vm_rebase(vm_cache[pg_sockio0_ns][einfo.page._id], einfo.page);
      }

      //Mark page as synced if it contains no changes, we don't need to check base
      //here because if it has base, it has __changes as well, we're using einfo
      //at this point, because it was rebased
      if (einfo.page.__changes === undefined) {
        vm_pg_unmark_needs_sync(pg_sockio0_ns, einfo.page._id)
      }

      //Write out page
      vm_transaction_begin();
        vm_cache_write(pg_sockio0_ns, einfo.page);
      vm_transaction_end();
    } else if (ename === "interval") {

      //Create watch_list
      var watch_list = [];
      var watched_keys = Object.keys(vm_notify_map[pg_sockio0_ns]);
      for (var i = 0; i < watched_keys.length; ++i) {
        var key = watched_keys[i];
        watch_list.push(key);

        //If entry exists, put in the hash value
        if (vm_cache[pg_sockio0_ns][key] === undefined) {
          watch_list.push(null);
        } else {
          watch_list.push(vm_cache[pg_sockio0_ns][key]._hash);
        }
      }

      //Synchronize the watchlist with the server
      var resync_info = {
        watch_list: watch_list
      };

net_q.push([3, "if_sockio_send", pg_sockio0_bp, "resync", resync_info])
    } else {
      
        throw "pg_sockio0_xevent_handler received an event called: " + ename + "that it does not know how to handle. This event should never have even been forwarded, but you may have missed adding the handler code if you did request a forward"
      
    }
  } 

  function pg_sockio0_init(ns, options) {
    pg_sockio0_ns = ns;

    if (options.url === undefined) {
      throw "pg_sockio0 was not given a url in options";
    }

    
      pg_sockio0_spec_did_init = true;
    

    //Register the base address for the socket and the destination for events
    pg_sockio0_bp = tels(1);
    reg_evt(pg_sockio0_bp, __pg_sockio0_xevent_handler);

main_q.push([2, "if_sockio_init", options.url, pg_sockio0_bp])

    //Signal that the socket.io driver should forward all events to the socket defined by pg_sockio{N}_bp
    //to the endpoint (with the same reference)
net_q.push([3, "if_sockio_fwd", pg_sockio0_bp, "update", pg_sockio0_bp])

    //Request a timer every 15 seconds
    reg_interval(pg_sockio0_bp, "interval", 15*4);
  }

  function pg_sockio0_watch(id, page) {
    var info = {
      page_id: id
    };
net_q.push([3, "if_sockio_send", pg_sockio0_bp, "watch", info])
  }

  function pg_sockio0_unwatch(id) {
    var info = {
      page_id: id
    }
net_q.push([3, "if_sockio_send", pg_sockio0_bp, "unwatch", info])
  }

  function pg_sockio0_write(page) {
    vm_transaction_begin();
      //If page exists in cache, then commit changes into the page
      var cached_page = vm_cache[pg_sockio0_ns][page._id];
      if (cached_page !== undefined) {
        vm_commit(cached_page, page);
      }

      //Write (Which will *not* copy the page)
      vm_cache_write(pg_sockio0_ns, page); 
    vm_transaction_end();

    //Mark pages as needing a synchronization
    vm_pg_mark_needs_sync(pg_sockio0_ns, page._id);
  }

  function pg_sockio0_sync(page_id) {
    var page = vm_cache[pg_sockio0_ns][page_id];
    //Clone page and send a copy to the server
    var copied = vm_copy_page(page);

    //Depending on whether the page is based, send the changes id
    if (page.__base !== undefined) {
      var info = {page: copied, changes: page.__base.__changes, changes_id: page.__base.__changes_id};
    } else {
      var info = {page: copied, changes: page.__changes, changes_id: page.__changes_id};
    }
net_q.push([3, "if_sockio_send", pg_sockio0_bp, "write", info])
  }


//Configure pg_spec0 and pg_spec1

  
    function pg_spec0_init(ns, options) {
      pg_spec0_watchlist = [];
      pg_spec0_unwatchlist = [];
      pg_spec0_init_params = {ns: ns, options: options};
      pg_spec0_ns = ns;
      pg_spec0_sync_requests = [];
    }

    function pg_spec0_watch(id, page) {
      pg_spec0_watchlist.push({id: id, page: page});
    }

    function pg_spec0_unwatch(id) {
      pg_spec0_unwatchlist.push(id);
    }

    function pg_spec0_write(page) {
      vm_transaction_begin();
      vm_cache_write(pg_spec0_ns, page);
      vm_transaction_end();
    }

    function pg_spec0_sync(page_id) {
      pg_spec0_sync_requests.push(page_id);
    }
  
    function pg_spec1_init(ns, options) {
      pg_spec1_watchlist = [];
      pg_spec1_unwatchlist = [];
      pg_spec1_init_params = {ns: ns, options: options};
      pg_spec1_ns = ns;
      pg_spec1_sync_requests = [];
    }

    function pg_spec1_watch(id, page) {
      pg_spec1_watchlist.push({id: id, page: page});
    }

    function pg_spec1_unwatch(id) {
      pg_spec1_unwatchlist.push(id);
    }

    function pg_spec1_write(page) {
      vm_transaction_begin();
      vm_cache_write(pg_spec1_ns, page);
      vm_transaction_end();
    }

    function pg_spec1_sync(page_id) {
      pg_spec1_sync_requests.push(page_id);
    }
  


MODS = ['ui', 'event', 'net', 'segue', 'controller', 'debug', 'sockio', 'persist', 'timer', 'rtc', 'dlink'];
PLATFORM = 'chrome';
function int_embed_surface(sp) {
}
//Event handler table
evt = {};

//Event defer queue
edefer_q = [];

function int_event(ep, event_name, info) {
  
    if (ep.constructor !== String && ep.constructor !== Number) { throw "int_event was given either something that wasn't a string or number for ep: '" + (ep.constructor) + "' and the value was: '" + ep + "'"};
  

  var f = evt[ep];
  if (f != undefined) {
    f(ep, event_name, info);
    return true;
  } else {
    return false;
  }
}

function reg_evt(ep, f) {
  evt[ep] = f;
}

function dereg_evt(ep) {
  delete evt[ep];
}

function int_event_defer(ep, ename, info) {
  
    if (ep.constructor !== String && ep.constructor !== Number) { throw "int_event_defer was given either something that wasn't a string or number for ep: '" + (ep.constructor) + "' and the value was: '" + ep + "'"};
  
  edefer_q.push(ep);
  edefer_q.push(ename);
  edefer_q.push(info);
}

//Spec helpers
////////////////////////////////////////////////////////////////
function spec_event_handler(ep, event_name, info) {
main_q.push([3, "if_event", ep, event_name, info])
}
reg_evt(3848392, spec_event_handler);

function int_spec_event_dereg() {
  dereg_evt(3848392);
}
////////////////////////////////////////////////////////////////
function int_net_cb(tp, success, info) {
  //Re-increase
  ++net_q_rem;
  tel_deref(tp)(tp, success, info);
}

//Spec helpers
/////////////////////////////////////////////////////
function get_int_net_cb_spec() {
main_q.push([1, "get_int_net_cb_spec", int_net_cb_spec])
}

//Manually register pointer at special index for testing, int_net_cb
//will call this pointer under test conditions so it's a good test
//for bost telepathy and net
tel_reg_ptr(function(tp, a, b) { int_net_cb_spec = [tp, a, b] }, -3209284741);
/////////////////////////////////////////////////////
//Contains bottom view as key and a the values are also a hash
//that contains the 'top' thing
//{
//  'nav_container' =>
//    {
//      'nav_container' => 'name'
//    }
//}
int_segue_interceptors = {
}

//Contains an array 

//Register a segue intercept
//name - The name of the segue to be given if_segue_do
//from_view_name - The name of the bottom view to intercept
//to_view_name - The name of the top view to intercept

function reg(name, from_view_name, to_view_name) {
  //Create hash if it dosen't already exist
  int_segue_interceptors[from_view_name] = int_segue_interceptors[from_view_name] || {};
  int_segue_interceptors[from_view_name][to_view_name] = name;
}

//Will send the 'if' commands
function intercept_if_necessary(bottom_view_name, top_view_name, from_vp, to_vp) {
  if (int_segue_interceptors[bottom_view_name] && int_segue_interceptors[bottom_view_name][top_view_name]) {
    var rez = int_segue_interceptors[bottom_view_name][top_view_name];

main_q.push([3, "if_segue_do", rez, from_vp, to_vp])
  }
}

reg("modal", "nav_container", "nav_container.detach");
reg("unmodal", "nav_container", "nav_container.attach");

////////////////////////////////////////////////////////////
//Eval
////////////////////////////////////////////////////////////
function int_debug_eval(str) {
  var res = eval(str);
  var payload = {
    res: res
  }

main_q.push([3, "if_event", -333, "eval_res", payload])
}

function debug_eval_spec() {
  return 'hello';
}

////////////////////////////////////////////////////////////
//Dump hierarchy
////////////////////////////////////////////////////////////
function int_debug_dump_ui() {
  //The root spot is not a real spot, it's just the 
  //starting node that is conventionally refered to
  //as view with 'pointer 0'.
  var payload = {
    name: "root",
    type: "spot",
    ptr: 0,
    children: []
  };

  //Recurse starting with the root view controller
  //that was attached to the 'root spot' at ptr 0. There
  //is only one view controller that will exist here, so
  //it's set to the only child
  if (debug_root_vc) {
    var rvc = {};
    dump_ui_recurse(debug_root_vc, rvc);
    payload.children.push(rvc);
  }

main_q.push([3, "if_event", -333, "debug_dump_ui_res", payload])
}

function dump_ui_recurse(ptr, node) {
  //What kind of thing does ptr point to? Look it up in the
  //special debug_ui_ptr_type hash we made
  //vc - View Controller (always inside a spot)
  //view - View (always matched below view controller)
  //spot - Spot (always inside a view)
  if (debug_ui_ptr_type[ptr] === 'vc') {
    node['type'] = 'vc';
    node['ptr'] = ptr;

    //Live controller instance
    var cinfo = tel_deref(ptr);
    var cte = cinfo.cte;

    //Get action
    var action = cinfo.action;
    node['action'] = action;

    //Get name from the ctable reference
    node['name'] = cte.name;

    //Get a list of events that this action responds to
    node['events'] = Object.keys(cte.actions[action].handlers);

    //Recurse with the 'main' view (ptr+1) in this view controller's
    //first child slot. (there is only one view per view controller)
    //and it's called 'main' and is always the first child of the vc.
    node['children'] = [{}];
    dump_ui_recurse(ptr+1, node['children'][0])
  } else if (debug_ui_ptr_type[ptr] === 'view') {
    node['type'] = 'view';
    node['ptr'] = ptr;

    //The name will be part of the view controller,
    //we can get the vc ptr by subtracting one from
    //this view because each view controller's 'main'
    //spot is this view, and there's only one.
    var vc_ptr = ptr-1;
    var cinfo = tel_deref(vc_ptr); //Live controller instance
    var cte = cinfo.cte;  //Controller table entry (static)
    node['name'] = cte.root_view;

    //Get a listing of spots, ignore spot 0
    //because it's actually this view (the main spot)
    node['children'] = [];
    for (var i = 1; i < cte.spots.length; ++i) {
      var sn = {};
      sn['name'] = cte.spots[i];  //Set the name here, easiest way
      sn['ptr'] = ptr+i;
      dump_ui_recurse(ptr+i, sn);
      node['children'].push(sn);
    }
  } else if (debug_ui_ptr_type[ptr] === 'spot') {
    //Name and ptr is already set in the view recurse portion above
    node['type'] = 'spot';

    node['children'] = [];

    //Do we have children, are these spots actually filled?
    var attached_view_ptrs = debug_ui_spot_to_views[ptr];
    if (attached_view_ptrs !== undefined) {
      for (var i = 0; i < attached_view_ptrs.length; ++i) {
        //View controller is located at 1 below the view pointer
        var bp = attached_view_ptrs[i]-1;

        //Create a new controller node
        var cnode = {};
        dump_ui_recurse(bp, cnode);
        node['children'].push(cnode);
      }
    }
  }
}

////////////////////////////////////////////////////////////
//Controller describe
////////////////////////////////////////////////////////////
function int_debug_controller_describe(bp) {
  //Grab the controller's instance and table entry
  var cinfo = tel_deref(bp);
  var cte = cinfo.cte;

  var payload = {
    context: cinfo.context,
    events: Object.keys(cte.actions[cinfo.action].handlers) 
  };
main_q.push([3, "if_event", -333, "debug_controller_describe_res", payload])
}
//Stub
//Stub
//cpu_q.push([1, "if_timer_init", 4])

function int_timer() {
  callout_wakeup();
}
__epoch__ = -1;

function int_rtc(epoch) {
  __epoch__ = epoch;
}
function int_dlink_notify(url, params) {
  
    int_dlink_spec_last_request = [url, params];
  

  //Currently sends off to the sister dlink-service by default
  dlink_notify_handler(url, params);
}

//Spec tracks the last given notify request

int_dlink_spec_last_request = null;
function get_int_dlink_spec() {
main_q.push([1, "get_int_dlink_spec", int_dlink_spec_last_request])
}

ctable = {
  
      plan_active_segment: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'plan_active_segment',
        root_view: 'plan_active_segment',
        spots: ["main","content"],
        actions: {
          
              plans: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: plan_active_segment was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("active_plan_nav", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    workout_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('workout_clicked') for the controller: plan_active_segment:plans was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "workout";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"plan_active_segment","might_respond_to":["workout_clicked","plans_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"]},"from_action":"plans","to_action":"workout"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout"
            }]);
          
	    

                    },
                  
                  
                },
              },
          
              workout: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: plan_active_segment was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_nav", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    plans_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('plans_clicked') for the controller: plan_active_segment:workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "plans";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"plan_active_segment","might_respond_to":["workout_clicked","plans_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"]},"from_action":"workout","to_action":"plans"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "plans"
            }]);
          
	    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "plans";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"plan_active_segment","might_respond_to":["workout_clicked","plans_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"]},"from_action":"choose_action","to_action":"plans"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "plans"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      active_plan_nav: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'active_plan_nav',
        root_view: 'active_plan_nav',
        spots: ["main","content"],
        actions: {
          
              active_plan_setup: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: active_plan_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("active_plan_setup_nav", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    start_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('start_clicked') for the controller: active_plan_nav:active_plan_setup was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "active_plan";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"active_plan_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[]},"from_action":"active_plan_setup","to_action":"active_plan"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "active_plan"
            }]);
          
    	

                    },
                  
                  
                },
              },
          
              active_plan: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: active_plan_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("active_plan", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "active_plan_setup";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"active_plan_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[]},"from_action":"choose_action","to_action":"active_plan_setup"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "active_plan_setup"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      active_plan_setup_nav: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'active_plan_setup_nav',
        root_view: 'active_plan_setup_nav',
        spots: ["main","content"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: active_plan_setup_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("active_plan_question0", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    next_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('next_clicked') for the controller: active_plan_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "question";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "question"
            }]);
          
		

                    },
                  
                  
                },
              },
          
              question: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: active_plan_setup_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("active_plan_question1", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: active_plan_setup_nav:question was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
		

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"active_plan_setup_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["next_clicked"],"question":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      active_plan_question0: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'active_plan_question0',
        root_view: 'active_plan_question0',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"active_plan_question0","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      active_plan_question1: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'active_plan_question1',
        root_view: 'active_plan_question1',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"active_plan_question1","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      active_plan: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'active_plan',
        root_view: 'active_plan',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"active_plan","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      activity_feed: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'activity_feed',
        root_view: 'activity_feed',
        spots: ["main","content"],
        actions: {
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var _info = { ns: "auth", id: "session" }

            vm_on_read_sync(__base__, _info);
          
      var info = {ns: "sockio", id: "/user/" + context.uid + "/activity_feed"};

            vm_on_watch(__base__, info);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: activity_feed was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: activity_feed:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else {
        context.entries = params.entries;

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"activity_feed","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"]},"from_action":"loading","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              loaded: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: activity_feed was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("activity_feed_content", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: activity_feed:loaded was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else {
        context.entries = params.entries;

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"activity_feed","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"]},"from_action":"loaded","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"activity_feed","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"]},"from_action":"choose_action","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      activity_feed_content: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'activity_feed_content',
        root_view: 'activity_feed_content',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"activity_feed_content","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      corperate_setup: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'corperate_setup',
        root_view: 'corperate_setup',
        spots: ["main","content"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: corperate_setup was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("corperate_setup_splash", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("Corperate Setup Splash")
                },
                handlers: {
                  
                    get_started_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('get_started_clicked') for the controller: corperate_setup:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("coprerate_get_started_clicked");

            var old_action = __info__.action;
            __info__.action = "setup";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"corperate_setup","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["get_started_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"]},"from_action":"index","to_action":"setup"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "setup"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              setup: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var ctx = {
        company: context.company,
      }

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: corperate_setup was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("get_started", __base__+1+1, ctx, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: corperate_setup:setup was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"corperate_setup","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["get_started_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"]},"from_action":"setup","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"corperate_setup","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["get_started_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      corperate_setup_splash: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'corperate_setup_splash',
        root_view: 'corperate_setup_splash',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"corperate_setup_splash","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      dash_home: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'dash_home',
        root_view: 'dash_home',
        spots: ["main","activity","plan"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_home was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("activity_feed", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_home was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("dash_plan", __base__+2+1, {}, __base__);
            __info__.embeds[1].push(ptr);
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_home","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      dash_activity: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'dash_activity',
        root_view: 'dash_activity',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_activity","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      dash_plan: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'dash_plan',
        root_view: 'dash_plan',
        spots: ["main","calendar","start_workout"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_plan was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("dash_plan_calendar", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_plan was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("dash_plan_start_workout", __base__+2+1, {}, __base__);
            __info__.embeds[1].push(ptr);
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      notebook: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'notebook',
        root_view: 'notebook',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      team: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'team',
        root_view: 'team',
        spots: ["main","list","act_comp"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: team was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("team_list", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: team was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("team_act_comp", __base__+2+1, {}, __base__);
            __info__.embeds[1].push(ptr);
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"team","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      team_list: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'team_list',
        root_view: 'team_list',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"team_list","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      team_act_comp: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'team_act_comp',
        root_view: 'team_act_comp',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"team_act_comp","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["plans_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      dash_nav: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'dash_nav',
        root_view: 'dash_nav',
        spots: ["main","content"],
        actions: {
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var _info = { ns: "auth", id: "session" }

            vm_on_read_sync(__base__, _info);
          
      //Profile should be loaded via user registration
      var info = {
        ns: "sockio",
        id: "/user/" + context.uid + "/profile",
        sync: true
      }

            vm_on_watch(__base__, info);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: dash_nav:choose_action was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/user/" + context.uid + "/profile") {
        var name = (vm_entry_with_id(params, "name") || {}).value || ""

        var info = {
          ui_first_name: name.split(" ")[0]
        }

           main_q.push([3, "if_event", __base__, "profile_update", info])
          
        if (current_action === "choose_action") {

            var old_action = __info__.action;
            __info__.action = "home";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"choose_action","to_action":"home"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "home"
            }]);
          
        }
      }
    

                    },
                  
                  
                },
              },
          
              home: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("dash_home", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("dash_home");
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: dash_nav:home was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/user/" + context.uid + "/profile") {
        var name = (vm_entry_with_id(params, "name") || {}).value || ""

        var info = {
          ui_first_name: name.split(" ")[0]
        }

           main_q.push([3, "if_event", __base__, "profile_update", info])
          
        if (current_action === "choose_action") {

            var old_action = __info__.action;
            __info__.action = "home";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"home","to_action":"home"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "home"
            }]);
          
        }
      }
    

                    },
                  
                    notebook_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('notebook_clicked') for the controller: dash_nav:home was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "notebook") {

            var old_action = __info__.action;
            __info__.action = "notebook";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"home","to_action":"notebook"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "notebook"
            }]);
          
      }
    

                    },
                  
                    team_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('team_clicked') for the controller: dash_nav:home was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "team") {

            var old_action = __info__.action;
            __info__.action = "team";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"home","to_action":"team"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "team"
            }]);
          
      }
    

                    },
                  
                    settings_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('settings_clicked') for the controller: dash_nav:home was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "settings") {

            var old_action = __info__.action;
            __info__.action = "settings";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"home","to_action":"settings"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "settings"
            }]);
          
      }
    

                    },
                  
                    home_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('home_clicked') for the controller: dash_nav:home was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "home") {

            var old_action = __info__.action;
            __info__.action = "home";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"home","to_action":"home"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "home"
            }]);
          
      }
    

                    },
                  
                    start_plan_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('start_plan_clicked') for the controller: dash_nav:home was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "plan_setup";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "plan_setup"
            }]);
          
    

                    },
                  
                    workout_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('workout_clicked') for the controller: dash_nav:home was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "workout";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              workout: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_nav", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_setup_nav");
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: dash_nav:workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/user/" + context.uid + "/profile") {
        var name = (vm_entry_with_id(params, "name") || {}).value || ""

        var info = {
          ui_first_name: name.split(" ")[0]
        }

           main_q.push([3, "if_event", __base__, "profile_update", info])
          
        if (current_action === "choose_action") {

            var old_action = __info__.action;
            __info__.action = "home";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"workout","to_action":"home"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "home"
            }]);
          
        }
      }
    

                    },
                  
                    exit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('exit_clicked') for the controller: dash_nav:workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                    notebook_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('notebook_clicked') for the controller: dash_nav:workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "notebook") {

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          

            var old_action = __info__.action;
            __info__.action = "notebook";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"workout","to_action":"notebook"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "notebook"
            }]);
          
      }
    

                    },
                  
                    team_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('team_clicked') for the controller: dash_nav:workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "team") {

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          

            var old_action = __info__.action;
            __info__.action = "team";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"workout","to_action":"team"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "team"
            }]);
          
      }
    

                    },
                  
                    settings_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('settings_clicked') for the controller: dash_nav:workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "settings") {

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          

            var old_action = __info__.action;
            __info__.action = "settings";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"workout","to_action":"settings"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "settings"
            }]);
          
      }
    

                    },
                  
                    home_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('home_clicked') for the controller: dash_nav:workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "home") {

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
      }
    

                    },
                  
                  
                },
              },
          
              plan_setup: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_plan_nav", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_setup_plan_nav");
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: dash_nav:plan_setup was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/user/" + context.uid + "/profile") {
        var name = (vm_entry_with_id(params, "name") || {}).value || ""

        var info = {
          ui_first_name: name.split(" ")[0]
        }

           main_q.push([3, "if_event", __base__, "profile_update", info])
          
        if (current_action === "choose_action") {

            var old_action = __info__.action;
            __info__.action = "home";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"plan_setup","to_action":"home"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "home"
            }]);
          
        }
      }
    

                    },
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: dash_nav:plan_setup was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                    notebook_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('notebook_clicked') for the controller: dash_nav:plan_setup was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "notebook") {

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          

            var old_action = __info__.action;
            __info__.action = "notebook";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"plan_setup","to_action":"notebook"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "notebook"
            }]);
          
      }
    

                    },
                  
                    team_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('team_clicked') for the controller: dash_nav:plan_setup was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "team") {

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          

            var old_action = __info__.action;
            __info__.action = "team";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"plan_setup","to_action":"team"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "team"
            }]);
          
      }
    

                    },
                  
                    settings_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('settings_clicked') for the controller: dash_nav:plan_setup was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "settings") {

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          

            var old_action = __info__.action;
            __info__.action = "settings";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"plan_setup","to_action":"settings"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "settings"
            }]);
          
      }
    

                    },
                  
                    home_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('home_clicked') for the controller: dash_nav:plan_setup was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "home") {

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
      }
    

                    },
                  
                  
                },
              },
          
              notebook: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("notebook_root", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("notebook_root");
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: dash_nav:notebook was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/user/" + context.uid + "/profile") {
        var name = (vm_entry_with_id(params, "name") || {}).value || ""

        var info = {
          ui_first_name: name.split(" ")[0]
        }

           main_q.push([3, "if_event", __base__, "profile_update", info])
          
        if (current_action === "choose_action") {

            var old_action = __info__.action;
            __info__.action = "home";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"notebook","to_action":"home"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "home"
            }]);
          
        }
      }
    

                    },
                  
                    notebook_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('notebook_clicked') for the controller: dash_nav:notebook was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "notebook") {

            var old_action = __info__.action;
            __info__.action = "notebook";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"notebook","to_action":"notebook"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "notebook"
            }]);
          
      }
    

                    },
                  
                    team_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('team_clicked') for the controller: dash_nav:notebook was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "team") {

            var old_action = __info__.action;
            __info__.action = "team";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"notebook","to_action":"team"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "team"
            }]);
          
      }
    

                    },
                  
                    settings_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('settings_clicked') for the controller: dash_nav:notebook was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "settings") {

            var old_action = __info__.action;
            __info__.action = "settings";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"notebook","to_action":"settings"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "settings"
            }]);
          
      }
    

                    },
                  
                    home_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('home_clicked') for the controller: dash_nav:notebook was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "home") {

            var old_action = __info__.action;
            __info__.action = "home";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"notebook","to_action":"home"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "home"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              team: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("team", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("team");
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: dash_nav:team was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/user/" + context.uid + "/profile") {
        var name = (vm_entry_with_id(params, "name") || {}).value || ""

        var info = {
          ui_first_name: name.split(" ")[0]
        }

           main_q.push([3, "if_event", __base__, "profile_update", info])
          
        if (current_action === "choose_action") {

            var old_action = __info__.action;
            __info__.action = "home";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"team","to_action":"home"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "home"
            }]);
          
        }
      }
    

                    },
                  
                    notebook_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('notebook_clicked') for the controller: dash_nav:team was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "notebook") {

            var old_action = __info__.action;
            __info__.action = "notebook";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"team","to_action":"notebook"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "notebook"
            }]);
          
      }
    

                    },
                  
                    team_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('team_clicked') for the controller: dash_nav:team was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "team") {

            var old_action = __info__.action;
            __info__.action = "team";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"team","to_action":"team"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "team"
            }]);
          
      }
    

                    },
                  
                    settings_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('settings_clicked') for the controller: dash_nav:team was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "settings") {

            var old_action = __info__.action;
            __info__.action = "settings";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"team","to_action":"settings"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "settings"
            }]);
          
      }
    

                    },
                  
                    home_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('home_clicked') for the controller: dash_nav:team was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "home") {

            var old_action = __info__.action;
            __info__.action = "home";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"team","to_action":"home"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "home"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              settings: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("settings", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("settings");
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: dash_nav:settings was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/user/" + context.uid + "/profile") {
        var name = (vm_entry_with_id(params, "name") || {}).value || ""

        var info = {
          ui_first_name: name.split(" ")[0]
        }

           main_q.push([3, "if_event", __base__, "profile_update", info])
          
        if (current_action === "choose_action") {

            var old_action = __info__.action;
            __info__.action = "home";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"settings","to_action":"home"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "home"
            }]);
          
        }
      }
    

                    },
                  
                    notebook_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('notebook_clicked') for the controller: dash_nav:settings was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "notebook") {

            var old_action = __info__.action;
            __info__.action = "notebook";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"settings","to_action":"notebook"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "notebook"
            }]);
          
      }
    

                    },
                  
                    team_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('team_clicked') for the controller: dash_nav:settings was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "team") {

            var old_action = __info__.action;
            __info__.action = "team";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"settings","to_action":"team"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "team"
            }]);
          
      }
    

                    },
                  
                    settings_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('settings_clicked') for the controller: dash_nav:settings was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "settings") {

            var old_action = __info__.action;
            __info__.action = "settings";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"settings","to_action":"settings"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "settings"
            }]);
          
      }
    

                    },
                  
                    home_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('home_clicked') for the controller: dash_nav:settings was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      if (current_action !== "home") {

            var old_action = __info__.action;
            __info__.action = "home";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"settings","to_action":"home"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "home"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
        },
      },
  
      dash_plan_calendar: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'dash_plan_calendar',
        root_view: 'dash_plan_calendar',
        spots: ["main","content"],
        actions: {
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_plan_calendar was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      var info = {ns: "auth", id: "session"};

            vm_on_watch(__base__, info);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: dash_plan_calendar:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value;

        //now make a request for the calendar page
        context.calendar_page_id = "/plans/user/" + context.uid + "/calendar";
        var info = {ns: "sockio", id: context.calendar_page_id};

            vm_on_watch(__base__, info);
                } else if (params._id === context.calendar_page_id) {
        context.calendar_page = params;
      }

      if (context.calendar_page !== undefined) {

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_calendar","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"loading","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              loaded: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var entries = context.calendar_page.entries;
      var _context = {entries: entries};

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_plan_calendar was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("dash_plan_calendar_content", __base__+1+1, _context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: dash_plan_calendar:loaded was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value;

        //now make a request for the calendar page
        context.calendar_page_id = "/plans/user/" + context.uid + "/calendar";
        var info = {ns: "sockio", id: context.calendar_page_id};

            vm_on_watch(__base__, info);
                } else if (params._id === context.calendar_page_id) {
        context.calendar_page = params;
      }

      if (context.calendar_page !== undefined) {

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_calendar","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"loaded","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_calendar","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"choose_action","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      dash_plan_calendar_content: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'dash_plan_calendar_content',
        root_view: 'dash_plan_calendar_content',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_calendar_content","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      dash_plan_start_workout: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'dash_plan_start_workout',
        root_view: 'dash_plan_start_workout',
        spots: ["main","content"],
        actions: {
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_plan_start_workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      var info = {ns: "auth", id: "session"};

            vm_on_watch(__base__, info);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: dash_plan_start_workout:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value;

        //now make a request for the suggested_workout page
        context.suggested_workout_page_id = "/plans/user/" + context.uid + "/suggested_workout";
        var info = {ns: "sockio", id: context.suggested_workout_page_id};

            vm_on_watch(__base__, info);
                } else if (params._id === context.suggested_workout_page_id) {
        context.suggested_workout_page = params;
      }

      if (context.suggested_workout_page !== undefined && context.uid !== undefined) {
        var status = vm_entry_with_id(context.suggested_workout_page, "status").value
        if (status.type === "workout_not_scheduled") {

            var old_action = __info__.action;
            __info__.action = "workout_not_scheduled";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loading","to_action":"workout_not_scheduled"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_not_scheduled"
            }]);
          
        } else if (status.type === "workout_not_started") {

            var old_action = __info__.action;
            __info__.action = "workout_not_started";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loading","to_action":"workout_not_started"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_not_started"
            }]);
          
        } else if (status.type === "workout_in_progress") {

            var old_action = __info__.action;
            __info__.action = "workout_in_progress";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loading","to_action":"workout_in_progress"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_in_progress"
            }]);
          
        } else if (status.type === "workout_completed") {

            var old_action = __info__.action;
            __info__.action = "workout_completed";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loading","to_action":"workout_completed"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_completed"
            }]);
          
        }
      }
    

                    },
                  
                  
                },
              },
          
              workout_not_scheduled: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_plan_start_workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("dash_plan_start_workout_not_scheduled", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: dash_plan_start_workout:workout_not_scheduled was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value;

        //now make a request for the suggested_workout page
        context.suggested_workout_page_id = "/plans/user/" + context.uid + "/suggested_workout";
        var info = {ns: "sockio", id: context.suggested_workout_page_id};

            vm_on_watch(__base__, info);
                } else if (params._id === context.suggested_workout_page_id) {
        context.suggested_workout_page = params;
      }

      if (context.suggested_workout_page !== undefined && context.uid !== undefined) {
        var status = vm_entry_with_id(context.suggested_workout_page, "status").value
        if (status.type === "workout_not_scheduled") {

            var old_action = __info__.action;
            __info__.action = "workout_not_scheduled";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_not_scheduled","to_action":"workout_not_scheduled"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_not_scheduled"
            }]);
          
        } else if (status.type === "workout_not_started") {

            var old_action = __info__.action;
            __info__.action = "workout_not_started";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_not_scheduled","to_action":"workout_not_started"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_not_started"
            }]);
          
        } else if (status.type === "workout_in_progress") {

            var old_action = __info__.action;
            __info__.action = "workout_in_progress";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_not_scheduled","to_action":"workout_in_progress"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_in_progress"
            }]);
          
        } else if (status.type === "workout_completed") {

            var old_action = __info__.action;
            __info__.action = "workout_completed";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_not_scheduled","to_action":"workout_completed"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_completed"
            }]);
          
        }
      }
    

                    },
                  
                    resume_plan_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('resume_plan_clicked') for the controller: dash_plan_start_workout:workout_not_scheduled was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      var info = {wid: context.wid};

            int_event(__info__.event_gw, "start_workout", info);
              

                    },
                  
                  
                },
              },
          
              workout_not_started: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var suggested_workout_page = context.suggested_workout_page;

      var _context = {
        plan_day_type: vm_entry_with_id(suggested_workout_page, "plan_day_type").value,
        ui_short_description: vm_entry_with_id(suggested_workout_page, "ui_short_description").value,
        ui_image: vm_entry_with_id(suggested_workout_page, "ui_image").value,
      }


            
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_plan_start_workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("dash_plan_start_workout_not_started", __base__+1+1, _context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: dash_plan_start_workout:workout_not_started was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value;

        //now make a request for the suggested_workout page
        context.suggested_workout_page_id = "/plans/user/" + context.uid + "/suggested_workout";
        var info = {ns: "sockio", id: context.suggested_workout_page_id};

            vm_on_watch(__base__, info);
                } else if (params._id === context.suggested_workout_page_id) {
        context.suggested_workout_page = params;
      }

      if (context.suggested_workout_page !== undefined && context.uid !== undefined) {
        var status = vm_entry_with_id(context.suggested_workout_page, "status").value
        if (status.type === "workout_not_scheduled") {

            var old_action = __info__.action;
            __info__.action = "workout_not_scheduled";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_not_started","to_action":"workout_not_scheduled"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_not_scheduled"
            }]);
          
        } else if (status.type === "workout_not_started") {

            var old_action = __info__.action;
            __info__.action = "workout_not_started";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_not_started","to_action":"workout_not_started"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_not_started"
            }]);
          
        } else if (status.type === "workout_in_progress") {

            var old_action = __info__.action;
            __info__.action = "workout_in_progress";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_not_started","to_action":"workout_in_progress"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_in_progress"
            }]);
          
        } else if (status.type === "workout_completed") {

            var old_action = __info__.action;
            __info__.action = "workout_completed";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_not_started","to_action":"workout_completed"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_completed"
            }]);
          
        }
      }
    

                    },
                  
                  
                },
              },
          
              workout_in_progress: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var suggested_workout_page = context.suggested_workout_page;
      context.wid = vm_entry_with_id(suggested_workout_page, "status").value.wid

      var _context = {
        plan_day_type: vm_entry_with_id(suggested_workout_page, "plan_day_type").value,
        ui_short_description: vm_entry_with_id(suggested_workout_page, "ui_short_description").value,
        ui_image: vm_entry_with_id(suggested_workout_page, "ui_image").value,
        wid: context.wid
      }


            
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_plan_start_workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("dash_plan_start_workout_in_progress", __base__+1+1, _context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: dash_plan_start_workout:workout_in_progress was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value;

        //now make a request for the suggested_workout page
        context.suggested_workout_page_id = "/plans/user/" + context.uid + "/suggested_workout";
        var info = {ns: "sockio", id: context.suggested_workout_page_id};

            vm_on_watch(__base__, info);
                } else if (params._id === context.suggested_workout_page_id) {
        context.suggested_workout_page = params;
      }

      if (context.suggested_workout_page !== undefined && context.uid !== undefined) {
        var status = vm_entry_with_id(context.suggested_workout_page, "status").value
        if (status.type === "workout_not_scheduled") {

            var old_action = __info__.action;
            __info__.action = "workout_not_scheduled";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_in_progress","to_action":"workout_not_scheduled"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_not_scheduled"
            }]);
          
        } else if (status.type === "workout_not_started") {

            var old_action = __info__.action;
            __info__.action = "workout_not_started";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_in_progress","to_action":"workout_not_started"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_not_started"
            }]);
          
        } else if (status.type === "workout_in_progress") {

            var old_action = __info__.action;
            __info__.action = "workout_in_progress";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_in_progress","to_action":"workout_in_progress"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_in_progress"
            }]);
          
        } else if (status.type === "workout_completed") {

            var old_action = __info__.action;
            __info__.action = "workout_completed";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_in_progress","to_action":"workout_completed"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_completed"
            }]);
          
        }
      }
    

                    },
                  
                    resume_plan_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('resume_plan_clicked') for the controller: dash_plan_start_workout:workout_in_progress was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      var info = {wid: context.wid};

            int_event(__info__.event_gw, "start_workout", info);
              

                    },
                  
                  
                },
              },
          
              workout_completed: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var suggested_workout_page = context.suggested_workout_page;

      var _context = {
        plan_day_type: vm_entry_with_id(suggested_workout_page, "plan_day_type").value,
        ui_short_description: vm_entry_with_id(suggested_workout_page, "ui_short_description").value,
        ui_image: vm_entry_with_id(suggested_workout_page, "ui_image").value
      }


            
              if (__base__.constructor !== Number) { throw "Embed for the controller: dash_plan_start_workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("dash_plan_start_workout_completed", __base__+1+1, _context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: dash_plan_start_workout:workout_completed was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value;

        //now make a request for the suggested_workout page
        context.suggested_workout_page_id = "/plans/user/" + context.uid + "/suggested_workout";
        var info = {ns: "sockio", id: context.suggested_workout_page_id};

            vm_on_watch(__base__, info);
                } else if (params._id === context.suggested_workout_page_id) {
        context.suggested_workout_page = params;
      }

      if (context.suggested_workout_page !== undefined && context.uid !== undefined) {
        var status = vm_entry_with_id(context.suggested_workout_page, "status").value
        if (status.type === "workout_not_scheduled") {

            var old_action = __info__.action;
            __info__.action = "workout_not_scheduled";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_completed","to_action":"workout_not_scheduled"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_not_scheduled"
            }]);
          
        } else if (status.type === "workout_not_started") {

            var old_action = __info__.action;
            __info__.action = "workout_not_started";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_completed","to_action":"workout_not_started"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_not_started"
            }]);
          
        } else if (status.type === "workout_in_progress") {

            var old_action = __info__.action;
            __info__.action = "workout_in_progress";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_completed","to_action":"workout_in_progress"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_in_progress"
            }]);
          
        } else if (status.type === "workout_completed") {

            var old_action = __info__.action;
            __info__.action = "workout_completed";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"workout_completed","to_action":"workout_completed"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout_completed"
            }]);
          
        }
      }
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      dash_plan_start_workout_not_scheduled: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'dash_plan_start_workout_not_scheduled',
        root_view: 'dash_plan_start_workout_not_scheduled',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout_not_scheduled","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      dash_plan_start_workout_not_started: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'dash_plan_start_workout_not_started',
        root_view: 'dash_plan_start_workout_not_started',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout_not_started","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      dash_plan_start_workout_in_progress: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'dash_plan_start_workout_in_progress',
        root_view: 'dash_plan_start_workout_in_progress',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout_in_progress","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      dash_plan_start_workout_completed: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'dash_plan_start_workout_completed',
        root_view: 'dash_plan_start_workout_completed',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"dash_plan_start_workout_completed","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_delay: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_delay',
        root_view: 'workout_delay',
        spots: ["main","content"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  window.delay = 100;

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_delay was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_nav", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_delay","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      spin_loader: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'spin_loader',
        root_view: 'spin_loader',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"spin_loader","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      notebook_metric_add: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'notebook_metric_add',
        root_view: 'notebook_metric_add',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var _info = { ns: "auth", id: "session" }

            vm_on_read_sync(__base__, _info);
          
      var info = {ns: "sockio", id: "/user/" + context.uid + "/notebook/"+context.metric_info.tag};

            vm_on_watch(__base__, info);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: notebook_metric_add:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else {
        context.page = params;
      }
    

                    },
                  
                    value_entered: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('value_entered') for the controller: notebook_metric_add:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("notebook_metric_added", params);
      var value = params.value;

      var _page = vm_copy_page(context.page);
      _page.entries.unshift({
        _id: gen_id(),
        _sig: gen_id(),
        value: value,
        timestamp: time(),
        __not_synced: true
      });

      var info = {ns: "sockio", page: _page};

            vm_on_write(__base__, info);
              

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_add","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","value_entered"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      notebook_metric_graph_content: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'notebook_metric_graph_content',
        root_view: 'notebook_metric_graph_content',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  context.xEntries = [];
      context.yEntries = [];
      for (var i = 0; i < context.notebook_metric_entries.length; ++i) {
        var entry = context.notebook_metric_entries[i];
        context.yEntries.unshift(entry.value);
        context.xEntries.unshift("");
      }
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_graph_content","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  context.xEntries = [];
      context.yEntries = [];
      for (var i = 0; i < context.notebook_metric_entries.length; ++i) {
        var entry = context.notebook_metric_entries[i];
        context.yEntries.unshift(entry.value);
        context.xEntries.unshift("");
      }
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      notebook_metric_fabric: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'notebook_metric_fabric',
        root_view: 'notebook_metric_fabric',
        spots: ["main","content"],
        actions: {
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var _info = { ns: "auth", id: "session" }

            vm_on_read_sync(__base__, _info);
          
      var info = { ns: "sockio", id: "/user/"+context.uid+"/notebook/choices", sync: true}

            vm_on_watch(__base__, info);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: notebook_metric_fabric:choose_action was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id !== undefined) {
        var notebook_metric_tag = context.notebook_metric_tag;
        //Locate the entry with the correct tag
        var metric_infos = params.entries;
        var matching_info = {};
        for (var i = 0; i < metric_infos.length; ++i) {
          if (metric_infos[i].tag === notebook_metric_tag) {
            matching_info = metric_infos[i];
            break;
          }
        }

        context.metric_info = matching_info;

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_fabric","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      } else {

            var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_fabric","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: notebook_metric_fabric was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: notebook_metric_fabric:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id !== undefined) {
        var notebook_metric_tag = context.notebook_metric_tag;
        //Locate the entry with the correct tag
        var metric_infos = params.entries;
        var matching_info = {};
        for (var i = 0; i < metric_infos.length; ++i) {
          if (metric_infos[i].tag === notebook_metric_tag) {
            matching_info = metric_infos[i];
            break;
          }
        }

        context.metric_info = matching_info;

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_fabric","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loading","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      } else {

            var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_fabric","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loading","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              loaded: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  console.log(__base__);

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: notebook_metric_fabric was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("notebook_metric_fabric_content", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: notebook_metric_fabric:loaded was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id !== undefined) {
        var notebook_metric_tag = context.notebook_metric_tag;
        //Locate the entry with the correct tag
        var metric_infos = params.entries;
        var matching_info = {};
        for (var i = 0; i < metric_infos.length; ++i) {
          if (metric_infos[i].tag === notebook_metric_tag) {
            matching_info = metric_infos[i];
            break;
          }
        }

        context.metric_info = matching_info;

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_fabric","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loaded","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      } else {

            var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_fabric","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loaded","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
        },
      },
  
      notebook_metric_fabric_content: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'notebook_metric_fabric_content',
        root_view: 'notebook_metric_fabric_content',
        spots: ["main","add","table","graph"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  ctx0 = {metric_info: context.metric_info};
      ctx1 = {metric_info: context.metric_info};
      ctx2 = {metric_info: context.metric_info};

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: notebook_metric_fabric_content was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("notebook_metric_graph", __base__+3+1, ctx0, __base__);
            __info__.embeds[2].push(ptr);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: notebook_metric_fabric_content was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("notebook_metric_table", __base__+2+1, ctx1, __base__);
            __info__.embeds[1].push(ptr);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: notebook_metric_fabric_content was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("notebook_metric_add", __base__+1+1, ctx2, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_fabric_content","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 4; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      notebook_metric_graph: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'notebook_metric_graph',
        root_view: 'notebook_metric_graph',
        spots: ["main","content"],
        actions: {
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var _info = { ns: "auth", id: "session" }

            vm_on_read_sync(__base__, _info);
          
      var info = {ns: "sockio", id: "/user/" + context.uid + "/notebook/"+context.metric_info.tag};

            vm_on_watch(__base__, info);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: notebook_metric_graph was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: notebook_metric_graph:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else {
        context.notebook_metric_entries = params.entries;

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_graph","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loading","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              loaded: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: notebook_metric_graph was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("notebook_metric_graph_content", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: notebook_metric_graph:loaded was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else {
        context.notebook_metric_entries = params.entries;

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_graph","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loaded","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_graph","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      notebook_metric_graph_content: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'notebook_metric_graph_content',
        root_view: 'notebook_metric_graph_content',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  context.xEntries = [];
      context.yEntries = [];
      for (var i = 0; i < context.notebook_metric_entries.length; ++i) {
        var entry = context.notebook_metric_entries[i];
        context.yEntries.unshift(entry.value);
        context.xEntries.unshift("");
      }
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_graph_content","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  context.xEntries = [];
      context.yEntries = [];
      for (var i = 0; i < context.notebook_metric_entries.length; ++i) {
        var entry = context.notebook_metric_entries[i];
        context.yEntries.unshift(entry.value);
        context.xEntries.unshift("");
      }
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      notebook_metric_table: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'notebook_metric_table',
        root_view: 'notebook_metric_table',
        spots: ["main","content"],
        actions: {
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var _info = { ns: "auth", id: "session" }

            vm_on_read_sync(__base__, _info);
          
      var info = {ns: "sockio", id: "/user/" + context.uid + "/notebook/"+context.metric_info.tag};

            vm_on_watch(__base__, info);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: notebook_metric_table was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: notebook_metric_table:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else {
        context.notebook_metric_page = params;

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_table","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loading","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              loaded: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: notebook_metric_table was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("notebook_metric_table_content", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: notebook_metric_table:loaded was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else {
        context.notebook_metric_page = params;

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_table","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loaded","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_table","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      notebook_metric_table_content: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'notebook_metric_table_content',
        root_view: 'notebook_metric_table_content',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  context.notebook_metric_entries = context.notebook_metric_page.entries;
                },
                handlers: {
                  
                    delete_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('delete_clicked') for the controller: notebook_metric_table_content:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      var copy = vm_copy_page(context.notebook_metric_page);
      var entry_id = params.entry_id;
      var copy_entries = copy.entries;
      for (var i = 0; i < copy_entries.length; ++i) {
        var copy_entry = copy_entries[i];
        if (copy_entry._id === entry_id) {
          copy.entries.splice(i, 1);
          break;
        }
      }

      var info = {ns: "sockio", page: copy};

            vm_on_write(__base__, info);
              

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_metric_table_content","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["delete_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      notebook_choose_metric: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'notebook_choose_metric',
        root_view: 'notebook_choose_metric',
        spots: ["main","content"],
        actions: {
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var _info = { ns: "auth", id: "session" }

            vm_on_read_sync(__base__, _info);
          
      var info = { ns: "sockio", id: "/user/"+context.uid+"/notebook/choices" }

            vm_on_read_sync(__base__, info);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: notebook_choose_metric:choose_action was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

      //Exists
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id !== undefined) {
        context.notebook_page = params;

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_choose_metric","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      } else {

            var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_choose_metric","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
          
      }

      if (current_action === "choose_action") {
        var info = { ns: "sockio", id: "/user/"+context.uid+"/notebook/choices" }

            vm_on_watch(__base__, info);
                }
    

                    },
                  
                  
                },
              },
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: notebook_choose_metric was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: notebook_choose_metric:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

      //Exists
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id !== undefined) {
        context.notebook_page = params;

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_choose_metric","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loading","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      } else {

            var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_choose_metric","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loading","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
          
      }

      if (current_action === "choose_action") {
        var info = { ns: "sockio", id: "/user/"+context.uid+"/notebook/choices" }

            vm_on_watch(__base__, info);
                }
    

                    },
                  
                  
                },
              },
          
              loaded: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: notebook_choose_metric was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("notebook_choose_metric_content", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: notebook_choose_metric:loaded was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

      //Exists
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id !== undefined) {
        context.notebook_page = params;

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_choose_metric","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loaded","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      } else {

            var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_choose_metric","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"loaded","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
          
      }

      if (current_action === "choose_action") {
        var info = { ns: "sockio", id: "/user/"+context.uid+"/notebook/choices" }

            vm_on_watch(__base__, info);
                }
    

                    },
                  
                  
                },
              },
          
        },
      },
  
      notebook_choose_metric_content: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'notebook_choose_metric_content',
        root_view: 'notebook_choose_metric_content',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  context.metric_options = context.notebook_page.entries;
      delete context.notebook_page;
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_choose_metric_content","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      notebook_root: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'notebook_root',
        root_view: 'notebook_root',
        spots: ["main","content"],
        actions: {
          
              choose: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: notebook_root was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("notebook_choose_metric", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    notebook_choose_metric_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('notebook_choose_metric_clicked') for the controller: notebook_root:choose was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("notebook_metric_selected", params);
      context.notebook_metric_tag = params.tag;

            var old_action = __info__.action;
            __info__.action = "notebook_metric_fabric";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"]},"from_action":"choose","to_action":"notebook_metric_fabric"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "notebook_metric_fabric"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              notebook_metric_fabric: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: notebook_root was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("notebook_metric_fabric", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: notebook_root:notebook_metric_fabric was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "choose";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"]},"from_action":"notebook_metric_fabric","to_action":"choose"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "choose"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "choose";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"notebook_root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"]},"from_action":"choose_action","to_action":"choose"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "choose"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      password_reset: {
        __init__: function(__base__) {
          //Call service on_connect
          
              rest_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              rest_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'password_reset',
        root_view: 'password_reset',
        spots: ["main","content"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: password_reset was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("password_reset_form", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    save_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('save_clicked') for the controller: password_reset:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      var pass         = params.pass;
      var pass_confirm = params.pass_confirm;

      //Validate & Sanitize (Strip whitespace & downcase)
      if (pass === undefined || pass_confirm === undefined) { throw "pass or pass_confirm was not given"};
      pass = pass.trim();
      pass_confirm = pass_confirm.trim();

      //Password is too short
      if (pass.length <= 4) {
        var err_info = {
          message: "That's a pretty short password."
        };


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "error", err_info);
            }
                  return;
      }

      //Passwords did not match
      if (pass !== pass_confirm) {
        var info = {message: "Passwords didn't match."}


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "error", info);
            }
                  return;
      }

      //request update of password
      var info = {
        path: "profile/update",
        params: {
          password: CryptoJS.SHA512(pass+"__ive_got_a_lovely_bunch_of_coconuts").toString(),
          session_key: context.session_key,
          fittr: true
        }
      }

            rest_on_get(__base__, info);
          
      //goto the loading screen

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "loading";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: password_reset was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    rest_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('rest_res') for the controller: password_reset:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      //did the password change successfully?
      var success = params.res.valid;
      if (success === true) {
        //signal that we are done

            int_event(__info__.event_gw, "password_changed", {});
                } else {
        //uh oh

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
        var info = { message: "An error occurred, please try again." }


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "error", info);
            }
                }
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"password_reset","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["save_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      password_reset_form: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'password_reset_form',
        root_view: 'password_reset_form',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                    error: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('error') for the controller: password_reset_form:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

           main_q.push([3, "if_event", __base__, "error", params])
              

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"password_reset_form","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["error"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      root: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          
              dlink_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
      var info = {
        ns: "auth",
        id: "session"
      }

            vm_on_watch(__base__, info);
          
  

        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          
              dlink_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'root',
        root_view: 'root',
        spots: ["main","content"],
        actions: {
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var info = {
        ns: "auth",
        id: "session"
      }

            vm_on_read_sync(__base__, info);
          
      var info = {
        ns: "auth",
        id: "session"
      }

            vm_on_watch(__base__, info);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: root:choose_action was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id !== undefined) {
        if (params.entries[0] !== undefined) {
          window.session_key = params.entries[0].value;

            var old_action = __info__.action;
            __info__.action = "user";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"choose_action","to_action":"user"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "user"
            }]);
          
        } else {

            var old_action = __info__.action;
            __info__.action = "splash";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"choose_action","to_action":"splash"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "splash"
            }]);
          
        }
      } else {

            var old_action = __info__.action;
            __info__.action = "splash";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"choose_action","to_action":"splash"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "splash"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              splash: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: root was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("splash", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    dlink_req: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('dlink_req') for the controller: root:splash was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      var url_params = params.params;
      var url = params.url;
      var reason = url_params.reason;

      //Rays website or password reset
      if (reason === "rays") {
        context.company = "rays";
        context.iframe_url = "http://test.fittr.com/enterprise-landing";

            var old_action = __info__.action;
            __info__.action = "corperate_setup";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"splash","to_action":"corperate_setup"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "corperate_setup"
            }]);
          
        analytics.identify(url_params.tid);
        analytics.group("rays");
      } else if (reason === "password_reset") {
        context.session_key = url_params.session_key;
        context.uid = url_params.uid;

            var old_action = __info__.action;
            __info__.action = "password_reset";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"splash","to_action":"password_reset"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "password_reset"
            }]);
          
      }
    

                    },
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: root:splash was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.entries[0] !== undefined) {
        window.session_key = params.entries[0].value;

            var old_action = __info__.action;
            __info__.action = "user";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"splash","to_action":"user"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "user"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              user: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: root was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("user_root", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    dlink_req: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('dlink_req') for the controller: root:user was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      var url_params = params.params;
      var url = params.url;
      var reason = url_params.reason;

      //Rays website or password reset
      if (reason === "rays") {
        context.company = "rays";
        context.iframe_url = "http://test.fittr.com/enterprise-landing";

            var old_action = __info__.action;
            __info__.action = "corperate_setup";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"user","to_action":"corperate_setup"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "corperate_setup"
            }]);
          
        analytics.identify(url_params.tid);
        analytics.group("rays");
      } else if (reason === "password_reset") {
        context.session_key = url_params.session_key;
        context.uid = url_params.uid;

            var old_action = __info__.action;
            __info__.action = "password_reset";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"user","to_action":"password_reset"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "password_reset"
            }]);
          
      }
    

                    },
                  
                    logout_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('logout_clicked') for the controller: root:user was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
        var page = vm_create_page("session");
        page.entries = [
        ]
        vm_rehash_page(page);
        vm_reindex_page(page);

        var info = {
          ns: "auth",
          page: page,
        }

            vm_on_write(__base__, info);
              

                    },
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: root:user was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.entries[0] === undefined) {

            var old_action = __info__.action;
            __info__.action = "splash";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"user","to_action":"splash"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "splash"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              password_reset: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: root was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("password_reset", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    close_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('close_clicked') for the controller: root:password_reset was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "splash";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"password_reset","to_action":"splash"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "splash"
            }]);
          
    

                    },
                  
                    password_changed: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('password_changed') for the controller: root:password_reset was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      var page = vm_create_page("session");
      page.entries = [
        {"_id": "session_key", "value": context.session_key, "_sig": gen_id()},
        {"_id": "uid", "value": context.uid, "_sig": gen_id()}
      ]
      vm_rehash_page(page);
      vm_reindex_page(page);

      var info = {
        ns: "auth",
        page: page,
      }

            vm_on_write(__base__, info);
              

                    },
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: root:password_reset was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.entries[0] !== undefined) {
        window.session_key = params.entries[0].value;

            var old_action = __info__.action;
            __info__.action = "user";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"password_reset","to_action":"user"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "user"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              corperate_setup: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.page("Corperate Setup");

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: root was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("corperate_setup", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: root:corperate_setup was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.entries[0] !== undefined) {
        window.session_key = params.entries[0].value;

            var old_action = __info__.action;
            __info__.action = "user";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"corperate_setup","to_action":"user"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "user"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
        },
      },
  
      user_root: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'user_root',
        root_view: 'user_root',
        spots: ["main","content"],
        actions: {
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  //UI State will need to be created if it dosen't already exist
      var info = { ns: "local1", id: "/ui_state", sync: true }

            vm_on_read_sync(__base__, info);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: user_root:choose_action was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      //Make sure /ui_state exists, especially at startup.  Create it if it dosen't
      //Set the ui_state page to 'ui_state_page'
      if (current_action === "choose_action") {
        ///ui_state did not exist, make it
        if (params._id === undefined) {
          var p = vm_create_page("/ui_state");
          vm_set_entry_with_id_key_val(p, "user_root", "value", {action: "dashboard"});
          var info = {ns: "local1", page: p};

            vm_on_write(__base__, info);
                    context.ui_state_page = p; //not the best, as we are not using the vm_cache copy 
        } else {
          context.ui_state_page = params;  
        }

        //Watch the page so we switch between dashboard & workout
        var _info = {ns: "local1", id: "/ui_state"};

            vm_on_watch(__base__, _info);
          
        //Switch to the correct view from choose_action
        var user_root_action = vm_entry_with_id(context.ui_state_page, "user_root").value.action;
        if (user_root_action === "dashboard") {

            var old_action = __info__.action;
            __info__.action = "dashboard";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"user_root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"choose_action","to_action":"dashboard"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "dashboard"
            }]);
          
        } else if (user_root_action === "workout") {

            var old_action = __info__.action;
            __info__.action = "workout";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"user_root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"choose_action","to_action":"workout"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout"
            }]);
          
        } else {
          throw "Unexpected user_root_action in /ui_state";
        }
      } else {
        context.ui_state_page = params;
      }
    

                    },
                  
                  
                },
              },
          
              dashboard: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.page("dashboard");

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: user_root was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("dash_nav", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    start_workout: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('start_workout') for the controller: user_root:dashboard was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      var wid = params.wid;

      var p = vm_copy_page(context.ui_state_page);
      vm_set_entry_with_id_key_val(p, "user_root", "value", {action: "workout", wid: wid});
      var info = {ns: "local1", page: p};

            vm_on_write(__base__, info);
              

                    },
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: user_root:dashboard was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      //Make sure /ui_state exists, especially at startup.  Create it if it dosen't
      //Set the ui_state page to 'ui_state_page'
      if (current_action === "choose_action") {
        ///ui_state did not exist, make it
        if (params._id === undefined) {
          var p = vm_create_page("/ui_state");
          vm_set_entry_with_id_key_val(p, "user_root", "value", {action: "dashboard"});
          var info = {ns: "local1", page: p};

            vm_on_write(__base__, info);
                    context.ui_state_page = p; //not the best, as we are not using the vm_cache copy 
        } else {
          context.ui_state_page = params;  
        }

        //Watch the page so we switch between dashboard & workout
        var _info = {ns: "local1", id: "/ui_state"};

            vm_on_watch(__base__, _info);
          
        //Switch to the correct view from choose_action
        var user_root_action = vm_entry_with_id(context.ui_state_page, "user_root").value.action;
        if (user_root_action === "dashboard") {

            var old_action = __info__.action;
            __info__.action = "dashboard";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"user_root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"dashboard","to_action":"dashboard"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "dashboard"
            }]);
          
        } else if (user_root_action === "workout") {

            var old_action = __info__.action;
            __info__.action = "workout";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"user_root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"dashboard","to_action":"workout"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout"
            }]);
          
        } else {
          throw "Unexpected user_root_action in /ui_state";
        }
      } else {
        context.ui_state_page = params;
      }
    

                    },
                  
                    entry_modify: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('entry_modify') for the controller: user_root:dashboard was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.page_id === "/ui_state" && params.entry._id === "user_root") {
        if (params.entry.value.action === "dashboard") {

            var old_action = __info__.action;
            __info__.action = "dashboard";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"user_root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"dashboard","to_action":"dashboard"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "dashboard"
            }]);
          
        } else if (params.entry.value.action === "workout") {

            var old_action = __info__.action;
            __info__.action = "workout";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"user_root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"dashboard","to_action":"workout"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout"
            }]);
          
        }
      }
    

                    },
                  
                  
                },
              },
          
              workout: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: user_root was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_root", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_started");
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: user_root:workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      //Make sure /ui_state exists, especially at startup.  Create it if it dosen't
      //Set the ui_state page to 'ui_state_page'
      if (current_action === "choose_action") {
        ///ui_state did not exist, make it
        if (params._id === undefined) {
          var p = vm_create_page("/ui_state");
          vm_set_entry_with_id_key_val(p, "user_root", "value", {action: "dashboard"});
          var info = {ns: "local1", page: p};

            vm_on_write(__base__, info);
                    context.ui_state_page = p; //not the best, as we are not using the vm_cache copy 
        } else {
          context.ui_state_page = params;  
        }

        //Watch the page so we switch between dashboard & workout
        var _info = {ns: "local1", id: "/ui_state"};

            vm_on_watch(__base__, _info);
          
        //Switch to the correct view from choose_action
        var user_root_action = vm_entry_with_id(context.ui_state_page, "user_root").value.action;
        if (user_root_action === "dashboard") {

            var old_action = __info__.action;
            __info__.action = "dashboard";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"user_root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"workout","to_action":"dashboard"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "dashboard"
            }]);
          
        } else if (user_root_action === "workout") {

            var old_action = __info__.action;
            __info__.action = "workout";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"user_root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"workout","to_action":"workout"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout"
            }]);
          
        } else {
          throw "Unexpected user_root_action in /ui_state";
        }
      } else {
        context.ui_state_page = params;
      }
    

                    },
                  
                    entry_modify: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('entry_modify') for the controller: user_root:workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.page_id === "/ui_state" && params.entry._id === "user_root") {
        if (params.entry.value.action === "dashboard") {

            var old_action = __info__.action;
            __info__.action = "dashboard";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"user_root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"workout","to_action":"dashboard"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "dashboard"
            }]);
          
        } else if (params.entry.value.action === "workout") {

            var old_action = __info__.action;
            __info__.action = "workout";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"user_root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"workout","to_action":"workout"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "workout"
            }]);
          
        }
      }
    

                    },
                  
                  
                },
              },
          
        },
      },
  
      settings: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'settings',
        root_view: 'settings',
        spots: ["main","content"],
        actions: {
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var _info = { ns: "auth", id: "session" }

            vm_on_read_sync(__base__, _info);
          
      //Should have been loaded at login
      var info = {ns: "sockio", id: "/user/" + context.uid + "/profile", sync: true};

            vm_on_watch(__base__, info);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: settings:choose_action was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id !== undefined) {
        context.email = ((vm_entry_with_id(params, "email") || {}).value);
        context.name = ((vm_entry_with_id(params, "name") || {}).value);
        context.age = ((vm_entry_with_id(params, "age") || {}).value);
        context.page = params;

        if (current_action === "choose_action") {

            var old_action = __info__.action;
            __info__.action = "view";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"settings","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"choose_action","to_action":"view"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "view"
            }]);
          
        } else if (current_action === "view") {

            var old_action = __info__.action;
            __info__.action = "view";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"settings","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"choose_action","to_action":"view"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "view"
            }]);
          
        }
      }
    

                    },
                  
                  
                },
              },
          
              view: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: settings was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("settings_view", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    edit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('edit_clicked') for the controller: settings:view was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "edit";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"settings","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"view","to_action":"edit"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "edit"
            }]);
          
    

                    },
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: settings:view was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id !== undefined) {
        context.email = ((vm_entry_with_id(params, "email") || {}).value);
        context.name = ((vm_entry_with_id(params, "name") || {}).value);
        context.age = ((vm_entry_with_id(params, "age") || {}).value);
        context.page = params;

        if (current_action === "choose_action") {

            var old_action = __info__.action;
            __info__.action = "view";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"settings","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"view","to_action":"view"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "view"
            }]);
          
        } else if (current_action === "view") {

            var old_action = __info__.action;
            __info__.action = "view";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"settings","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"view","to_action":"view"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "view"
            }]);
          
        }
      }
    

                    },
                  
                  
                },
              },
          
              edit: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: settings was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("settings_edit", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: settings:edit was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      context.page = params;
      if (params._id !== undefined) {
        context.email = vm_entry_with_id(params, "email").value;
        context.name = vm_entry_with_id(params, "name").value;
        context.age = vm_entry_with_id(params, "age").value;
      }
    

                    },
                  
                    cancel_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('cancel_clicked') for the controller: settings:edit was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "view";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"settings","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"edit","to_action":"view"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "view"
            }]);
          
    

                    },
                  
                    save_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('save_clicked') for the controller: settings:edit was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      var name = params.name;
      var email = params.email;
      var age = params.age;

      //Should have been loaded at login
      var page = vm_copy_page(context.page);
      vm_set_entry_with_id_key_val(page, "email", "value", email);
      vm_set_entry_with_id_key_val(page, "name", "value", name);
      vm_set_entry_with_id_key_val(page, "age", "value", age);

      var info = {ns: "sockio", page: page};

            vm_on_write(__base__, info);
          
            var old_action = __info__.action;
            __info__.action = "view";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"settings","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"edit","to_action":"view"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "view"
            }]);
          
    

                    },
                  
                  
                },
              },
          
        },
      },
  
      settings_edit: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'settings_edit',
        root_view: 'settings_edit',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"settings_edit","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      settings_view: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'settings_view',
        root_view: 'settings_view',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"settings_view","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      get_started: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
  

        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'get_started',
        root_view: 'get_started',
        spots: ["main","content"],
        actions: {
          
              get_started_legal: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: get_started was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("get_started_legal", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("Get started Legal");
                },
                handlers: {
                  
                    agree_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('agree_clicked') for the controller: get_started:get_started_legal was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      analytics.track("agree_clicked");

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "get_started_age";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "get_started_age"
            }]);
          
    

                    },
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: get_started:get_started_legal was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("disagree_clicked");

            int_event(__info__.event_gw, "back_clicked", {});
              

                    },
                  
                  
                },
              },
          
              get_started_age: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: get_started was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("get_started_age", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("Get started Age");
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: get_started:get_started_age was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      analytics.page("Get started legal, (via back)");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                    submit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('submit_clicked') for the controller: get_started:get_started_age was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      analytics.track("submit_age_clicked", params);

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "get_started_goal";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "get_started_goal"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              get_started_goal: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: get_started was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("get_started_goal", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("Get started Goal");
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: get_started:get_started_goal was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      analytics.page("Get started Age (via back)");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                    submit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('submit_clicked') for the controller: get_started:get_started_goal was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      analytics.track("submit_goal_clicked", params);

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "get_started_height_gender";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "get_started_height_gender"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              get_started_height_gender: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: get_started was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("get_started_height_gender", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("Get started Gender");
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: get_started:get_started_height_gender was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      analytics.page("Get started Goal (via back)");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                    submit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('submit_clicked') for the controller: get_started:get_started_height_gender was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      analytics.track("get_started_height_gender_submit_clicked", params);

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "get_started_fitness";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "get_started_fitness"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              get_started_fitness: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: get_started was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("get_started_fitness", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("Get started Fitness");
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: get_started:get_started_fitness was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      analytics.page("Get started Fitness (Via back)");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                    submit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('submit_clicked') for the controller: get_started:get_started_fitness was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      analytics.track("get_started_fitness_submit_clicked", params);

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "get_started_fitness_pref";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "get_started_fitness_pref"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              get_started_fitness_pref: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: get_started was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("get_started_fitness_pref", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("Get started Fitness Preferences");
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: get_started:get_started_fitness_pref was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
      analytics.page("Get started fitness (Via back)");
    

                    },
                  
                    submit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('submit_clicked') for the controller: get_started:get_started_fitness_pref was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      analytics.track("get_started_fitness_pref_submit_clicked", params);

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "get_started_prog";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "get_started_prog"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              get_started_prog: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  //Share a page_id for a page that contains the results of the plan selection
      //when the user selects a different plan, we just alter this page
      context.suggested_plan_page_id = gen_id();

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: get_started was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("get_started_prog", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("We recommend");
                },
                handlers: {
                  
                    submit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('submit_clicked') for the controller: get_started:get_started_prog was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      analytics.track("get_started_prog_submit_clicked", params);

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "signup_form";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "signup_form"
            }]);
          
    

                    },
                  
                    options_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('options_clicked') for the controller: get_started:get_started_prog was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       
      analytics.track("User selected more options on plans");

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "gs_prog_info";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gs_prog_info"
            }]);
          
    

                    },
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: get_started:get_started_prog was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
      analytics.page("get started fitness (via back)");
    

                    },
                  
                  
                },
              },
          
              gs_prog_info: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: get_started was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("gs_prog_info", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: get_started:gs_prog_info was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                  
                },
              },
          
              signup_form: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: get_started was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("signup_form", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: get_started:signup_form was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                       

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "get_started_legal";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"get_started","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"]},"from_action":"choose_action","to_action":"get_started_legal"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "get_started_legal"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      get_started_legal: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'get_started_legal',
        root_view: 'get_started_legal',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"get_started_legal","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      get_started_age: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'get_started_age',
        root_view: 'get_started_age',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"get_started_age","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      get_started_goal: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'get_started_goal',
        root_view: 'get_started_goal',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"get_started_goal","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      get_started_height_gender: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'get_started_height_gender',
        root_view: 'get_started_height_gender',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"get_started_height_gender","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      get_started_fitness: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'get_started_fitness',
        root_view: 'get_started_fitness',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"get_started_fitness","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      get_started_fitness_pref: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'get_started_fitness_pref',
        root_view: 'get_started_fitness_pref',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"get_started_fitness_pref","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      get_started_prog: {
        __init__: function(__base__) {
          //Call service on_connect
          
              rest_on_connect(__base__);
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
  

        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              rest_on_disconnect(__base__);
          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'get_started_prog',
        root_view: 'get_started_prog',
        spots: ["main","content"],
        actions: {
          
              load_listing: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: get_started_prog was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          

      //request the plans listing
      var info = {ns: "sockio", id: "/plans/listing"}

            vm_on_watch(__base__, info);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: get_started_prog:load_listing was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      context.listing_page = params;

            var old_action = __info__.action;
            __info__.action = "load_suggested_plan";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"get_started_prog","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"]},"from_action":"load_listing","to_action":"load_suggested_plan"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "load_suggested_plan"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              load_suggested_plan: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.page("loading suggested plan");

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: get_started_prog was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          

      //make a get request to the server
      var info = {path: "plan_suggestor/get_suggestion", params: {}};

            rest_on_get(__base__, info);
                },
                handlers: {
                  
                    rest_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('rest_res') for the controller: get_started_prog:load_suggested_plan was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      //Get the suggested plan tag
      var suggested_plan_tag = params.res.suggested_plan_tag;
      analytics.track("suggested plan for user", params);

      //Store the suggested tag into a page
      var page = vm_create_page(context.suggested_plan_page_id);
      vm_set_entry_with_id_key_val(page, "plan_tag", "value", suggested_plan_tag);

      //Watch the page for updates & then write it
      var info = {ns: "local1", id: context.suggested_plan_page_id};

            vm_on_watch(__base__, info);
                var info2 = {ns: "local1", page: page};

            vm_on_write(__base__, info2);
              

                    },
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: get_started_prog:load_suggested_plan was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === context.suggested_plan_page_id) {
        context.suggested_plan_page = params;
      } else if (params._id === context.listing_page._id) {
        context.listing_page = params;
      }

      if (context.suggested_plan_page !== undefined) {

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"get_started_prog","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"]},"from_action":"load_suggested_plan","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              loaded: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.page("loaded suggested plan", context);

      var selected_plan_tag = vm_entry_with_id(context.suggested_plan_page, "plan_tag").value;
      var selected_plan = vm_entry_with_id(context.listing_page, selected_plan_tag).value;
      var _context = {plan: selected_plan};

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: get_started_prog was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("get_started_prog_content", __base__+1+1, _context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: get_started_prog:loaded was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === context.suggested_plan_page_id) {
        context.suggested_plan_page = params;
      } else if (params._id === context.listing_page._id) {
        context.listing_page = params;
      }

      if (context.suggested_plan_page !== undefined) {

            var old_action = __info__.action;
            __info__.action = "loaded";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"get_started_prog","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"]},"from_action":"loaded","to_action":"loaded"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loaded"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "load_listing";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"get_started_prog","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"]},"from_action":"choose_action","to_action":"load_listing"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "load_listing"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      get_started_prog_content: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'get_started_prog_content',
        root_view: 'get_started_prog_content',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  //get the entry
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"get_started_prog_content","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      gs_prog_info: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'gs_prog_info',
        root_view: 'gs_prog_info',
        spots: ["main","content"],
        actions: {
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.page("selecting alternative program");

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: gs_prog_info was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          

      //request the plans listing
      var info = {ns: "sockio", id: "/plans/listing"}

            vm_on_watch(__base__, info);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: gs_prog_info:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      context.plans = params.entries;

            var old_action = __info__.action;
            __info__.action = "picker";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"gs_prog_info","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"]},"from_action":"loading","to_action":"picker"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "picker"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              picker: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: gs_prog_info was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("gs_prog_info_picker", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: gs_prog_info:picker was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      context.plans = params.entries;

            var old_action = __info__.action;
            __info__.action = "picker";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"gs_prog_info","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"]},"from_action":"picker","to_action":"picker"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "picker"
            }]);
          
    

                    },
                  
                    plan_selected: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('plan_selected') for the controller: gs_prog_info:picker was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("selected alternative plan", params);
      //Create a new suggested_plan_page as we don't have a copy
      //of the original and we don't care to override it.
      var suggested_plan_page = vm_create_page(context.suggested_plan_page_id);

      //Write the selected plan tag in the plan_tag entry
      var selected_plan_tag = params.planTag;
      vm_set_entry_with_id_key_val(suggested_plan_page, "plan_tag", "value", selected_plan_tag);

      //request write
      var info = {ns: "local1", page: suggested_plan_page};

            vm_on_write(__base__, info);
          

            int_event(__info__.event_gw, "back_clicked", {});
              

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"gs_prog_info","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"]},"from_action":"choose_action","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      gs_prog_info_picker: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'gs_prog_info_picker',
        root_view: 'gs_prog_info_picker',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"gs_prog_info_picker","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      signup_form: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          
              rest_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          
              rest_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'signup_form',
        root_view: 'signup_form',
        spots: ["main","content"],
        actions: {
          
              fields: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: signup_form was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("signup_form_fields", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    signup_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('signup_clicked') for the controller: signup_form:fields was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("signup clicked", params);
      if (params.password !== undefined && params.password.length <= 4) {
        analytics.track("password too short");
        var err_info = {
          valid: false,
          field: "password",
          message: "That's a pretty short password."
        };


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "register_failed", err_info);
            }
                  return;
      }

      var info = {
        path: "register/email",
        params: {
          email: params.email,
          name: params.name,
          password: CryptoJS.SHA512(params.password+"__ive_got_a_lovely_bunch_of_coconuts").toString(),
          age: "21",
          gender: "male",
          subscription_type: "inactive_trial",
          plan_tag: vm_entry_with_id(context.suggested_plan_page, "plan_tag").value, 
          company: context.company
        }
      }
      analytics.track("register request", info);
      analytics.identify({"email": params.email, "name": params.name, "age": params.age, "gender": params.gender});


            rest_on_get(__base__, info);
          

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "loading";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.track("waiting for server to respond to register");

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: signup_form was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    rest_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('rest_res') for the controller: signup_form:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.res.valid === false) {

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "register_failed", params.res);
            }
                  analytics.track("register failed", params.res);
      } else {
        analytics.track("register good");
        var session_key = params.res.session_key;
        var uid = params.res.uid;

        var page = vm_create_page("session");
        page.entries = [
          {"_id": "session_key", "value": session_key, "_sig": gen_id()},
          {"_id": "uid", "value": uid, "_sig": gen_id()}
        ]
        analytics.alias(uid);
        vm_rehash_page(page);
        vm_reindex_page(page);

        var info = {
          ns: "auth",
          page: page,
        }

            vm_on_write(__base__, info);
                }
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "fields";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"signup_form","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"]},"from_action":"choose_action","to_action":"fields"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "fields"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      signup_form_fields: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'signup_form_fields',
        root_view: 'signup_form_fields',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                    register_failed: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('register_failed') for the controller: signup_form_fields:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

           main_q.push([3, "if_event", __base__, "register_failed", params])
              

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"signup_form_fields","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["register_failed"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      forgot_password: {
        __init__: function(__base__) {
          //Call service on_connect
          
              rest_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              rest_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'forgot_password',
        root_view: 'forgot_password',
        spots: ["main","content"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: forgot_password was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("forgot_password_form", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    submit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('submit_clicked') for the controller: forgot_password:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      var info = {
        path: "register/password_reset",
        params: {
          email: params.email
        }
      }

            rest_on_get(__base__, info);
          

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "loading";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: forgot_password was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    rest_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('rest_res') for the controller: forgot_password:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      var res = params.res;
      //There was an error in requesting password reset
      if (res.valid === false) {

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
        var info = {message: res.message};


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "error", info);
            }
                } else if (res.valid === true) {
        //Successful

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          

            var old_action = __info__.action;
            __info__.action = "submitted";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"forgot_password","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["submit_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[]},"from_action":"loading","to_action":"submitted"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "submitted"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              submitted: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"forgot_password","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["submit_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      forgot_password_form: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'forgot_password_form',
        root_view: 'forgot_password_form',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                    error: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('error') for the controller: forgot_password_form:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

           main_q.push([3, "if_event", __base__, "error", params])
              

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"forgot_password_form","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["error"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      login: {
        __init__: function(__base__) {
          //Call service on_connect
          
              rest_on_connect(__base__);
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              rest_on_disconnect(__base__);
          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'login',
        root_view: 'login',
        spots: ["main","content"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.page("Login form");

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: login was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("login_form", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    login_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('login_clicked') for the controller: login:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("Login clicked", params);
      var info = {
        path: "register/login",
        params: {
          email: params.email,
          password: CryptoJS.SHA512(params.password+"__ive_got_a_lovely_bunch_of_coconuts").toString(),
        }
      }

            rest_on_get(__base__, info);
          

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "loading";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
          
    

                    },
                  
                    forgot_password_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('forgot_password_clicked') for the controller: login:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("Forgot password clicked");

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "forgot_password";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "forgot_password"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.page("login loading");

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: login was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    rest_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('rest_res') for the controller: login:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.res.valid === false) {
        analytics.track("login failed", params);
        analytics.page("Login form");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "login_failed", params.res);
            }
                } else {
        analytics.track("login success", params);
        var session_key = params.res.session_key;
        var uid = params.res.uid;

        console.log("params =", params);
        var page = vm_create_page("session");
        page.entries = [
          {"_id": "session_key", "value": session_key, "_sig": gen_id()},
          {"_id": "uid", "value": uid, "_sig": gen_id()}
        ]
        analytics.identify(uid);
        vm_rehash_page(page);
        vm_reindex_page(page);

        var info = {
          ns: "auth",
          page: page,
        }

            vm_on_write(__base__, info);
                }
    

                    },
                  
                  
                },
              },
          
              forgot_password: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: login was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("forgot_password", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    close_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('close_clicked') for the controller: login:forgot_password was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"login","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["login_clicked","forgot_password_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      splash: {
        __init__: function(__base__) {
          //Call service on_connect
          
              rest_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              rest_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'splash',
        root_view: 'splash',
        spots: ["main","content"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.page("Splash");

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: splash was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("splash_select", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    login_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('login_clicked') for the controller: splash:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "login";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"splash","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["login_clicked","get_started_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"]},"from_action":"index","to_action":"login"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "login"
            }]);
          
    

                    },
                  
                    get_started_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('get_started_clicked') for the controller: splash:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "get_started";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"splash","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["login_clicked","get_started_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"]},"from_action":"index","to_action":"get_started"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "get_started"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              login: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.page("Login");

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: splash was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("login", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: splash:login was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"splash","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["login_clicked","get_started_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"]},"from_action":"login","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              get_started: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.page("Get Started");

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: splash was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("get_started", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: splash:get_started was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"splash","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["login_clicked","get_started_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"]},"from_action":"get_started","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"splash","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["login_clicked","get_started_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      splash_select: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'splash_select',
        root_view: 'splash_select',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"splash_select","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      login_form: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'login_form',
        root_view: 'login_form',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                    login_failed: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('login_failed') for the controller: login_form:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      var info = {msg: params.message, field: params.field}

           main_q.push([3, "if_event", __base__, "login_failed", info])
              

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"login_form","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["login_failed"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_program_content_daemon: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_content_daemon',
        root_view: 'workout_program_content_daemon',
        spots: ["main"],
        actions: {
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  //uid & wid
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      var info1 = {ns: "auth", id: "session"};
      var info2 = {ns: "local1", id: "/ui_state"};

            vm_on_read_sync(__base__, info1);
          
            vm_on_read_sync(__base__, info2);
                ////////////////////////////////////////////////////////////////////////////////////////////////////

      var _info = {id: ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content"), ns: "sockio"};

            vm_on_watch(__base__, _info);
          
      var _info2 = {id: ("/user/" + context.uid + "/workouts/" + context.wid), ns: "sockio"};

            vm_on_watch(__base__, _info2);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_content_daemon:choose_action was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/ui_state") {
        context.wid = vm_entry_with_id(params, "user_root").value.wid; 
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        context.content_page = params;
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid)) {
        context.root_page = params;
      }

      if (current_action === "choose_action" && context.root_page !== undefined && context.content_page !== undefined) {
        //Move around based on action
        var action = vm_entry_with_id(context.content_page, "action").value;
        if (action === "wintro") {

            var old_action = __info__.action;
            __info__.action = "wintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"choose_action","to_action":"wintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "wintro"
            }]);
          
        } else if (action === "gintro") {

            var old_action = __info__.action;
            __info__.action = "gintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"choose_action","to_action":"gintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gintro"
            }]);
          
        } else if (action === "exercise") {

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"choose_action","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
        }
      }
    

                    },
                  
                  
                },
              },
          
              wintro: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_content_daemon:wintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/ui_state") {
        context.wid = vm_entry_with_id(params, "user_root").value.wid; 
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        context.content_page = params;
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid)) {
        context.root_page = params;
      }

      if (current_action === "choose_action" && context.root_page !== undefined && context.content_page !== undefined) {
        //Move around based on action
        var action = vm_entry_with_id(context.content_page, "action").value;
        if (action === "wintro") {

            var old_action = __info__.action;
            __info__.action = "wintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"wintro","to_action":"wintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "wintro"
            }]);
          
        } else if (action === "gintro") {

            var old_action = __info__.action;
            __info__.action = "gintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"wintro","to_action":"gintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gintro"
            }]);
          
        } else if (action === "exercise") {

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"wintro","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
        }
      }
    

                    },
                  
                    entry_modify: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('entry_modify') for the controller: workout_program_content_daemon:wintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.page_id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        if (params.entry._id === "action") {
          var action = params.entry.value;

          if (action === "wintro") {

            var old_action = __info__.action;
            __info__.action = "wintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"wintro","to_action":"wintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "wintro"
            }]);
          
          } else if (action === "gintro") {

            var old_action = __info__.action;
            __info__.action = "gintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"wintro","to_action":"gintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gintro"
            }]);
          
          } else if (action === "exercise") {

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"wintro","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
          }
        }
      }
    

                    },
                  
                    next_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('next_clicked') for the controller: workout_program_content_daemon:wintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      //Write content page (includes center console 'action' information)
      var page = vm_copy_page(context.content_page);
      vm_set_entry_with_id_key_val(page, "group_level_index", "value", 0);
      vm_set_entry_with_id_key_val(page, "action", "value", "gintro");
      var info = {ns: "sockio", page: page};

            vm_on_write(__base__, info);
              

                    },
                  
                  
                },
              },
          
              gintro: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_content_daemon:gintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/ui_state") {
        context.wid = vm_entry_with_id(params, "user_root").value.wid; 
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        context.content_page = params;
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid)) {
        context.root_page = params;
      }

      if (current_action === "choose_action" && context.root_page !== undefined && context.content_page !== undefined) {
        //Move around based on action
        var action = vm_entry_with_id(context.content_page, "action").value;
        if (action === "wintro") {

            var old_action = __info__.action;
            __info__.action = "wintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"gintro","to_action":"wintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "wintro"
            }]);
          
        } else if (action === "gintro") {

            var old_action = __info__.action;
            __info__.action = "gintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"gintro","to_action":"gintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gintro"
            }]);
          
        } else if (action === "exercise") {

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"gintro","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
        }
      }
    

                    },
                  
                    entry_modify: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('entry_modify') for the controller: workout_program_content_daemon:gintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.page_id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        if (params.entry._id === "action") {
          var action = params.entry.value;

          if (action === "wintro") {

            var old_action = __info__.action;
            __info__.action = "wintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"gintro","to_action":"wintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "wintro"
            }]);
          
          } else if (action === "gintro") {

            var old_action = __info__.action;
            __info__.action = "gintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"gintro","to_action":"gintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gintro"
            }]);
          
          } else if (action === "exercise") {

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"gintro","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
          }
        }
      }
    

                    },
                  
                    next_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('next_clicked') for the controller: workout_program_content_daemon:gintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      //Write content page (includes center console 'action' information)
      var page = vm_copy_page(context.content_page);

      //Update the action to exercise
      vm_set_entry_with_id_key_val(page, "action", "value", "exercise");

      //Update the position if it dosen't exist right now
      var exercise_level_index = vm_entry_with_id(page, "exercise_level_index").value;
      var group_level_index = vm_entry_with_id(page, "group_level_index").value;

      vm_set_entry_with_id_key_val(page, "exercise_level_index", "value", 0);

      var info = {ns: "sockio", page: page};

            vm_on_write(__base__, info);
          
      //Grab the exercise page
    

                    },
                  
                  
                },
              },
          
              exercise: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_content_daemon:exercise was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/ui_state") {
        context.wid = vm_entry_with_id(params, "user_root").value.wid; 
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        context.content_page = params;
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid)) {
        context.root_page = params;
      }

      if (current_action === "choose_action" && context.root_page !== undefined && context.content_page !== undefined) {
        //Move around based on action
        var action = vm_entry_with_id(context.content_page, "action").value;
        if (action === "wintro") {

            var old_action = __info__.action;
            __info__.action = "wintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"exercise","to_action":"wintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "wintro"
            }]);
          
        } else if (action === "gintro") {

            var old_action = __info__.action;
            __info__.action = "gintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"exercise","to_action":"gintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gintro"
            }]);
          
        } else if (action === "exercise") {

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"exercise","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
        }
      }
    

                    },
                  
                    entry_modify: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('entry_modify') for the controller: workout_program_content_daemon:exercise was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.page_id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        if (params.entry._id === "action") {
          var action = params.entry.value;

          if (action === "wintro") {

            var old_action = __info__.action;
            __info__.action = "wintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"exercise","to_action":"wintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "wintro"
            }]);
          
          } else if (action === "gintro") {

            var old_action = __info__.action;
            __info__.action = "gintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"exercise","to_action":"gintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gintro"
            }]);
          
          } else if (action === "exercise") {

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"exercise","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
          }
        }
      }
    

                    },
                  
                    next_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('next_clicked') for the controller: workout_program_content_daemon:exercise was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      var exercise_level_index = vm_entry_with_id(context.content_page, "exercise_level_index").value;
      var group_level_index = vm_entry_with_id(context.content_page, "group_level_index").value;
      var exercises_per_group = vm_entry_with_id(context.root_page, "exercises_per_group").value;
      var exercises_in_this_group = exercises_per_group[group_level_index];

      if (exercise_level_index === exercises_in_this_group - 1) {
        //Next group
        var page = vm_copy_page(context.content_page);
        vm_set_entry_with_id_key_val(page, "action", "value", "gintro");
        vm_set_entry_with_id_key_val(page, "exercise_level_index", "value", 0);
        vm_set_entry_with_id_key_val(page, "group_level_index", "value", group_level_index+1);
        var info = {ns: "sockio", page: page};

            vm_on_write(__base__, info);
                } else {
        //Next exercise
        var page = vm_copy_page(context.content_page);
        vm_set_entry_with_id_key_val(page, "action", "value", "exercise");
        vm_set_entry_with_id_key_val(page, "exercise_level_index", "value", exercise_level_index+1);
        var info = {ns: "sockio", page: page};

            vm_on_write(__base__, info);
                }
    

                    },
                  
                  
                },
              },
          
        },
      },
  
      workout_program_daemon: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_daemon',
        root_view: 'workout_program_daemon',
        spots: ["main","content_daemon","progress_daemon","map_daemon"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_daemon was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_content_daemon", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_daemon was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_progress_daemon", __base__+2+1, {}, __base__);
            __info__.embeds[1].push(ptr);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_daemon was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_map_daemon", __base__+3+1, {}, __base__);
            __info__.embeds[2].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_daemon:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
    

                    },
                  
                    next_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('next_clicked') for the controller: workout_program_daemon:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "next_clicked", {});
            }
              

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","next_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 4; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_program_map_daemon: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_map_daemon',
        root_view: 'workout_program_map_daemon',
        spots: ["main"],
        actions: {
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  //uid & wid
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      var info1 = {ns: "auth", id: "session"};
      var info2 = {ns: "local1", id: "/ui_state"};

            vm_on_read_sync(__base__, info1);
          
            vm_on_read_sync(__base__, info2);
                ////////////////////////////////////////////////////////////////////////////////////////////////////

      var _info = {id: ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content"), ns: "sockio"};

            vm_on_watch(__base__, _info);
          
      var _info2 = {id: ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/map"), ns: "sockio"};

            vm_on_watch(__base__, _info2);
          
      var _info3 = {id: ("/user/" + context.uid + "/workouts/" + context.wid), ns: "sockio"};

            vm_on_watch(__base__, _info3);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_map_daemon:choose_action was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/ui_state") {
        context.wid = vm_entry_with_id(params, "user_root").value.wid; 
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        context.content_page = params;
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/map")) {
        context.map_page = params;
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid)) {
        context.root_page = params;
      } 

      if (context.content_page !== undefined && context.map_page !== undefined && context.root_page !== undefined) {
        if (current_action === "choose_action") {

            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_map_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
        }
      }
    

                    },
                  
                  
                },
              },
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_map_daemon:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/ui_state") {
        context.wid = vm_entry_with_id(params, "user_root").value.wid; 
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        context.content_page = params;
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/map")) {
        context.map_page = params;
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid)) {
        context.root_page = params;
      } 

      if (context.content_page !== undefined && context.map_page !== undefined && context.root_page !== undefined) {
        if (current_action === "choose_action") {

            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_map_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"index","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
        }
      }
    

                    },
                  
                    entry_modify: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('entry_modify') for the controller: workout_program_map_daemon:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.page_id === "/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content") {
        if (params.entry._id === "exercise_level_index") {
          //Grab exercise & group level index
          var exercise_level_index = params.entry.value;
          if (exercise_level_index === null) { return; }
          var group_level_index = vm_entry_with_id(context.content_page, "group_level_index").value;
          if (group_level_index === null) { return; }

          //Find the *current exercise index as an absolute index*
          var ec = 0;
          var exercises_per_group = vm_entry_with_id(context.root_page, "exercises_per_group").value;
          for (var i = 0; i < group_level_index; ++i) {
            ec += exercises_per_group[i];
          }
          var absolute_exercise_index = 1 + group_level_index + exercise_level_index + ec;

          var p = vm_copy_page(context.map_page);

          //Adjust last
          if (absolute_exercise_index !== 1) {
            if (exercise_level_index === 0) {
              var last_exercise_index = absolute_exercise_index - 2;
              p.entries[last_exercise_index].value.status = "completed";
              p.entries[last_exercise_index]._sig = gen_id();
            } else {
              var last_exercise_index = absolute_exercise_index - 1;
              p.entries[last_exercise_index].value.status = "completed";
              p.entries[last_exercise_index]._sig = gen_id();
            }
          }
          
          p.entries[absolute_exercise_index].value.status = "active";
          p.entries[absolute_exercise_index]._sig = gen_id();
          var info = {ns: "sockio", page: p};

            vm_on_write(__base__, info);
                  }
        console.log("-> Entry modified", params.entry._id, params.entry.value);
      }
    

                    },
                  
                  
                },
              },
          
        },
      },
  
      workout_program_progress_daemon: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_progress_daemon',
        root_view: 'workout_program_progress_daemon',
        spots: ["main"],
        actions: {
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  //uid & wid
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      var info1 = {ns: "auth", id: "session"};
      var info2 = {ns: "local1", id: "/ui_state"};

            vm_on_read_sync(__base__, info1);
          
            vm_on_read_sync(__base__, info2);
                ////////////////////////////////////////////////////////////////////////////////////////////////////

      var _info = {id: ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content"), ns: "sockio"};

            vm_on_watch(__base__, _info);
          
      var _info2 = {id: ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/progress"), ns: "sockio"};

            vm_on_watch(__base__, _info2);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_progress_daemon:choose_action was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/ui_state") {
        context.wid = vm_entry_with_id(params, "user_root").value.wid; 
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        context.content_page = params;
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/progress")) {
        context.progress_page = params;
      }

      if (context.content_page !== undefined && context.progress_page !== undefined) {
        if (current_action === "choose_action") {

            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_progress_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
        }
      }
    

                    },
                  
                  
                },
              },
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_progress_daemon:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/ui_state") {
        context.wid = vm_entry_with_id(params, "user_root").value.wid; 
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        context.content_page = params;
      } else if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/progress")) {
        context.progress_page = params;
      }

      if (context.content_page !== undefined && context.progress_page !== undefined) {
        if (current_action === "choose_action") {

            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_progress_daemon","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"index","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
        }
      }
    

                    },
                  
                    entry_modify: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('entry_modify') for the controller: workout_program_progress_daemon:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
    

                    },
                  
                  
                },
              },
          
        },
      },
  
      exercise_verb_secs: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
              reg_interval(__base__, "1_sec_a1634f5", 4);
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'exercise_verb_secs',
        root_view: 'exercise_verb_secs',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                    "1_sec_a1634f5": function(__base__, ename, info) {
                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;

                      
      if (context.seconds == 0) {

            int_event(__info__.event_gw, "verb_completed", {});
                  return;
      }

      context.seconds -= 1;


           main_q.push([3, "if_event", __base__, "seconds", context.seconds.toString()])
              

                    },
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"exercise_verb_secs","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      exercise_verb_sets_reps: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
              reg_interval(__base__, "1_sec_16f226f", 4);
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'exercise_verb_sets_reps',
        root_view: 'exercise_verb_sets_reps',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  context.reps = context.reps;
                },
                handlers: {
                  
                  
                    "1_sec_16f226f": function(__base__, ename, info) {
                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;

                      
      context.reps -= 1;
      if (context.reps > 0) {

           main_q.push([3, "if_event", __base__, "reps", context.reps.toString()])
                } else {

            int_event(__info__.event_gw, "verb_completed", {});
                }
    

                    },
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"exercise_verb_sets_reps","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      exercise_verb_set_break: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
              reg_interval(__base__, "1_sec_f38db66", 4);
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'exercise_verb_set_break',
        root_view: 'exercise_verb_set_break',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  context.seconds = context.set_break_seconds;
      context.image_url = context.image_url
                },
                handlers: {
                  
                    skip_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('skip_clicked') for the controller: exercise_verb_set_break:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            int_event(__info__.event_gw, "verb_set_break_completed", {});
              

                    },
                  
                  
                    "1_sec_f38db66": function(__base__, ename, info) {
                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;

                      
      if (context.seconds == 0) {

            int_event(__info__.event_gw, "verb_set_break_completed", {});
                  return;
      }

      context.seconds -= 1;


           main_q.push([3, "if_event", __base__, "seconds", context.seconds.toString()])
              

                    },
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"exercise_verb_set_break","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["skip_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_window_exercise: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
    analytics.page("exercise");
  

        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_window_exercise',
        root_view: 'workout_window_exercise',
        spots: ["main","verb"],
        actions: {
          
              presay: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.track("presay", context);

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_window_exercise was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_window_exercise_presay", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      new Audio(context.audio_asset_url).play();
                },
                handlers: {
                  
                    start_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('start_clicked') for the controller: workout_window_exercise:presay was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "countdown";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_window_exercise","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["skip_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"]},"from_action":"presay","to_action":"countdown"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "countdown"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              countdown: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.track("countdown", context);

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_window_exercise was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_window_exercise_countdown", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    countdown_finished: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('countdown_finished') for the controller: workout_window_exercise:countdown was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("workout_window_countdown_finished", context);

            var old_action = __info__.action;
            __info__.action = "verb";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_window_exercise","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["skip_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"]},"from_action":"countdown","to_action":"verb"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "verb"
            }]);
          
    

                    },
                  
                    cancel_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('cancel_clicked') for the controller: workout_window_exercise:countdown was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("workout_window_countdown_cancel_clicked", context);

            var old_action = __info__.action;
            __info__.action = "presay";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_window_exercise","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["skip_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"]},"from_action":"countdown","to_action":"presay"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "presay"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              verb: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.track("verb", context);
      console.log("verb");
      if (context.verb_type == "seconds" || context.verb_type == "sets_seconds") {
      console.log("secs");

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_window_exercise was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("exercise_verb_secs", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      } else if (context.verb_type == "sets_reps") {
      console.log("erps");

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_window_exercise was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("exercise_verb_sets_reps", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      }
                },
                handlers: {
                  
                    verb_completed: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('verb_completed') for the controller: workout_window_exercise:verb was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("verb_completed", context);
      context.sets -= 1;
      if (context.sets > 1) {

            var old_action = __info__.action;
            __info__.action = "set_break";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_window_exercise","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["skip_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"]},"from_action":"verb","to_action":"set_break"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "set_break"
            }]);
          
      } else {

            int_event(__info__.event_gw, "next_clicked", {});
                }
    

                    },
                  
                  
                },
              },
          
              set_break: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.track("set_break", context);
      var ctx = {
        parent: context,
      }


            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_window_exercise was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("exercise_verb_set_break", __base__+1+1, ctx, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    verb_set_break_completed: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('verb_set_break_completed') for the controller: workout_window_exercise:set_break was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "verb";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_window_exercise","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["skip_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"]},"from_action":"set_break","to_action":"verb"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "verb"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "presay";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_window_exercise","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["skip_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"]},"from_action":"choose_action","to_action":"presay"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "presay"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_window_exercise_presay: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_window_exercise_presay',
        root_view: 'workout_window_exercise_presay',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.track("workout_window_presay", context);
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_window_exercise_presay","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_window_exercise_countdown: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
              reg_interval(__base__, "1_sec_cf7689b", 4);
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_window_exercise_countdown',
        root_view: 'workout_window_exercise_countdown',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  console.log("countdown");
      context.seconds = 5;
      context.text = "5";
                },
                handlers: {
                  
                  
                    "1_sec_cf7689b": function(__base__, ename, info) {
                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;

                      
      context.seconds -= 1;
      
      if (context.seconds == -1) {

            int_event(__info__.event_gw, "countdown_finished", {});
                } else if (context.seconds == 0) {
        context.text = "Go!";

           main_q.push([3, "if_event", __base__, "text_update", context.text])
                } else {
        context.text = context.seconds.toString();

           main_q.push([3, "if_event", __base__, "text_update", context.text])
                }
    

                    },
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_window_exercise_countdown","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_window_exercise_loader: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_window_exercise_loader',
        root_view: 'workout_window_exercise_loader',
        spots: ["main","content"],
        actions: {
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  context.has_not_requested_exercise = true;

      var _info = {id: ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content"), ns: "sockio"};

            vm_on_watch(__base__, _info);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_window_exercise_loader was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_window_exercise_loader:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content") {
        context.content_page = params;

        context.exercise_level_index = vm_entry_with_id(context.content_page, "exercise_level_index").value;
        context.group_level_index = vm_entry_with_id(context.content_page, "group_level_index").value;
        if (context.group_level_index === null) { return };
        if (context.exercise_level_index === null) { return };

        console.log("Got group level index");
        if (current_action === "loading" && context.has_not_requested_exercise === true) {
          context.has_not_requested_exercise = false;
          var info = {ns: "sockio", id: "/user/" + context.uid + "/workouts/" + context.wid + "/exercise/" + context.group_level_index + "/" + context.exercise_level_index};

            vm_on_watch(__base__, info);
                  }
      } else if (params._id === "/user/" + context.uid + "/workouts/" + context.wid + "/exercise/" + context.group_level_index + "/" + context.exercise_level_index) {
        context.exercise_page = params;

            var old_action = __info__.action;
            __info__.action = "content";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_window_exercise_loader","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["read_res"]},"from_action":"loading","to_action":"content"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "content"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              content: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  context.ui_title = vm_entry_with_id(context.exercise_page, "ui_title").value;
        context.image_url = vm_entry_with_id(context.exercise_page, "image_url").value;
        context.verb_type = vm_entry_with_id(context.exercise_page, "verb_type").value;
        context.seconds = vm_entry_with_id(context.exercise_page, "seconds").value;
        context.sets = vm_entry_with_id(context.exercise_page, "sets").value;
        context.reps = vm_entry_with_id(context.exercise_page, "reps").value;
        context.audio_asset_url = vm_entry_with_id(context.exercise_page, "audio_asset_url").value;

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_window_exercise_loader was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_window_exercise", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_window_exercise_loader:content was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content") {
        context.content_page = params;

        context.exercise_level_index = vm_entry_with_id(context.content_page, "exercise_level_index").value;
        context.group_level_index = vm_entry_with_id(context.content_page, "group_level_index").value;
        if (context.group_level_index === null) { return };
        if (context.exercise_level_index === null) { return };

        console.log("Got group level index");
        if (current_action === "loading" && context.has_not_requested_exercise === true) {
          context.has_not_requested_exercise = false;
          var info = {ns: "sockio", id: "/user/" + context.uid + "/workouts/" + context.wid + "/exercise/" + context.group_level_index + "/" + context.exercise_level_index};

            vm_on_watch(__base__, info);
                  }
      } else if (params._id === "/user/" + context.uid + "/workouts/" + context.wid + "/exercise/" + context.group_level_index + "/" + context.exercise_level_index) {
        context.exercise_page = params;

            var old_action = __info__.action;
            __info__.action = "content";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_window_exercise_loader","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["read_res"]},"from_action":"content","to_action":"content"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "content"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_window_exercise_loader","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["read_res"]},"from_action":"choose_action","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_program_progress_panel: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
  

        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_progress_panel',
        root_view: 'workout_program_progress_panel',
        spots: ["main","content"],
        actions: {
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var _info = {ns: "auth", id: "session"};

            vm_on_read_sync(__base__, _info);
          
      var _info2 = {ns: "local1", id: "/ui_state"};

            vm_on_read_sync(__base__, _info2);
          
      var info = {id: ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/progress"), ns: "sockio"};

            vm_on_watch(__base__, info);
          
      var info1 = {id: ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/map"), ns: "sockio"};

            vm_on_watch(__base__, info1);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_progress_panel:choose_action was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      console.log("loaded", params._id);
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value;
      } else if (params._id === "/ui_state") {
        context.wid = vm_entry_with_id(params, "user_root").value.wid;
      } else if (params._id === "/user/" + context.uid + "/workouts/" + context.wid + "/sessions/progress") {
        context.progress_page = params;
      } else if (params._id === "/user/" + context.uid + "/workouts/" + context.wid + "/sessions/map") {
        context.map_page = params;
      } 

      if (current_action === "choose_action" && context.progress_page !== undefined && context.map_page !== undefined) {
          percent_complete = vm_entry_with_id(context.progress_page, "percent_complete").value;
          remaining_seconds = vm_entry_with_id(context.progress_page, "remaining_seconds").value;

          context.ui_percent_complete = (percent_complete*100).toFixed(1).toString();
          context.ui_remaining_hhmmss = __time_calc_hh_mm_ss(remaining_seconds)


            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_progress_panel","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res","hide","show","entry_modify"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["group_entry_changed","exercise_entry_changed"],"question":["back_clicked"],"loading":["read_res","hide","show","entry_modify"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
        }
    

                    },
                  
                    hide: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('hide') for the controller: workout_program_progress_panel:choose_action was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "hide", {}])
          
                    },
                  
                    show: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('show') for the controller: workout_program_progress_panel:choose_action was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "show", {}])
          
                    },
                  
                    entry_modify: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('entry_modify') for the controller: workout_program_progress_panel:choose_action was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.page_id ===  "/user/" + context.uid + "/workouts/" + context.wid + "/sessions/map") {
        var type = params.entry.value.type;
        if (type === "group") {


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "group_entry_changed", params.entry);
            }
                  } else if (type === "exercise") { 


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "exercise_entry_changed", params.entry);
            }
                  }
      }
    

                    },
                  
                  
                },
              },
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_progress_panel was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_progress_panel:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      console.log("loaded", params._id);
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value;
      } else if (params._id === "/ui_state") {
        context.wid = vm_entry_with_id(params, "user_root").value.wid;
      } else if (params._id === "/user/" + context.uid + "/workouts/" + context.wid + "/sessions/progress") {
        context.progress_page = params;
      } else if (params._id === "/user/" + context.uid + "/workouts/" + context.wid + "/sessions/map") {
        context.map_page = params;
      } 

      if (current_action === "choose_action" && context.progress_page !== undefined && context.map_page !== undefined) {
          percent_complete = vm_entry_with_id(context.progress_page, "percent_complete").value;
          remaining_seconds = vm_entry_with_id(context.progress_page, "remaining_seconds").value;

          context.ui_percent_complete = (percent_complete*100).toFixed(1).toString();
          context.ui_remaining_hhmmss = __time_calc_hh_mm_ss(remaining_seconds)


            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_progress_panel","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res","hide","show","entry_modify"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["group_entry_changed","exercise_entry_changed"],"question":["back_clicked"],"loading":["read_res","hide","show","entry_modify"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["read_res"]},"from_action":"loading","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
        }
    

                    },
                  
                    hide: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('hide') for the controller: workout_program_progress_panel:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "hide", {}])
          
                    },
                  
                    show: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('show') for the controller: workout_program_progress_panel:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "show", {}])
          
                    },
                  
                    entry_modify: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('entry_modify') for the controller: workout_program_progress_panel:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.page_id ===  "/user/" + context.uid + "/workouts/" + context.wid + "/sessions/map") {
        var type = params.entry.value.type;
        if (type === "group") {


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "group_entry_changed", params.entry);
            }
                  } else if (type === "exercise") { 


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "exercise_entry_changed", params.entry);
            }
                  }
      }
    

                    },
                  
                  
                },
              },
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_progress_panel was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_progress_panel_content", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_progress_panel:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      console.log("loaded", params._id);
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value;
      } else if (params._id === "/ui_state") {
        context.wid = vm_entry_with_id(params, "user_root").value.wid;
      } else if (params._id === "/user/" + context.uid + "/workouts/" + context.wid + "/sessions/progress") {
        context.progress_page = params;
      } else if (params._id === "/user/" + context.uid + "/workouts/" + context.wid + "/sessions/map") {
        context.map_page = params;
      } 

      if (current_action === "choose_action" && context.progress_page !== undefined && context.map_page !== undefined) {
          percent_complete = vm_entry_with_id(context.progress_page, "percent_complete").value;
          remaining_seconds = vm_entry_with_id(context.progress_page, "remaining_seconds").value;

          context.ui_percent_complete = (percent_complete*100).toFixed(1).toString();
          context.ui_remaining_hhmmss = __time_calc_hh_mm_ss(remaining_seconds)


            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_progress_panel","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res","hide","show","entry_modify"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["group_entry_changed","exercise_entry_changed"],"question":["back_clicked"],"loading":["read_res","hide","show","entry_modify"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["read_res"]},"from_action":"index","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
        }
    

                    },
                  
                    hide: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('hide') for the controller: workout_program_progress_panel:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "hide", {}])
          
                    },
                  
                    show: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('show') for the controller: workout_program_progress_panel:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "show", {}])
          
                    },
                  
                    entry_modify: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('entry_modify') for the controller: workout_program_progress_panel:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.page_id ===  "/user/" + context.uid + "/workouts/" + context.wid + "/sessions/map") {
        var type = params.entry.value.type;
        if (type === "group") {


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "group_entry_changed", params.entry);
            }
                  } else if (type === "exercise") { 


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "exercise_entry_changed", params.entry);
            }
                  }
      }
    

                    },
                  
                  
                },
              },
          
        },
      },
  
      workout_program_progress_panel_content: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_progress_panel_content',
        root_view: 'workout_program_progress_panel_content',
        spots: ["main","map","numbers"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_progress_panel_content was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_progress_panel_content_numbers", __base__+2+1, context, __base__);
            __info__.embeds[1].push(ptr);
          

      var map_ctx = { entries: context.map_page.entries }
      console.log(map_ctx);

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_progress_panel_content was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_progress_panel_content_map", __base__+1+1, map_ctx, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    group_entry_changed: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('group_entry_changed') for the controller: workout_program_progress_panel_content:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "group_entry_changed", params);
            }
              

                    },
                  
                    exercise_entry_changed: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('exercise_entry_changed') for the controller: workout_program_progress_panel_content:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "exercise_entry_changed", params);
            }
              

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_progress_panel_content","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res","hide","show","entry_modify"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["group_entry_changed","exercise_entry_changed"],"question":["back_clicked"],"loading":["read_res","hide","show","entry_modify"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_program_progress_panel_content_map: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_progress_panel_content_map',
        root_view: 'workout_program_progress_panel_content_map',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                    exercise_entry_changed: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('exercise_entry_changed') for the controller: workout_program_progress_panel_content_map:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

           main_q.push([3, "if_event", __base__, "exercise_entry_changed", params])
              

                    },
                  
                    group_entry_changed: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('group_entry_changed') for the controller: workout_program_progress_panel_content_map:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

           main_q.push([3, "if_event", __base__, "group_entry_changed", params])
              

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_progress_panel_content_map","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["exercise_entry_changed","group_entry_changed"],"question":["back_clicked"],"loading":["read_res","hide","show","entry_modify"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_program_progress_panel_content_numbers: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_progress_panel_content_numbers',
        root_view: 'workout_program_progress_panel_content_numbers',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_progress_panel_content_numbers","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res","hide","show","entry_modify"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_window_input: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_window_input',
        root_view: 'workout_window_input',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_window_input","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res","hide","show","entry_modify"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_program_window_gintro: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_window_gintro',
        root_view: 'workout_program_window_gintro',
        spots: ["main","content"],
        actions: {
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.page("workout_group_intro");
      analytics.track("loading");
      context.has_not_requested_gintro = true;

      var _info = {id: ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content"), ns: "sockio"};

            vm_on_watch(__base__, _info);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_window_gintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_window_gintro:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content") {
        context.content_page = params;

        context.group_level_index = vm_entry_with_id(context.content_page, "group_level_index").value;
        if (context.group_level_index === null) { return };

        console.log("Got group level index");
        if (current_action === "loading" && context.has_not_requested_gintro === true) {
          context.has_not_requested_gintro = false;
          var info = {ns: "sockio", id: "/user/" + context.uid + "/workouts/" + context.wid + "/gintro/" + context.group_level_index};

            vm_on_watch(__base__, info);
                  }
      } else if (params._id === "/user/" + context.uid + "/workouts/" + context.wid + "/gintro/" + context.group_level_index) {
        context.ui_intro_text = vm_entry_with_id(params, "ui_intro_text").value;
        context.exercise_images = vm_entry_with_id(params, "exercise_images").value;
        context.audio_asset_url = vm_entry_with_id(params, "audio_asset_url").value;

            var old_action = __info__.action;
            __info__.action = "content";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_window_gintro","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["read_res"]},"from_action":"loading","to_action":"content"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "content"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              content: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.track("workout_group_intro_loaded", context);

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_window_gintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_window_gintro_content", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
        new Audio(context.audio_asset_url).play();
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_window_gintro:content was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content") {
        context.content_page = params;

        context.group_level_index = vm_entry_with_id(context.content_page, "group_level_index").value;
        if (context.group_level_index === null) { return };

        console.log("Got group level index");
        if (current_action === "loading" && context.has_not_requested_gintro === true) {
          context.has_not_requested_gintro = false;
          var info = {ns: "sockio", id: "/user/" + context.uid + "/workouts/" + context.wid + "/gintro/" + context.group_level_index};

            vm_on_watch(__base__, info);
                  }
      } else if (params._id === "/user/" + context.uid + "/workouts/" + context.wid + "/gintro/" + context.group_level_index) {
        context.ui_intro_text = vm_entry_with_id(params, "ui_intro_text").value;
        context.exercise_images = vm_entry_with_id(params, "exercise_images").value;
        context.audio_asset_url = vm_entry_with_id(params, "audio_asset_url").value;

            var old_action = __info__.action;
            __info__.action = "content";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_window_gintro","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["read_res"]},"from_action":"content","to_action":"content"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "content"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_window_gintro","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["read_res"]},"from_action":"choose_action","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_program_window_gintro_content: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_window_gintro_content',
        root_view: 'workout_program_window_gintro_content',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_window_gintro_content","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_program_window_wintro: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          
              factive_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
    context.interactive_loaded = false;
  

        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          
              factive_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_window_wintro',
        root_view: 'workout_program_window_wintro',
        spots: ["main","content"],
        actions: {
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.page("workout_intro");
      analytics.track("loading");

      var info = {ns: "sockio", id: "/user/" + context.uid + "/workouts/" + context.wid + "/wintro"}

            vm_on_watch(__base__, info);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_window_wintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_window_wintro:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/wintro")) {
        context.short_group_names = vm_entry_with_id(params, "ui_group_short_names").value;
        context.ui_intro_text = vm_entry_with_id(params, "ui_intro_text").value;
        
        context.audio_asset_url = vm_entry_with_id(params, "audio_asset_url").value;

            var old_action = __info__.action;
            __info__.action = "content";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_window_wintro","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"]},"from_action":"loading","to_action":"content"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "content"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              content: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.track("workout_intro_loaded", context);

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_window_wintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_window_wintro_content", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          

        new Audio(context.audio_asset_url).play();
                },
                handlers: {
                  
                    tts_change: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('tts_change') for the controller: workout_program_window_wintro:content was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      

                    },
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_window_wintro:content was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/wintro")) {
        context.short_group_names = vm_entry_with_id(params, "ui_group_short_names").value;
        context.ui_intro_text = vm_entry_with_id(params, "ui_intro_text").value;
        
        context.audio_asset_url = vm_entry_with_id(params, "audio_asset_url").value;

            var old_action = __info__.action;
            __info__.action = "content";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_window_wintro","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"]},"from_action":"content","to_action":"content"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "content"
            }]);
          
      }
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_window_wintro","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"]},"from_action":"choose_action","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_program_window_wintro_content: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_window_wintro_content',
        root_view: 'workout_program_window_wintro_content',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_window_wintro_content","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["read_res","entry_modify","next_clicked"],"gintro":["read_res","entry_modify","next_clicked"],"exercise":["read_res","entry_modify","next_clicked"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_program_content_window: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_content_window',
        root_view: 'workout_program_content_window',
        spots: ["main","content"],
        actions: {
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  //uid & wid
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      var info1 = {ns: "auth", id: "session"};
      var info2 = {ns: "local1", id: "/ui_state"};

            vm_on_read_sync(__base__, info1);
          
            vm_on_read_sync(__base__, info2);
                ////////////////////////////////////////////////////////////////////////////////////////////////////

      //Get the content page which holds the action & context for the action
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      var info = {ns: "sockio", id: "/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content"};

            vm_on_watch(__base__, info);
                ////////////////////////////////////////////////////////////////////////////////////////////////////
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_content_window:choose_action was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      //uid & wid
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/ui_state") {
        context.wid = vm_entry_with_id(params, "user_root").value.wid; 
      }
      ////////////////////////////////////////////////////////////////////////////////////////////////////

      //Back controller's actions
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        context.content_page = params;

        if (current_action === "choose_action") {
          //Switch action
          var action = vm_entry_with_id(context.content_page, "action").value;
          if (action === "wintro") { 

            var old_action = __info__.action;
            __info__.action = "wintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"choose_action","to_action":"wintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "wintro"
            }]);
          
          } else if (action === "gintro") {

            var old_action = __info__.action;
            __info__.action = "gintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"choose_action","to_action":"gintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gintro"
            }]);
          
          } else if (action === "exercise") {

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"choose_action","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
          }
        }
      }
      ////////////////////////////////////////////////////////////////////////////////////////////////////
    

                    },
                  
                  
                },
              },
          
              wintro: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var ctx = {wid: context.wid, uid: context.uid}

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_content_window was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_window_wintro", __base__+1+1, ctx, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    entry_modify: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('entry_modify') for the controller: workout_program_content_window:wintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.page_id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        if (params.entry._id === "action") {
          var action = params.entry.value;

          if (action === "wintro") {

            var old_action = __info__.action;
            __info__.action = "wintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"wintro","to_action":"wintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "wintro"
            }]);
          
          } else if (action === "gintro") {

            var old_action = __info__.action;
            __info__.action = "gintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"wintro","to_action":"gintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gintro"
            }]);
          
          } else if (action === "exercise") {

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"wintro","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
          }
        }
      }
    

                    },
                  
                    show_settings: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('show_settings') for the controller: workout_program_content_window:wintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "show_settings", {}])
          
                    },
                  
                    hide_settings: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('hide_settings') for the controller: workout_program_content_window:wintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "hide_settings", {}])
          
                    },
                  
                    show_progress: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('show_progress') for the controller: workout_program_content_window:wintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "show_progress", {}])
          
                    },
                  
                    hide_progress: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('hide_progress') for the controller: workout_program_content_window:wintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "hide_progress", {}])
          
                    },
                  
                  
                },
              },
          
              gintro: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var ctx = {wid: context.wid, uid: context.uid}

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_content_window was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_window_gintro", __base__+1+1, ctx, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_content_window:gintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      //uid & wid
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/ui_state") {
        context.wid = vm_entry_with_id(params, "user_root").value.wid; 
      }
      ////////////////////////////////////////////////////////////////////////////////////////////////////

      //Back controller's actions
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        context.content_page = params;

        if (current_action === "choose_action") {
          //Switch action
          var action = vm_entry_with_id(context.content_page, "action").value;
          if (action === "wintro") { 

            var old_action = __info__.action;
            __info__.action = "wintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"gintro","to_action":"wintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "wintro"
            }]);
          
          } else if (action === "gintro") {

            var old_action = __info__.action;
            __info__.action = "gintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"gintro","to_action":"gintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gintro"
            }]);
          
          } else if (action === "exercise") {

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"gintro","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
          }
        }
      }
      ////////////////////////////////////////////////////////////////////////////////////////////////////
    

                    },
                  
                    entry_modify: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('entry_modify') for the controller: workout_program_content_window:gintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.page_id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        if (params.entry._id === "action") {
          var action = params.entry.value;

          if (action === "wintro") {

            var old_action = __info__.action;
            __info__.action = "wintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"gintro","to_action":"wintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "wintro"
            }]);
          
          } else if (action === "gintro") {

            var old_action = __info__.action;
            __info__.action = "gintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"gintro","to_action":"gintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gintro"
            }]);
          
          } else if (action === "exercise") {

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"gintro","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
          }
        }
      }
    

                    },
                  
                    show_settings: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('show_settings') for the controller: workout_program_content_window:gintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "show_settings", {}])
          
                    },
                  
                    hide_settings: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('hide_settings') for the controller: workout_program_content_window:gintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "hide_settings", {}])
          
                    },
                  
                    show_progress: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('show_progress') for the controller: workout_program_content_window:gintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "show_progress", {}])
          
                    },
                  
                    hide_progress: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('hide_progress') for the controller: workout_program_content_window:gintro was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "hide_progress", {}])
          
                    },
                  
                  
                },
              },
          
              exercise: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var ctx = {wid: context.wid, uid: context.uid}

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_content_window was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_window_exercise_loader", __base__+1+1, ctx, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_content_window:exercise was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      //uid & wid
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/ui_state") {
        context.wid = vm_entry_with_id(params, "user_root").value.wid; 
      }
      ////////////////////////////////////////////////////////////////////////////////////////////////////

      //Back controller's actions
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        context.content_page = params;

        if (current_action === "choose_action") {
          //Switch action
          var action = vm_entry_with_id(context.content_page, "action").value;
          if (action === "wintro") { 

            var old_action = __info__.action;
            __info__.action = "wintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"exercise","to_action":"wintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "wintro"
            }]);
          
          } else if (action === "gintro") {

            var old_action = __info__.action;
            __info__.action = "gintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"exercise","to_action":"gintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gintro"
            }]);
          
          } else if (action === "exercise") {

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"exercise","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
          }
        }
      }
      ////////////////////////////////////////////////////////////////////////////////////////////////////
    

                    },
                  
                    entry_modify: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('entry_modify') for the controller: workout_program_content_window:exercise was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.page_id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        if (params.entry._id === "action") {
          var action = params.entry.value;

          if (action === "wintro") {

            var old_action = __info__.action;
            __info__.action = "wintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"exercise","to_action":"wintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "wintro"
            }]);
          
          } else if (action === "gintro") {

            var old_action = __info__.action;
            __info__.action = "gintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"exercise","to_action":"gintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gintro"
            }]);
          
          } else if (action === "exercise") {

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"exercise","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
          }
        }
      }
    

                    },
                  
                    show_settings: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('show_settings') for the controller: workout_program_content_window:exercise was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "show_settings", {}])
          
                    },
                  
                    hide_settings: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('hide_settings') for the controller: workout_program_content_window:exercise was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "hide_settings", {}])
          
                    },
                  
                    show_progress: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('show_progress') for the controller: workout_program_content_window:exercise was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "show_progress", {}])
          
                    },
                  
                    hide_progress: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('hide_progress') for the controller: workout_program_content_window:exercise was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "hide_progress", {}])
          
                    },
                  
                  
                },
              },
          
              input: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_content_window was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_window_input", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    submit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('submit_clicked') for the controller: workout_program_content_window:input was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"input","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
    

                    },
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_content_window:input was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      //uid & wid
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } else if (params._id === "/ui_state") {
        context.wid = vm_entry_with_id(params, "user_root").value.wid; 
      }
      ////////////////////////////////////////////////////////////////////////////////////////////////////

      //Back controller's actions
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      if (params._id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        context.content_page = params;

        if (current_action === "choose_action") {
          //Switch action
          var action = vm_entry_with_id(context.content_page, "action").value;
          if (action === "wintro") { 

            var old_action = __info__.action;
            __info__.action = "wintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"input","to_action":"wintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "wintro"
            }]);
          
          } else if (action === "gintro") {

            var old_action = __info__.action;
            __info__.action = "gintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"input","to_action":"gintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gintro"
            }]);
          
          } else if (action === "exercise") {

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"input","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
          }
        }
      }
      ////////////////////////////////////////////////////////////////////////////////////////////////////
    

                    },
                  
                    entry_modify: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('entry_modify') for the controller: workout_program_content_window:input was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params.page_id === ("/user/" + context.uid + "/workouts/" + context.wid + "/sessions/content")) {
        if (params.entry._id === "action") {
          var action = params.entry.value;

          if (action === "wintro") {

            var old_action = __info__.action;
            __info__.action = "wintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"input","to_action":"wintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "wintro"
            }]);
          
          } else if (action === "gintro") {

            var old_action = __info__.action;
            __info__.action = "gintro";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"input","to_action":"gintro"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "gintro"
            }]);
          
          } else if (action === "exercise") {

            var old_action = __info__.action;
            __info__.action = "exercise";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_content_window","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"input","to_action":"exercise"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "exercise"
            }]);
          
          }
        }
      }
    

                    },
                  
                    show_settings: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('show_settings') for the controller: workout_program_content_window:input was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "show_settings", {}])
          
                    },
                  
                    hide_settings: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('hide_settings') for the controller: workout_program_content_window:input was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "hide_settings", {}])
          
                    },
                  
                    show_progress: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('show_progress') for the controller: workout_program_content_window:input was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "show_progress", {}])
          
                    },
                  
                    hide_progress: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('hide_progress') for the controller: workout_program_content_window:input was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
           main_q.push([3, "if_event", __base__, "hide_progress", {}])
          
                    },
                  
                  
                },
              },
          
        },
      },
  
      workout_program_nav: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
    //Don't show settings or progress bar by default on mobile
    context.settings_toggled = false;
    context.progress_toggled = false;
  

        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_nav',
        root_view: 'workout_program_nav',
        spots: ["main","settings_panel","program_window","progress_panel"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_settings_panel", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_progress_panel", __base__+3+1, {}, __base__);
            __info__.embeds[2].push(ptr);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_content_window", __base__+2+1, {}, __base__);
            __info__.embeds[1].push(ptr);
                },
                handlers: {
                  
                    toggle_settings_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('toggle_settings_clicked') for the controller: workout_program_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (context.settings_toggled === false) {
        analytics.track("workout_settings_open");


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "show", {});
            }
          

            var vcs = __info__.embeds[1];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "show_settings", {});
            }
                } else {
        analytics.track("workout_settings_closed");


            var vcs = __info__.embeds[0];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "hide", {});
            }
          

            var vcs = __info__.embeds[1];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "hide_settings", {});
            }
                }
      context.settings_toggled = !context.settings_toggled;
    

                    },
                  
                    toggle_progress_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('toggle_progress_clicked') for the controller: workout_program_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (context.progress_toggled === false) {
        analytics.track("workout_progress_open");


            var vcs = __info__.embeds[2];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "show", {});
            }
          

            var vcs = __info__.embeds[1];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "show_progress", {});
            }
                } else {
        analytics.track("workout_progress_closed");


            var vcs = __info__.embeds[2];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "hide", {});
            }
          

            var vcs = __info__.embeds[1];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "hide_progress", {});
            }
                }
      context.progress_toggled = !context.progress_toggled;
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":["read_res"],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 4; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_program_root: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_root',
        root_view: 'workout_program_root',
        spots: ["main","content","daemon"],
        actions: {
          
              ready: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_root was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_nav", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_program_root was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_program_daemon", __base__+2+1, {}, __base__);
            __info__.embeds[1].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_root:ready was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
    

                    },
                  
                    next_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('next_clicked') for the controller: workout_program_root:ready was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      


            var vcs = __info__.embeds[1];
            for (var i = 0; i < vcs.length; ++i) {
              int_event(vcs[i], "next_clicked", params);
            }
              

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "ready";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_root","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["toggle_settings_clicked","toggle_progress_clicked"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["read_res","next_clicked"]},"from_action":"choose_action","to_action":"ready"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "ready"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_program_settings_panel: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_program_settings_panel',
        root_view: 'workout_program_settings_panel',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_program_settings_panel:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "/ui_state") {
        var p = vm_copy_page(params);
        vm_del_entry_with_id(p, "user_root");
        vm_set_entry_with_id_key_val(p, "user_root", "value", {action: "dashboard"});
        var info = {ns: "local1", page: p};

            vm_on_write(__base__, info);
                }
    

                    },
                  
                    exit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('exit_clicked') for the controller: workout_program_settings_panel:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      //Clearing the workout_in_progress which is picked up by the root controller in particular to change the view hierarchy
      info = {ns: "local1", id: "/ui_state"};

            vm_on_read_sync(__base__, info);
              

                    },
                  
                    show: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('show') for the controller: workout_program_settings_panel:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

           main_q.push([3, "if_event", __base__, "show", {}])
              

                    },
                  
                    hide: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('hide') for the controller: workout_program_settings_panel:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

           main_q.push([3, "if_event", __base__, "hide", {}])
              

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_program_settings_panel","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["read_res","exit_clicked","show","hide"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":["read_res","plan_selected"],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["read_res","next_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_equipment_selection: {
        __init__: function(__base__) {
          //Call service on_connect
          
              rest_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              rest_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_equipment_selection',
        root_view: 'workout_setup_equipment_selection',
        spots: ["main","content"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_equipment_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          

      if (context.is_planned_workout) {
        var info = {
          path: "workout_setup/equipment_options3_planned",
          params: {
            session_key: window.session_key
          }
        }
      } else {
        var info = {
          path: "workout_setup/equipment_options3",
          params: {
            session_key: window.session_key,
            program_class_tag: context.workout_program_class,
          }
        }
      }


            rest_on_get(__base__, info);
                },
                handlers: {
                  
                    rest_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('rest_res') for the controller: workout_setup_equipment_selection:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      context.equipment = params.res.equipment;

            var old_action = __info__.action;
            __info__.action = "picker";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_equipment_selection","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["rest_res"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["read_res","next_clicked"]},"from_action":"index","to_action":"picker"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "picker"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              picker: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_equipment_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_equipment_selection_picker", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_equipment_selection","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["rest_res"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["read_res","next_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_equipment_selection_picker: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
    context.selected_tags = {};
  

        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_equipment_selection_picker',
        root_view: 'workout_setup_equipment_selection_picker',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                    equipment_toggle: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('equipment_toggle') for the controller: workout_setup_equipment_selection_picker:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      var tag = params.tag;

      //Check if the equipment was already toggled
      if (context.selected_tags[tag] !== undefined) {
        //Yep, remove the checkmark
        delete context.selected_tags[tag];
        var info = {tag: tag};

           main_q.push([3, "if_event", __base__, "remove_checkmark", info])
                } else {
        //Nope, tell controller to add checkmark
        context.selected_tags[tag] = true;
        var info = {tag: tag};

           main_q.push([3, "if_event", __base__, "add_checkmark", info])
                }
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_equipment_selection_picker","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["equipment_toggle"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["read_res","next_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_muscle_selection: {
        __init__: function(__base__) {
          //Call service on_connect
          
              rest_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              rest_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_muscle_selection',
        root_view: 'workout_setup_muscle_selection',
        spots: ["main","content"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_muscle_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          

      var info = {
        path: "workout_setup/muscle_options",
        params: {
          session_key: window.session_key,
          program_class_tag: context.workout_program_class,
        }
      }

            rest_on_get(__base__, info);
                },
                handlers: {
                  
                    rest_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('rest_res') for the controller: workout_setup_muscle_selection:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      context.muscles = params.res.muscles;

            var old_action = __info__.action;
            __info__.action = "picker";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_muscle_selection","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["rest_res"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["read_res","next_clicked"]},"from_action":"index","to_action":"picker"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "picker"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              picker: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_muscle_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_muscle_selection_picker", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_muscle_selection","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["rest_res"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["read_res","next_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_muscle_selection_picker: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
    context.muscle_picker_a_selection_tag = context.muscles[0].tag;
    context.muscle_picker_b_selection_tag = context.muscles[1].tag;
  

        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_muscle_selection_picker',
        root_view: 'workout_setup_muscle_selection_picker',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  //Duplicate muscles without the second entry
      context.a_options = {muscles: []};
      for (var i = 0; i < context.muscles.length; ++i) {
        if (context.muscles[i].tag === context.muscle_picker_b_selection_tag) { continue; }
        context.a_options.muscles.push(context.muscles[i]);
      }

           main_q.push([3, "if_event", __base__, "muscle_picker_a_options", context.a_options])
          
      //Duplicate muscles without the first entry
      context.b_options = {muscles: []};
      for (var i = 0; i < context.muscles.length; ++i) {
        if (context.muscles[i].tag === context.muscle_picker_a_selection_tag) { continue; }
        context.b_options.muscles.push(context.muscles[i]);
      }

           main_q.push([3, "if_event", __base__, "muscle_picker_b_options", context.b_options])
                },
                handlers: {
                  
                    muscle_picker_a_changed: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('muscle_picker_a_changed') for the controller: workout_setup_muscle_selection_picker:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      context.muscle_picker_a_selection_tag = params.tag;

      //Duplicate muscles without the first entry
      context.b_options = {muscles: []};
      for (var i = 0; i < context.muscles.length; ++i) {
        if (context.muscles[i].tag === context.muscle_picker_a_selection_tag) { continue; }
        context.b_options.muscles.push(context.muscles[i]);
      }


           main_q.push([3, "if_event", __base__, "muscle_picker_b_options", context.b_options])
              

                    },
                  
                    muscle_picker_b_changed: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('muscle_picker_b_changed') for the controller: workout_setup_muscle_selection_picker:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      context.muscle_picker_b_selection_tag = params.tag;

      //Duplicate muscles without the second entry
      context.a_options = {muscles: []};
      for (var i = 0; i < context.muscles.length; ++i) {
        if (context.muscles[i].tag === context.muscle_picker_b_selection_tag) { continue; }
        context.a_options.muscles.push(context.muscles[i]);
      }

           main_q.push([3, "if_event", __base__, "muscle_picker_a_options", context.a_options])
              

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_muscle_selection_picker","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["muscle_picker_a_changed","muscle_picker_b_changed"],"question":["back_clicked"],"loading":["read_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["read_res","next_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_time_selection: {
        __init__: function(__base__) {
          //Call service on_connect
          
              rest_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              rest_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_time_selection',
        root_view: 'workout_setup_time_selection',
        spots: ["main","content"],
        actions: {
          
              loading: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_time_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("spin_loader", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          

      if (context.is_planned_workout === true) {
        var info = {
          path: "workout_setup/time_options_planned",
          params: {
            session_key: window.session_key
          }
        }
      } else {
        var info = {
          path: "workout_setup/time_options",
          params: {
            session_key: window.session_key,
            program_class_tag: context.workout_program_class
          }
        }
      }

            rest_on_get(__base__, info);
                },
                handlers: {
                  
                    rest_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('rest_res') for the controller: workout_setup_time_selection:loading was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      context.min_minutes = params.res.min_minutes;
      context.max_minutes = params.res.max_minutes;
      context.default_minutes = params.res.default_minutes;


            var old_action = __info__.action;
            __info__.action = "picker";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_time_selection","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["muscle_picker_a_changed","muscle_picker_b_changed"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["read_res","next_clicked"]},"from_action":"loading","to_action":"picker"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "picker"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              picker: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_time_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_time_selection_picker", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "loading";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_time_selection","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["muscle_picker_a_changed","muscle_picker_b_changed"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["read_res","next_clicked"]},"from_action":"choose_action","to_action":"loading"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "loading"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_time_selection_picker: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
    context.minutes_selected = context.default_minutes;
  

        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_time_selection_picker',
        root_view: 'workout_setup_time_selection_picker',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  console.log("minutes = ", context.minutes_selected);
                },
                handlers: {
                  
                    minutes_selected: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('minutes_selected') for the controller: workout_setup_time_selection_picker:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      context.minutes_selected = params.minutes;
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_time_selection_picker","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["minutes_selected"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["read_res","next_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_waiting_for_workout: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_waiting_for_workout',
        root_view: 'workout_setup_waiting_for_workout',
        spots: ["main","content"],
        actions: {
          
              waiting: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.page("waiting_for_workout", {action: "waiting"});
      var _info = { ns: "auth", id: "session" }

            vm_on_read_sync(__base__, _info);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_waiting_for_workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_waiting_for_workout_loader", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_setup_waiting_for_workout:waiting was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      if (params._id === "session") {
        context.uid = vm_entry_with_id(params, "uid").value; 
      } 
    

                    },
                  
                    workout_ready: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('workout_ready') for the controller: workout_setup_waiting_for_workout:waiting was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "ready";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_waiting_for_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["minutes_selected"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"]},"from_action":"waiting","to_action":"ready"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "ready"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              ready: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.page("waiting_for_workout", {action: "ready", context: context});

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_waiting_for_workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_waiting_for_workout_content", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    start_workout_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('start_workout_clicked') for the controller: workout_setup_waiting_for_workout:ready was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      var info = {wid: context.wid};

            int_event(__info__.event_gw, "start_workout", info);
              

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "waiting";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_waiting_for_workout","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["minutes_selected"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"]},"from_action":"choose_action","to_action":"waiting"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "waiting"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_waiting_for_workout_content: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_waiting_for_workout_content',
        root_view: 'workout_setup_waiting_for_workout_content',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_waiting_for_workout_content","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_waiting_for_workout_loader: {
        __init__: function(__base__) {
          //Call service on_connect
          
              vm_on_connect(__base__);
          
              rest_on_connect(__base__);
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          
              vm_on_disconnect(__base__);
          
              rest_on_disconnect(__base__);
          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_waiting_for_workout_loader',
        root_view: 'workout_setup_waiting_for_workout_loader',
        spots: ["main"],
        actions: {
          
              rest: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  //Is this a planned workout? We will only have equipment, time, and a plan tag
      if (context.is_planned_workout === true) {
        var info = {
          path: "workout_setup/submit_planned",
          params: {
            session_key: window.session_key,
            selected_equipment: context.selected_tags,
            duration: context.minutes_selected*60
          }
        }
      } else {
        var muscle_groups = [];
        if (context.muscle_picker_a_selection_tag !== undefined) { muscle_groups.push(context.muscle_picker_a_selection_tag); }
        if (context.muscle_picker_b_selection_tag !== undefined) { muscle_groups.push(context.muscle_picker_b_selection_tag); }

        var info = {
          path: "workout_setup/submit",
          params: {
            session_key: window.session_key,
            program_class_tag: context.workout_program_class,
            selected_equipment: context.selected_tags,
            duration: context.minutes_selected*60,
            muscle_groups: muscle_groups
          }
        }
      }

            rest_on_get(__base__, info);
                },
                handlers: {
                  
                    rest_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('rest_res') for the controller: workout_setup_waiting_for_workout_loader:rest was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("waiting_for_workout_loaded_from_rest", params);
      context.wid = params.res.wid;

            var old_action = __info__.action;
            __info__.action = "page";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_waiting_for_workout_loader","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"]},"from_action":"rest","to_action":"page"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "page"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              page: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var info = {ns: "sockio", id: "/user/" + context.uid + "/workouts/"+context.wid}

            vm_on_watch(__base__, info);
                console.log("WID = ", context.wid);
                },
                handlers: {
                  
                    read_res: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('read_res') for the controller: workout_setup_waiting_for_workout_loader:page was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("waiting_for_workout_loaded_from_page", params);
      if (params._id === "/user/" + context.uid + "/workouts/"+context.wid){

            int_event(__info__.event_gw, "workout_ready", {});
                }
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "rest";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_waiting_for_workout_loader","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"]},"from_action":"choose_action","to_action":"rest"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "rest"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_nav: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_nav',
        root_view: 'workout_setup_nav',
        spots: ["main","content"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_start", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_setup_start");
                },
                handlers: {
                  
                    super_sets_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('super_sets_clicked') for the controller: workout_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("super_sets_clicked");
      analytics.track("super_sets_clicked");
      context.workout_setup_name = "super sets clicked";

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "muscle_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "muscle_selection"
            }]);
          
    

                    },
                  
                    normal_lifting_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('normal_lifting_clicked') for the controller: workout_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("normal_lifting_clicked");
      context.workout_program_class = "normal_lifting"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "muscle_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "muscle_selection"
            }]);
          
    

                    },
                  
                    weight_loss_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('weight_loss_clicked') for the controller: workout_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("weight_loss_clicked");
      context.workout_program_class = "circuit_training_weightloss"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "muscle_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "muscle_selection"
            }]);
          
    

                    },
                  
                    getting_toned_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('getting_toned_clicked') for the controller: workout_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("getting_toned_clicked");
      context.workout_program_class = "circuit_training_cut"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "muscle_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "muscle_selection"
            }]);
          
    

                    },
                  
                    strength_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('strength_clicked') for the controller: workout_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("strength_clicked");
      context.workout_program_class = "circuit_training_strength"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "muscle_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "muscle_selection"
            }]);
          
    

                    },
                  
                    with_dbs_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('with_dbs_clicked') for the controller: workout_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("with_dbs_clicked");
      context.workout_program_class = "body_weight"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          
    

                    },
                  
                    no_equip_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('no_equip_clicked') for the controller: workout_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("no_equip_clicked");
      context.workout_program_class = "body_weight"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          
    

                    },
                  
                    sweat_core_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('sweat_core_clicked') for the controller: workout_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("sweat_core_clicked");
      context.workout_program_class = "sweat_free"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          
    

                    },
                  
                    sweat_stretch_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('sweat_stretch_clicked') for the controller: workout_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("sweat_stretch_clicked");
      context.workout_program_class = "sweat_free_stretching"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          
    

                    },
                  
                    strength_training_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('strength_training_clicked') for the controller: workout_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("strength_training_clicked");

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "strength_training_sub";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "strength_training_sub"
            }]);
          
    

                    },
                  
                    circuit_training_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('circuit_training_clicked') for the controller: workout_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("circuit_training_clicked");

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "circuit_training_sub";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "circuit_training_sub"
            }]);
          
    

                    },
                  
                    bodyweight_training_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('bodyweight_training_clicked') for the controller: workout_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("bodyweight_training_clicked");

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "bodyweight_training_sub";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "bodyweight_training_sub"
            }]);
          
    

                    },
                  
                    hiit_training_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('hiit_training_clicked') for the controller: workout_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("hiit_training_clicked");

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "hiit_training_sub";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "hiit_training_sub"
            }]);
          
    

                    },
                  
                    athletic_training_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('athletic_training_clicked') for the controller: workout_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("athletic_training_clicked");

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "athletic_training_sub";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "athletic_training_sub"
            }]);
          
    

                    },
                  
                    sweat_free_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('sweat_free_clicked') for the controller: workout_setup_nav:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("sweat_free_clicked");

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "sweat_training_sub";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "sweat_training_sub"
            }]);
          
      context.workout_program_class = "sweat_free"
    

                    },
                  
                  
                },
              },
          
              muscle_selection: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_muscle_selection", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_setup_muscle_selection");
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav:muscle_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("back_clicked");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                    submit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('submit_clicked') for the controller: workout_setup_nav:muscle_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("submit_clicked");

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "equipment_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "equipment_selection"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              equipment_selection: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_equipment_selection", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_setup_equipment_selection");
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav:equipment_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("back_clicked");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                    submit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('submit_clicked') for the controller: workout_setup_nav:equipment_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("submit_clicked");

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              time_selection: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_time_selection", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_setup_time_selection");
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav:time_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("back_clicked");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                    next_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('next_clicked') for the controller: workout_setup_nav:time_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("next_clicked");

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "waiting_for_workout";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "waiting_for_workout"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              intensity_selection: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_intensity_selection", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_setup_intensity_selection");
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav:intensity_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("back_clicked");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                    next_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('next_clicked') for the controller: workout_setup_nav:intensity_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("next_clicked");

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "waiting_for_workout";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "waiting_for_workout"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              voice_coach: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_voice_coach", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_setup_voice_coach");
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav:voice_coach was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("back_clicked");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                    next_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('next_clicked') for the controller: workout_setup_nav:voice_coach was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("next_clicked");

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "waiting_for_workout";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "waiting_for_workout"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              waiting_for_workout: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_waiting_for_workout", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_setup_waiting_for_workout");
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav:waiting_for_workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("back_clicked");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                  
                },
              },
          
              strength_training_sub: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_strength", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_setup_strength");
                },
                handlers: {
                  
                    super_sets_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('super_sets_clicked') for the controller: workout_setup_nav:strength_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("super_sets_clicked");

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "muscle_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "muscle_selection"
            }]);
          
    

                    },
                  
                    normal_lifting_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('normal_lifting_clicked') for the controller: workout_setup_nav:strength_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("normal_lifting_clicked");
      context.workout_program_class = "normal_lifting"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "muscle_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "muscle_selection"
            }]);
          
    

                    },
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav:strength_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("back_clicked");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                  
                },
              },
          
              circuit_training_sub: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_circuit", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_setup_circuit");
                },
                handlers: {
                  
                    weight_loss_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('weight_loss_clicked') for the controller: workout_setup_nav:circuit_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("weight_loss_clicked");
      context.workout_program_class = "circuit_training_weightloss"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "muscle_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "muscle_selection"
            }]);
          
    

                    },
                  
                    strength_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('strength_clicked') for the controller: workout_setup_nav:circuit_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("strength_clicked");
      context.workout_program_class = "circuit_training_strength"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "muscle_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "muscle_selection"
            }]);
          
    

                    },
                  
                    getting_toned_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('getting_toned_clicked') for the controller: workout_setup_nav:circuit_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("getting_toned_clicked");
      context.workout_program_class = "circuit_training_cut"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "muscle_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "muscle_selection"
            }]);
          
    

                    },
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav:circuit_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("back_clicked");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                  
                },
              },
          
              bodyweight_training_sub: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_bodyweight", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_setup_bodyweight");
                },
                handlers: {
                  
                    with_dbs_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('with_dbs_clicked') for the controller: workout_setup_nav:bodyweight_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("with_dbs_clicked");
      context.workout_program_class = "body_weight"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          
    

                    },
                  
                    no_equip_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('no_equip_clicked') for the controller: workout_setup_nav:bodyweight_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("no_equip_clicked");
      context.workout_program_class = "body_weight"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          
    

                    },
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav:bodyweight_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("back_clicked");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                  
                },
              },
          
              hiit_training_sub: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_hiit", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_setup_hiit");
                },
                handlers: {
                  
                    speed_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('speed_clicked') for the controller: workout_setup_nav:hiit_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("speed_clicked");
      context.workout_program_class = "speed_hiit_(sprints)"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          
    

                    },
                  
                    endurance_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('endurance_clicked') for the controller: workout_setup_nav:hiit_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("endurance_clicked");
      context.workout_program_class = "interval_training"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          
    

                    },
                  
                    explosiveness_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('explosiveness_clicked') for the controller: workout_setup_nav:hiit_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("explosiveness_clicked");
      context.workout_program_class = "explosive_hiit_(jumps)"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          
    

                    },
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav:hiit_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("back_clicked");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                  
                },
              },
          
              athletic_training_sub: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_athletic", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_setup_athletic");
                },
                handlers: {
                  
                    jumps_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('jumps_clicked') for the controller: workout_setup_nav:athletic_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("jumps_clicked");
      context.workout_program_class = "jump_conditioning"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          
    

                    },
                  
                    speed_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('speed_clicked') for the controller: workout_setup_nav:athletic_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("speed_clicked");
      context.workout_program_class = "speed_conditioning"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          
    

                    },
                  
                    stations_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('stations_clicked') for the controller: workout_setup_nav:athletic_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("stations_clicked");
      context.workout_program_class = "stat_conditioning"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          
    

                    },
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav:athletic_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("back_clicked");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                  
                },
              },
          
              sweat_training_sub: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_sweat", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("workout_setup_sweat");
                },
                handlers: {
                  
                    core_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('core_clicked') for the controller: workout_setup_nav:sweat_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("core_clicked");
      context.workout_program_class = "sweat_free"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          
    

                    },
                  
                    stretch_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('stretch_clicked') for the controller: workout_setup_nav:sweat_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("stretch_clicked");
      context.workout_program_class = "sweat_free_stretching"

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          
    

                    },
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav:sweat_training_sub was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
      analytics.track("back_clicked");

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      strength_training_sub: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'strength_training_sub',
        root_view: 'strength_training_sub',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"strength_training_sub","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      circuit_training_sub: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'circuit_training_sub',
        root_view: 'circuit_training_sub',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"circuit_training_sub","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      bodyweight_training_sub: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'bodyweight_training_sub',
        root_view: 'bodyweight_training_sub',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"bodyweight_training_sub","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      hiit_training_sub: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'hiit_training_sub',
        root_view: 'hiit_training_sub',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"hiit_training_sub","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      athletic_training_sub: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'athletic_training_sub',
        root_view: 'athletic_training_sub',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"athletic_training_sub","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      sweat_training_sub: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'sweat_training_sub',
        root_view: 'sweat_training_sub',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"sweat_training_sub","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_start: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_start',
        root_view: 'workout_setup_start',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_start","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_voice_coach: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_voice_coach',
        root_view: 'workout_setup_voice_coach',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_voice_coach","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_intensity_selection: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_intensity_selection',
        root_view: 'workout_setup_intensity_selection',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_intensity_selection","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_nav_mobile: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_nav_mobile',
        root_view: 'workout_setup_nav_mobile',
        spots: ["main","setup","plans"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_start_mobile", __base__+1+1, {}, __base__);
            __info__.embeds[0].push(ptr);
          

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_plans_home", __base__+2+1, {}, __base__);
            __info__.embeds[1].push(ptr);
                },
                handlers: {
                  
                    strength_training_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('strength_training_clicked') for the controller: workout_setup_nav_mobile:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
            var old_action = __info__.action;
            __info__.action = "strength_training";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"index","to_action":"strength_training"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "strength_training"
            }]);
          

                    },
                  
                    circuit_training_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('circuit_training_clicked') for the controller: workout_setup_nav_mobile:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
            var old_action = __info__.action;
            __info__.action = "circuit_training";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"index","to_action":"circuit_training"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "circuit_training"
            }]);
          

                    },
                  
                    bodyweight_training_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('bodyweight_training_clicked') for the controller: workout_setup_nav_mobile:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
            var old_action = __info__.action;
            __info__.action = "bodyweight_training";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"index","to_action":"bodyweight_training"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "bodyweight_training"
            }]);
          

                    },
                  
                    hiit_training_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('hiit_training_clicked') for the controller: workout_setup_nav_mobile:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
            var old_action = __info__.action;
            __info__.action = "hiit_training";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"index","to_action":"hiit_training"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "hiit_training"
            }]);
          

                    },
                  
                    athletic_training_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('athletic_training_clicked') for the controller: workout_setup_nav_mobile:index was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
            var old_action = __info__.action;
            __info__.action = "athletic_training";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"index","to_action":"athletic_training"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "athletic_training"
            }]);
          

                    },
                  
                  
                },
              },
          
              strength_training: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_strength", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    super_sets_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('super_sets_clicked') for the controller: workout_setup_nav_mobile:strength_training was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "muscle_selection_mobile";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"strength_training","to_action":"muscle_selection_mobile"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "muscle_selection_mobile"
            }]);
          
    

                    },
                  
                    normal_lifting_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('normal_lifting_clicked') for the controller: workout_setup_nav_mobile:strength_training was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "muscle_selection_mobile";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"strength_training","to_action":"muscle_selection_mobile"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "muscle_selection_mobile"
            }]);
          
    

                    },
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav_mobile:strength_training was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"strength_training","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              circuit_training: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_circuit", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav_mobile:circuit_training was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"circuit_training","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              bodyweight_training: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_bodyweight", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav_mobile:bodyweight_training was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"bodyweight_training","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              hiit_training: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_hiit", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav_mobile:hiit_training was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"hiit_training","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              athletic_training: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_athletic", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav_mobile:athletic_training was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"athletic_training","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              muscle_selection_mobile: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_muscle_selection_mobile", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav_mobile:muscle_selection_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"muscle_selection_mobile","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
    

                    },
                  
                    submit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('submit_clicked') for the controller: workout_setup_nav_mobile:muscle_selection_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
            var old_action = __info__.action;
            __info__.action = "equipment_selection_mobile";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"muscle_selection_mobile","to_action":"equipment_selection_mobile"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "equipment_selection_mobile"
            }]);
          

                    },
                  
                  
                },
              },
          
              equipment_selection_mobile: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_equipment_selection_mobile", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav_mobile:equipment_selection_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "muscle_selection_mobile";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"equipment_selection_mobile","to_action":"muscle_selection_mobile"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "muscle_selection_mobile"
            }]);
          
    

                    },
                  
                    submit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('submit_clicked') for the controller: workout_setup_nav_mobile:equipment_selection_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
            var old_action = __info__.action;
            __info__.action = "time_selection_mobile";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"equipment_selection_mobile","to_action":"time_selection_mobile"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection_mobile"
            }]);
          

                    },
                  
                  
                },
              },
          
              time_selection_mobile: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_time_selection_mobile", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav_mobile:time_selection_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "equipment_selection_mobile";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"time_selection_mobile","to_action":"equipment_selection_mobile"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "equipment_selection_mobile"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              no_equip_time_selection_mobile: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_nav_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_time_selection_mobile", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_nav_mobile:no_equip_time_selection_mobile was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"no_equip_time_selection_mobile","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_nav_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":["strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked"],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 3; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_muscle_selection_mobile: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_muscle_selection_mobile',
        root_view: 'workout_setup_muscle_selection_mobile',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_muscle_selection_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_equipment_selection_mobile: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_equipment_selection_mobile',
        root_view: 'workout_setup_equipment_selection_mobile',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_equipment_selection_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_time_selection_mobile: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_time_selection_mobile',
        root_view: 'workout_setup_time_selection_mobile',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_time_selection_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_start_mobile: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_start_mobile',
        root_view: 'workout_setup_start_mobile',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_start_mobile","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_strength: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_strength',
        root_view: 'workout_setup_strength',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_strength","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_circuit: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_circuit',
        root_view: 'workout_setup_circuit',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_circuit","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_bodyweight: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_bodyweight',
        root_view: 'workout_setup_bodyweight',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_bodyweight","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_hiit: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_hiit',
        root_view: 'workout_setup_hiit',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_hiit","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_athletic: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_athletic',
        root_view: 'workout_setup_athletic',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_athletic","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_sweat: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_sweat',
        root_view: 'workout_setup_sweat',
        spots: ["main"],
        actions: {
          
              index: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
                },
                handlers: {
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "index";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_sweat","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["back_clicked","submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"choose_action","to_action":"index"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 1; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "index"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
      workout_setup_plan_nav: {
        __init__: function(__base__) {
          //Call service on_connect
          

          //Register this controller for every single interval timer *now*
          
            
          
            
          
            
          
            
          


          //Controller information, includes action, etc. (controller_info)
          var __info__ = tel_deref(__base__);

          //The 'context' which is user-defined
          var context = __info__.context;

          //Call global on entry
          
    //the equipment, time, and submission will react to this appropriately
    context.is_planned_workout = true;
  

        },
        __dealloc__: function(__base__) {
          var __info__ = tel_deref(__base__);

          //Recursively call dealloc
          var embeds = __info__.embeds;
          while (true) {
            for (var i = 0; i < embeds.length; ++i) {
              for (var x = 0; x < embeds[i].length; ++x) {
                tel_deref(embeds[i][x]).cte.__dealloc__(embeds[i][x]);
              }
            }

            if (__info__.stack.length > 0) {
              var slice = __info__.stack.pop();
              embeds = slice.embeds;
            } else {
              break;
            }
          }

          

          dereg_evt(__base__);
          tel_del(__base__);
        },
        name: 'workout_setup_plan_nav',
        root_view: 'workout_setup_plan_nav',
        spots: ["main","content"],
        actions: {
          
              equipment_selection: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  analytics.page("equipment")

            
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_plan_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_equipment_selection", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    submit_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('submit_clicked') for the controller: workout_setup_plan_nav:equipment_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      
            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "time_selection";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "time_selection"
            }]);
          

                    },
                  
                  
                },
              },
          
              time_selection: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_plan_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_time_selection", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
          
      analytics.page("time")
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_plan_nav:time_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                    next_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('next_clicked') for the controller: workout_setup_plan_nav:time_selection was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            //Save state
            var old_action = __info__.action;
            var old_embeds = __info__.embeds;
            __info__.stack.push({action: old_action, embeds: old_embeds});

            __info__.action = "waiting_for_workout";

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "waiting_for_workout"
            }]);
          
    

                    },
                  
                  
                },
              },
          
              waiting_for_workout: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  
              if (__base__.constructor !== Number) { throw "Embed for the controller: workout_setup_plan_nav was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
            

            var ptr = _embed("workout_setup_waiting_for_workout", __base__+1+1, context, __base__);
            __info__.embeds[0].push(ptr);
                },
                handlers: {
                  
                    back_clicked: function(__base__, params) {
                        
                          if (__base__.constructor !== Number) { throw "on('back_clicked') for the controller: workout_setup_plan_nav:waiting_for_workout was not given a number for it's __base__ pointer, but of type: " + __base__.constructor + "with the value: " + __base__};
                        

                      var __info__ = tel_deref(__base__);
                      var context = __info__.context;
                      var current_action = __info__.action;

                      

            var restore_info = __info__.stack.pop();

            //Retrieve the original action info
            var orig_action = restore_info.action;
            var orig_embeds = restore_info.embeds;

            //Save the old action
            //var old_action = __info__.action;

            //Restore the action we pushed from
            __info__.action = orig_action;

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);
              }
            }

            //Restore embeds
            __info__.embeds = orig_embeds;
          
    

                    },
                  
                  
                },
              },
          
              choose_action: {
                on_entry: function(__base__) {
                  //Controller information, includes action, etc. (controller_info)
                  var __info__ = tel_deref(__base__);

                  //The 'context' which is user-defined
                  var context = __info__.context;

                  var old_action = __info__.action;
            __info__.action = "equipment_selection";

            //HOOK_ENTRY[controller_will_goto] {"controller_name":"workout_setup_plan_nav","might_respond_to":["workout_clicked","plans_clicked","start_clicked","next_clicked","back_clicked","read_res","read_res","get_started_clicked","back_clicked","read_res","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked","read_res","exit_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","read_res","read_res","read_res","read_res","resume_plan_clicked","read_res","read_res","resume_plan_clicked","read_res","read_res","value_entered","read_res","read_res","read_res","read_res","read_res","read_res","read_res","delete_clicked","read_res","read_res","read_res","notebook_choose_metric_clicked","back_clicked","save_clicked","rest_res","error","read_res","dlink_req","read_res","dlink_req","logout_clicked","read_res","close_clicked","password_changed","read_res","read_res","read_res","start_workout","read_res","entry_modify","read_res","entry_modify","read_res","edit_clicked","read_res","read_res","cancel_clicked","save_clicked","agree_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","submit_clicked","options_clicked","back_clicked","back_clicked","back_clicked","read_res","rest_res","read_res","read_res","read_res","read_res","plan_selected","signup_clicked","rest_res","register_failed","submit_clicked","rest_res","error","login_clicked","forgot_password_clicked","rest_res","close_clicked","login_clicked","get_started_clicked","back_clicked","back_clicked","login_failed","read_res","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","entry_modify","next_clicked","read_res","next_clicked","read_res","read_res","entry_modify","read_res","read_res","entry_modify","skip_clicked","start_clicked","countdown_finished","cancel_clicked","verb_completed","verb_set_break_completed","read_res","read_res","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","read_res","hide","show","entry_modify","group_entry_changed","exercise_entry_changed","exercise_entry_changed","group_entry_changed","read_res","read_res","read_res","tts_change","read_res","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress","toggle_settings_clicked","toggle_progress_clicked","read_res","next_clicked","read_res","exit_clicked","show","hide","rest_res","equipment_toggle","rest_res","muscle_picker_a_changed","muscle_picker_b_changed","rest_res","minutes_selected","read_res","workout_ready","start_workout_clicked","rest_res","read_res","super_sets_clicked","normal_lifting_clicked","weight_loss_clicked","getting_toned_clicked","strength_clicked","with_dbs_clicked","no_equip_clicked","sweat_core_clicked","sweat_stretch_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","sweat_free_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","next_clicked","back_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked","with_dbs_clicked","no_equip_clicked","back_clicked","speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked","jumps_clicked","speed_clicked","stations_clicked","back_clicked","core_clicked","stretch_clicked","back_clicked","strength_training_clicked","circuit_training_clicked","bodyweight_training_clicked","hiit_training_clicked","athletic_training_clicked","super_sets_clicked","normal_lifting_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","submit_clicked","back_clicked","back_clicked","submit_clicked","back_clicked","next_clicked","back_clicked"],"actions_responds_to":{"plans":["workout_clicked"],"workout":["read_res","entry_modify"],"choose_action":[],"active_plan_setup":["start_clicked"],"active_plan":[],"index":[],"question":["back_clicked"],"loading":["rest_res"],"loaded":["read_res"],"setup":["back_clicked"],"home":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked","start_plan_clicked","workout_clicked"],"plan_setup":["read_res","back_clicked","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"notebook":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"team":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"settings":["read_res","notebook_clicked","team_clicked","settings_clicked","home_clicked"],"workout_not_scheduled":["read_res","resume_plan_clicked"],"workout_not_started":["read_res"],"workout_in_progress":["read_res","resume_plan_clicked"],"workout_completed":["read_res"],"choose":["notebook_choose_metric_clicked"],"notebook_metric_fabric":["back_clicked"],"splash":["dlink_req","read_res"],"user":["dlink_req","logout_clicked","read_res"],"password_reset":["close_clicked","password_changed","read_res"],"corperate_setup":["read_res"],"dashboard":["start_workout","read_res","entry_modify"],"view":["edit_clicked","read_res"],"edit":["read_res","cancel_clicked","save_clicked"],"get_started_legal":["agree_clicked","back_clicked"],"get_started_age":["back_clicked","submit_clicked"],"get_started_goal":["back_clicked","submit_clicked"],"get_started_height_gender":["back_clicked","submit_clicked"],"get_started_fitness":["back_clicked","submit_clicked"],"get_started_fitness_pref":["back_clicked","submit_clicked"],"get_started_prog":["submit_clicked","options_clicked","back_clicked"],"gs_prog_info":["back_clicked"],"signup_form":["back_clicked"],"load_listing":["read_res"],"load_suggested_plan":["rest_res","read_res"],"picker":[],"fields":["signup_clicked"],"submitted":[],"forgot_password":["close_clicked"],"login":["back_clicked"],"get_started":["back_clicked"],"wintro":["entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"gintro":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"exercise":["read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"presay":["start_clicked"],"countdown":["countdown_finished","cancel_clicked"],"verb":["verb_completed"],"set_break":["verb_set_break_completed"],"content":["tts_change","read_res"],"input":["submit_clicked","read_res","entry_modify","show_settings","hide_settings","show_progress","hide_progress"],"ready":["start_workout_clicked"],"waiting":["read_res","workout_ready"],"rest":["rest_res"],"page":["read_res"],"muscle_selection":["back_clicked","submit_clicked"],"equipment_selection":["submit_clicked"],"time_selection":["back_clicked","next_clicked"],"intensity_selection":["back_clicked","next_clicked"],"voice_coach":["back_clicked","next_clicked"],"waiting_for_workout":["back_clicked"],"strength_training_sub":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training_sub":["weight_loss_clicked","strength_clicked","getting_toned_clicked","back_clicked"],"bodyweight_training_sub":["with_dbs_clicked","no_equip_clicked","back_clicked"],"hiit_training_sub":["speed_clicked","endurance_clicked","explosiveness_clicked","back_clicked"],"athletic_training_sub":["jumps_clicked","speed_clicked","stations_clicked","back_clicked"],"sweat_training_sub":["core_clicked","stretch_clicked","back_clicked"],"strength_training":["super_sets_clicked","normal_lifting_clicked","back_clicked"],"circuit_training":["back_clicked"],"bodyweight_training":["back_clicked"],"hiit_training":["back_clicked"],"athletic_training":["back_clicked"],"muscle_selection_mobile":["back_clicked","submit_clicked"],"equipment_selection_mobile":["back_clicked","submit_clicked"],"time_selection_mobile":["back_clicked"],"no_equip_time_selection_mobile":["back_clicked"]},"from_action":"choose_action","to_action":"equipment_selection"}

            //Remove all views, we don't have to recurse because removal of a view
            //is supposed to remove *all* view controllers of that tree as well.
            var embeds = __info__.embeds;
            for (var i = 0; i < __info__.embeds.length; ++i) {
              for (var j = 0; j < __info__.embeds[i].length; ++j) {
                //Free +1 because that will be the 'main' view
                main_q.push([1, "if_free_view", embeds[i][j]+1]);

                //Call dealloc on the controller
                tel_deref(embeds[i][j]).cte.__dealloc__(embeds[i][j]);

                
                  var vp = embeds[i][j]+1;
                  //First locate spot this view belongs to in reverse hash
                  var spot = debug_ui_view_to_spot[vp];

                  //Find it's index in the spot
                  var idx = debug_ui_spot_to_views[spot].indexOf(vp);

                  //Remove it from the spot => [view]
                  debug_ui_spot_to_views[spot].splice(idx, 1);

                  //Remove it from the reverse hash
                  delete debug_ui_view_to_spot[vp];
                
              }
            }

            //Prep embeds array, embeds[0] refers to the spot bp+2 (bp is vc, bp+1 is main)
            __info__.embeds = [];
            for (var i = 1; i < 2; ++i) {
              __info__.embeds.push([]);
            }

            //Call on_entry for the new action via the singleton on_entry
            //located in ctable
            __info__.cte.actions[__info__.action].on_entry(__base__)

            //'choose_action' pseudo-action will be sent as 'null' as it's the initial state
            if (old_action === "choose_action") {
              old_action = null;
            }

            //Send off event for action change
            main_q.push([3, "if_event", __base__, "action", {
              from: old_action,
              to: "equipment_selection"
            }]);
                },
                handlers: {
                  
                  
                },
              },
          
        },
      },
  
}

  //Variables
  var vm_sessions = {};  //Currently connected clients
  var vm_n_sessions = 0;  //Number of sessions

  //Static global
  
    //Some of the shared datatypes
    ////////////////////////////////////////////////////////////////////////////////////////////
    //Cache contains a blank hash for each namespace
    vm_cache = {
      
        spec: {},
      
        local1: {},
      
        auth: {},
      
        sockio: {},
      
    };

    vm_dirty = {
      
        spec: {},
      
        local1: {},
      
        auth: {},
      
        sockio: {},
      
    };

    vm_bp_to_nmap = {};
    vm_pager_waiting_read = {
      
        spec: {},
      
        local1: {},
      
        auth: {},
      
        sockio: {},
      
    };
    vm_cache_write_sync_pending = {};

    //Notification listeners, converts ns+key to an array of base pointers
    vm_notify_map = {
      
        spec: {},
      
        local1: {},
      
        auth: {},
      
        sockio: {},
      
    };
    ////////////////////////////////////////////////////////////////////////////////////////////

    //Cache
    function vm_cache_write(ns, page) {
      
        if (vm_transaction_in_progress === false) { throw "vm_cache_write called but a transaction was not in progress. Make sure to call vm_transaction_begin and vm_transaction_end" }
        if (vm_transaction_ns !== null && vm_transaction_ns !== ns) { throw "vm_cache_write called, and is within a vm_transaction but the ns given: " + ns + " does not match the transaction ns of: " + vm_transaction_ns };
      

      //Namespace is needed for vm_transaction_end
      vm_transaction_ns = ns;

      vm_rehash_page(page);

      var old = vm_cache[ns][page._id];
      if (old) {
        //Same, don't do anything
        if (old._hash === page._hash) { return; }

        //Diff
        vm_transaction_diffs.push(vm_diff(old, page));
        vm_transaction_changed_ids.push(page._id);
      }

      vm_reindex_page(page);

      vm_dirty[ns][page._id] = page;
      vm_cache[ns][page._id] = page;

      //List of controllers to notify synchronously
      var sync_waiting_controllers = vm_cache_write_sync_pending[page._id];

      //Map that holds all controllers synchronously sent (used to avoid sending
      //those controllers that are also on vm_notify_map a second message)
      var sync_sent_map = {};
		
      //You *cannot* int_event in the middle of this function, it must be deferred
      //to the end of the function as all the code here is critical. int_event will
      //synchronously execute and can cause side effects if say the int_event causes
      //a controller to be embedded which then watches a page, it will get hit in the
      //block that looks for a vm_notify_map (which it is now apart of)
      var sync_read_res_waiting = [];
	  
      //Notify all controllers that requested to be notified synchronously
      //typically via watch(sync:)
      if (sync_waiting_controllers !== undefined) {
        for (var i = 0; i < sync_waiting_controllers.length; ++i) {
          var c = sync_waiting_controllers[i];

          //Save so we don't send the same controller during the async part if the controller
          //also happends to be part of vm_notify_map (it watched)
          sync_sent_map[c] = true;

          //Notify controller synchronously
          sync_read_res_waiting.push(c);
        }
      }

      //Try to lookup view controller(s) to notify
      var nbp = vm_notify_map[ns][page._id];
      if (nbp) {
        for (var i = 0; i < nbp.length; ++i) {
          var cbp = nbp[i];
          //Only send if we didn't just send it above in the previous
          //block synchronously
          if (sync_sent_map[cbp] === undefined) {
            int_event_defer(cbp, "read_res", page);
          }
        }
      }

      //Clear the sync_waiting_controllers
      delete vm_cache_write_sync_pending[page._id];
      
      //Now execute the synthronous int_events
      for (var i = 0; i < sync_read_res_waiting.length; ++i) {
        int_event(sync_read_res_waiting[i], "read_res", page);
      }
    }

    function vm_pageout() {
      
        //Get id_to_page mappings
        var id_to_page = vm_dirty["spec"];
        if (id_to_page) {
          var ids = Object.keys(id_to_page);

          //For each mapping, write the page
          for (var i = 0; i < ids.length; ++i) {
            var p = id_to_page[ids[i]];
disk_q.push([3, "if_per_set", "spec", ids[i], p])
          }
        }
        
        //Get id_to_page mappings
        var id_to_page = vm_dirty["local1"];
        if (id_to_page) {
          var ids = Object.keys(id_to_page);

          //For each mapping, write the page
          for (var i = 0; i < ids.length; ++i) {
            var p = id_to_page[ids[i]];
disk_q.push([3, "if_per_set", "local1", ids[i], p])
          }
        }
        
        //Get id_to_page mappings
        var id_to_page = vm_dirty["auth"];
        if (id_to_page) {
          var ids = Object.keys(id_to_page);

          //For each mapping, write the page
          for (var i = 0; i < ids.length; ++i) {
            var p = id_to_page[ids[i]];
disk_q.push([3, "if_per_set", "auth", ids[i], p])
          }
        }
        
        //Get id_to_page mappings
        var id_to_page = vm_dirty["sockio"];
        if (id_to_page) {
          var ids = Object.keys(id_to_page);

          //For each mapping, write the page
          for (var i = 0; i < ids.length; ++i) {
            var p = id_to_page[ids[i]];
disk_q.push([3, "if_per_set", "sockio", ids[i], p])
          }
        }
        

      vm_dirty = {
        
          spec: {},
        
          local1: {},
        
          auth: {},
        
          sockio: {},
        
      };
    }

    //Part of the persist module
    //res is page
    function int_per_get_res(s, ns, id, res) {
      if (ns === "__reserved__") {
        if (id === "vm_unsynced") {
          if (res === null) { return; }
          var cached_vm_unsynced = res;

          
            //Make sure disk has the old namespace
            if (cached_vm_unsynced.spec !== undefined) {
              //Get all the ids from the old namespace
              var ids = Object.keys(cached_vm_unsynced.spec)
              for (var i = 0; i < ids.length; ++i) {
                vm_unsynced.spec[ids[i]] = cached_vm_unsynced.spec[ids[i]];
              }
            }
          
            //Make sure disk has the old namespace
            if (cached_vm_unsynced.local1 !== undefined) {
              //Get all the ids from the old namespace
              var ids = Object.keys(cached_vm_unsynced.local1)
              for (var i = 0; i < ids.length; ++i) {
                vm_unsynced.local1[ids[i]] = cached_vm_unsynced.local1[ids[i]];
              }
            }
          
            //Make sure disk has the old namespace
            if (cached_vm_unsynced.auth !== undefined) {
              //Get all the ids from the old namespace
              var ids = Object.keys(cached_vm_unsynced.auth)
              for (var i = 0; i < ids.length; ++i) {
                vm_unsynced.auth[ids[i]] = cached_vm_unsynced.auth[ids[i]];
              }
            }
          
            //Make sure disk has the old namespace
            if (cached_vm_unsynced.sockio !== undefined) {
              //Get all the ids from the old namespace
              var ids = Object.keys(cached_vm_unsynced.sockio)
              for (var i = 0; i < ids.length; ++i) {
                vm_unsynced.sockio[ids[i]] = cached_vm_unsynced.sockio[ids[i]];
              }
            }
          
        }
        return;
      }

      if (res !== null) {
        //Write out to the cache
        vm_transaction_begin();
        vm_cache_write(ns, res);
        vm_transaction_end();

      } else {
        //Result was blank, signal all controllers that read synchronously
        var sync_waiting_controllers = vm_cache_write_sync_pending[id];
        if (sync_waiting_controllers !== undefined) {
          for (var i = 0; i < sync_waiting_controllers.length; ++i) {
            var c = sync_waiting_controllers[i];

            //Notify controller synchronously
            int_event(c, "read_res", {});
          }
        }

        //Remove all controllers from notification list
        delete vm_cache_write_sync_pending[id];
      }

      //Check if a pager is waiting for this read to complete a write request
      var page_awaiting_write = vm_pager_waiting_read[ns][id];
      if (page_awaiting_write !== undefined) {
        
          
            if ("spec" === ns) {
              pg_spec0_write(page_awaiting_write);
            }
          
        
          
            else if ("local1" === ns) {
              pg_mem0_write(page_awaiting_write);
            }
          
        
          
            else if ("auth" === ns) {
              pg_mem1_write(page_awaiting_write);
            }
          
        
          
            else if ("sockio" === ns) {
              pg_sockio0_write(page_awaiting_write);
            }
          
        

        //Clear waiting entry
        delete vm_pager_waiting_read[ns][id];
      }
    }

    
      vm_write_list = [];
    

    //Generic Page Helpers
    ///////////////////////////////////////////////////////////////////////////
    function vm_create_page(id) {
      if (id === undefined) {
        id = gen_id();
      }

      var page = {
        _id: id,
        _head: null,
        _next: null,
        _hash: null,
        entries: [],
        __index: {},
      };

      return page;
    }

    function vm_copy_page(page) {
      var copy = {
        _id: page._id,
        _head: page._head,
        _next: page._next,
        _hash: page._hash,
        entries: JSON.parse(JSON.stringify(page.entries)),
      };

      vm_reindex_page(copy);

      return copy;
    }

    function vm_rehash_page(page) {
      var z = 0;

      //head and next are optional
      if (page._head) { var z = crc32(0, page._head) }
      if (page._next) { z = crc32(z, page._next) }

      z = crc32(z, page._id)

      //Hash differently based on type
      var e = page.entries;
      for (var i = 0; i < e.length; ++i) {
        z = crc32(z, e[i]._sig);
      }

      page._hash = z.toString();
    }

    function vm_reindex_page(page) {
      page.__index = {};
      for (var i = 0; i < page.entries.length; ++i) {
        page.__index[page.entries[i]._id] = i;
      }
    }

    function vm_entry_with_id(page, eid) {
      var _idx = page.__index[eid];
      return page.entries[_idx];
    }

    function vm_del_entry_with_id(page, eid) {
      var _idx = page.__index[eid];
      if (_idx > -1) {
        page.entries.splice(_idx, 1);
      }
      vm_reindex_page(page);
    }

    function vm_set_entry_with_id_key_val(page, eid, key, val) {
      var _idx = page.__index[eid];

      //Do we have the entry?
      if (_idx > -1) {
        //Great, then set the id and _sig
        page.entries[_idx][key] = val;
        page.entries[_idx]._sig = gen_id();
      } else {
        //Nope, create the entry
        var entry = {_sig: gen_id(), _id: eid}
        entry[key] = val;
        page.entries.push(entry);
        vm_reindex_page(page);
      }
    }

    ///////////////////////////////////////////////////////////////////////////

    //vm_diff helpers
    ///////////////////////////////////////////////////////////////////////////
    function vm_diff(old_page, new_page) {
      var diff_log = [];
      if (old_page._head !== new_page._head) {
        diff_log.push(["HEAD_M", new_page._head])
      }

      if (old_page._next !== new_page._next) {
        diff_log.push(["NEXT_M", new_page._next])
      }

      var from_entries = old_page.entries;
      var to_entries = new_page.entries;

      //Calculated lists
      var ins = [];
      var dels = [];
      var moves = [];
      var modify = [];

      //a_prime is Union (ordered) of from
      //b_prime is Union (ordered) of to
      var a_prime = [];
      var b_prime = [];

      //Save all entry sigs
      var from_entries_sig  = [];
      for (var i = 0; i < from_entries.length; ++i) {
        from_entries_sig[from_entries[i]._id] = from_entries[i]._sig;
      }

      //Need to re-index page for the modify code which needs to know the index
      //of the id of the new entry
      vm_reindex_page(new_page);

      //Save all the entry sigs
      var to_entries_sig  = [];
      for (var i = 0; i < to_entries.length; ++i) {
        to_entries_sig[to_entries[i]._id] = to_entries[i]._sig;
      }

      //I. Calculate all elements in to_entries that are not in from_entries
      //for each one of those elements, mark it as insertion and remove them in reverse order.
      for (var i = 0; i < to_entries.length; ++i) {
        //Does the entry *not* exist in from_entries?
        var to_entry_id = to_entries[i]._id;
        if (from_entries_sig[to_entry_id] === undefined) {
          ins.push(["+", i, to_entries[i]]);
        } else {
          //The entry *does* exist, therefore it must be part of the shared
          b_prime.push(to_entries[i]._id);
        }
      }

      for (var i = 0; i < from_entries.length; ++i) {
        var from_entry_id = from_entries[i]._id;
        if (to_entries_sig[from_entry_id] === undefined) {
          dels.push(["-", from_entries[i]._id]);
        } else {
          a_prime.push(from_entries[i]._id);

          if (from_entries[i]._sig != to_entries_sig[from_entry_id]) {
            modify.push(["M", new_page.entries[new_page.__index[from_entry_id]]]);
          }
        }
      }

      //*==================================*
      //| Wild UNOPTIMIZED ALGORITHM       |
      //|                                  |
      //| appeared!                        |
      //|                                v |
      //*==================================*
      while(1) {
        var wdiff = 0;
        var wb_index;
        var wa_index;

        for (var i = 0; i < a_prime.length; ++i) {
          var b_index = b_prime.indexOf(a_prime[i]);
          var diff = b_index - i;

          if (Math.abs(diff) > Math.abs(wdiff)) {
            wdiff = diff;
            wa_index = i;
            wb_index = b_index;
          }
        }

        if (Math.abs(wdiff) > 0) {
          var r = a_prime.splice(wa_index, 1);
          a_prime.splice(wb_index, 0, r[0]);

          moves.push([">", wb_index, r[0]]);
        } else {
          break
        }
      }

      var res = diff_log.concat(dels).concat(modify).concat(moves).concat(ins);
      return res;
    }

    function vm_diff_replay(page, diff) {
      for (var i = 0; i < diff.length; ++i) {
        vm_reindex_page(page);
        var e = diff[i];

        //vm_diff type
        var type = e[0];
        if (type === "+") {
          var eindex = e[1];
          var entry = e[2];

          //Ignore insertion if an element already exists with the given id
          if (page["__index"][entry["_id"]] === undefined) {
            //Insertion
            page.entries.splice(eindex, 0, entry);
          }
        } else if (type === ">") {
          var eindex = e[1];
          var entry_id = e[2];

          var current_index = page["__index"][entry_id];
          if (current_index !== undefined) {
            var entry = page.entries.splice(current_index, 1)[0];
            page.entries.splice(eindex, 0, entry);
          }
        } else if (type === "M") {
          var entry = e[1];

          //Take out old, put in new
          if (page["__index"][entry["_id"]] !== undefined) {
            page.entries.splice(page["__index"][entry["_id"]], 1, entry);
          }
        } else if (type === "-") {
          var eid = e[1];

          var index = page.__index[eid];

          //Take out
          if (page["__index"][eid] !== undefined) {
            page.entries.splice(index, 1);
          }
        } else if (type === "HEAD_M") {
          page._head = e[1];
        } else if (type === "NEXT_M") {
          page._next = e[1];
        }
      }
    } 
    ///////////////////////////////////////////////////////////////////////////

    //Commit helpers
    ///////////////////////////////////////////////////////////////////////////
    function vm_commit(older, newer) {
      newer.__changes_id = gen_id();

      if (older.__changes && !older.__base) {
        newer.__base = older;
      } else if (older.__changes) {
        newer.__base = older.__base;
      }

      if (older.__base) {
        newer.__changes = vm_diff(older.__base, newer);
      } else {
        newer.__changes = vm_diff(older, newer);
      }
    }

    function vm_rebase(newer, older) {
      if (newer.__changes && !newer.__base) {
        
          if (newer.__changes_id === undefined) {
            throw "__changes_id did not exist on newer: " + JSON.stringify(newer) + " but it did have __changes";
          }
        
        older.__changes = newer.__changes;
        older.__changes_id = newer.__changes_id;

        vm_diff_replay(older, older.__changes);
      } else if (newer.__changes && newer.__base) {
        
          if (newer.__changes_id === undefined) {
            throw "__changes_id did not exist on newer: " + JSON.stringify(newer) + " but it did have __changes";
          }
        

        //Reconstruct the __base by playing newer.__base.__changes ontop of older (which is the base we are rebasing on)
        //Imagine that you texted a teacher changes, but are unsure whether that teacher has received those changes, meanwhile,
        //the teacher texts you a new fresh copy of the page. You must now keep track of the changes you texted her (newer.__base.__changes)
        //while still being able to create a new list of changes for any future changes that you make (as we diff pages to create the changes)
        //So we reconstruct the newer.__base page  by taking what the teacher gave us, trash the newer.__base page, but replay the changes
        //that newer.__base.__changes had onto the copy the teacher gave us. E.g. we cross out "Sally" on our list, text teacher that we crossed
        //out sally. Teacher gave us a new list that has "Bill" Crossed out. We Then take the new list and cross out "Sally" and call that our new
        //base page.
        vm_diff_replay(older, newer.__base.__changes);

        //Copy the page, we need to use the copy as a '__base' page because we want the non-copied older page to be the non-base version. (And we
        //will make it the 'non' base version by again, replaying changes from the 'newer.__changes') after setting the __base to the copy.
        var older_copy = vm_copy_page(older);
        older_copy.__changes = newer.__base.__changes;
        older_copy.__changes_id = newer.__base.__changes_id;
        vm_reindex_page(older_copy);
        older.__base = older_copy;

        //Now update the older page w/ the `newer.__changes`
        vm_diff_replay(older, newer.__changes);

        //Calculate diff for older
        older.__changes = vm_diff(older.__base, older);
        older.__changes_id = gen_id();
      }
    }

    function vm_mark_changes_synced(page, changes_id) {
      if (page.__base === undefined && changes_id === page.__changes_id) {
        delete page.__changes;
        delete page.__changes_id;
      } else if (page.__base !== undefined && changes_id === page.__base.__changes_id) {
        delete page.__base;
      }
    }
    ///////////////////////////////////////////////////////////////////////////

    //vm transaction helpers
    ///////////////////////////////////////////////////////////////////////////
    vm_transaction_in_progress = false;
    function vm_transaction_begin() {
      
        if (vm_transaction_in_progress === true) { throw "vm_transaction_begin called but a transaction was already in progress" }
      
      vm_transaction_in_progress = true;
      vm_transaction_diffs = [];
      vm_transaction_changed_ids = [];
      vm_transaction_ns = null;
    }

    function vm_transaction_end() {
      
        if (vm_transaction_in_progress === false) { throw "vm_transaction_end called but vm_transaction_begin was never called" }
      
      vm_transaction_in_progress = false;

      for (var i = 0; i < vm_transaction_changed_ids.length; ++i) {
        var page_id = vm_transaction_changed_ids[i];
        var bps = vm_notify_map[vm_transaction_ns][page_id];
        if (bps !== undefined) {
          pieces = [];
          for (var x = 0; x < vm_transaction_diffs[i].length; ++x) {
            //Get diff entry
            var diff_entry = vm_transaction_diffs[i][x];
            pieces.push(diff_entry);

            //For all listening controllers
            for (var y = 0; y < bps.length; ++y) {
              var bp = bps[y];

              if (diff_entry[0] === "M") {
                int_event_defer(bp, "entry_modify", {page_id: page_id, entry: diff_entry[1]});
              } else if (diff_entry[0] === "-") {
                int_event_defer(bp, "entry_del", {page_id: page_id, entry_id: diff_entry[1]});
              } else if (diff_entry[0] === ">") {
                var eindex = diff_entry[1];
                var eid = diff_entry[2];
                int_event_defer(bp, "entry_move", {entry_id: eid, from_page_id: page_id, to_page_id: page_id, to_page_index: eindex});
              } else if (diff_entry[0] === "+") {
                var eindex = diff_entry[1];
                var entry = diff_entry[2];
                int_event_defer(bp, "entry_ins", {page_id: page_id, index: eindex, entry: entry});
              } else if (diff_entry[0] === "NEXT_M") {
                int_event_defer(bp, "next_changed", {page_id: page_id, value: diff_entry[1]});
              } else if (diff_entry[0] === "HEAD_M") {
                int_event_defer(bp, "head_changed", {page_id: page_id, value: diff_entry[1]});
              } 
            }
          }

          //throw JSON.stringify(pieces);
        }
      }
    }
    ///////////////////////////////////////////////////////////////////////////

    //vm unsynced
    ///////////////////////////////////////////////////////////////////////////
    //Unsynced page ids to integer vm_unsynced[bp][page_id] = '0' or '1'
    //where 0 is freshly added and ignored on the first pass of the daemon
    vm_unsynced = {
      
        spec: {},
      
        local1: {},
      
        auth: {},
      
        sockio: {},
      
    };

    //Does it need to be written to disk?
    vm_unsynced_is_dirty = false;

    function vm_pg_mark_needs_sync(ns, page_id) {
      vm_unsynced_is_dirty = true;

      //Add to list
      vm_unsynced[ns][page_id] = 0;

      //Notify pager immediately (daemon will not notify pager on first tick to avoid calling pager's sync to soon)
      
        
          if ("spec" === ns) {
            pg_spec0_sync(page_id);
          }
        
      
        
          else if ("local1" === ns) {
            pg_mem0_sync(page_id);
          }
        
      
        
          else if ("auth" === ns) {
            pg_mem1_sync(page_id);
          }
        
      
        
          else if ("sockio" === ns) {
            pg_sockio0_sync(page_id);
          }
        
      
    }

    function vm_pg_unmark_needs_sync(ns, page_id) {
      vm_unsynced_is_dirty = true;

      delete vm_unsynced[ns][page_id];
    }

    function vm_pg_sync_wakeup() {
      //Iterate through all the unsynced entries an increment any entries that are 0 to 1
      
        //Get all page ids in a namespace
        var page_ids = Object.keys(vm_unsynced.spec);

        for (var i = 0; i < page_ids.length; ++i) {
          if (vm_unsynced.spec[page_ids[i]] === 0) {
            vm_unsynced.spec[page_ids[i]] = 1;
          } else {
            //Notify pager
            pg_spec0_sync(page_ids[i]);
          }
        }
      
        //Get all page ids in a namespace
        var page_ids = Object.keys(vm_unsynced.local1);

        for (var i = 0; i < page_ids.length; ++i) {
          if (vm_unsynced.local1[page_ids[i]] === 0) {
            vm_unsynced.local1[page_ids[i]] = 1;
          } else {
            //Notify pager
            pg_mem0_sync(page_ids[i]);
          }
        }
      
        //Get all page ids in a namespace
        var page_ids = Object.keys(vm_unsynced.auth);

        for (var i = 0; i < page_ids.length; ++i) {
          if (vm_unsynced.auth[page_ids[i]] === 0) {
            vm_unsynced.auth[page_ids[i]] = 1;
          } else {
            //Notify pager
            pg_mem1_sync(page_ids[i]);
          }
        }
      
        //Get all page ids in a namespace
        var page_ids = Object.keys(vm_unsynced.sockio);

        for (var i = 0; i < page_ids.length; ++i) {
          if (vm_unsynced.sockio[page_ids[i]] === 0) {
            vm_unsynced.sockio[page_ids[i]] = 1;
          } else {
            //Notify pager
            pg_sockio0_sync(page_ids[i]);
          }
        }
      
    }

    //This only pages-in the unsynced information
    //not the actual data itself, its still stored
    //in the cache
    vm_unsynced_paged_in = false;
    function vm_pg_sync_pagein() {
      //Only pages-in if necessary
      if (vm_unsynced_paged_in === false) {
        vm_unsynced_paged_in = true;

        //Send a disk read request
disk_q.push([3, "if_per_get", "vm", "__reserved__", "vm_unsynced"])
      }
    }

    function vm_pg_sync_pageout() {
      //Only page-out if necessary
      if (vm_unsynced_is_dirty === true) {
        vm_unsynced_is_dirty = false;
disk_q.push([3, "if_per_set", "__reserved__", "vm_unsynced", JSON.stringify(vm_unsynced)])
      }
    }
    ///////////////////////////////////////////////////////////////////////////
  


  //Start of vm on_wakeup
  function vm_on_wakeup() {
    //Timer related
    /////////////////////////////////////////////////////////////////////////////////////
    //The timer base pointer for incomming callout events
    vm_timer_bp = tels(1);
    reg_evt(vm_timer_bp, vm_handle_timer_events);

    //Tell the timer to notify our timer event handlers
    //The name is randomly generated for each one
    
        reg_interval(vm_timer_bp, '5_sec_e957649', 20);
    
        reg_interval(vm_timer_bp, '2_sec_5a83e20', 8);
    
    /////////////////////////////////////////////////////////////////////////////////////

    
    

    
      vm_did_wakeup = true;
    

    //Call init functions
    
      pg_spec0_init("spec", {"hello":"world"});
    
      pg_mem0_init("local1", {});
    
      pg_mem1_init("auth", {});
    
      pg_sockio0_init("sockio", {"url":"http://imac.local:3333"});
    
  

  }

  function vm_on_sleep() {
    //Do not receive anymore timer events
    dereg_evt(vm_timer_bp);

    
  

  }

  function vm_on_connect(bp) {
    var sessions = vm_sessions;
    vm_n_sessions += 1;

    //First connection
    if (vm_n_sessions === 1) {
      vm_on_wakeup();
    }

    sessions[bp] = true;
    
    vm_bp_to_nmap[bp] = {};
  

  }

  function vm_on_disconnect(bp) {
    var sessions = vm_sessions;

    vm_n_sessions -= 1;
    delete sessions[bp];

    
    //We need to remove all the entries in vm_notify_map, but we only
    //get an array of bp for each array in vm_notify_map[ns][key]...
    //So we use the inverted lookup of vm_bp_to_nmap[bp][ns][key] to get a pointer
    //to vm_notify_map[ns][key] and associated index. We then delete all the
    //entries out of vm_notify_map

    //Foreach namespace
    var nss = Object.keys(vm_bp_to_nmap[bp]);
    for (var i = 0; i < nss.length; ++i) {
      //Namespace node
      var nn = vm_bp_to_nmap[bp][nss[i]];

      //Get all keys (which are ids)
      var nnk = Object.keys(nn);

      for (var x = 0; x < nnk.length; ++x) {
        //Array contains [node (pointer to vm_notify_map[ns][key]), index] where index points to base pointer of this
        //controller in the array
        var arr = nn[nnk[x]][0]
        var idx = nn[nnk[x]][1]

        //Remove
        arr.splice(idx, 1);
      }

    }

    //Now we just clean up vm_bp_to_nmap because it's no longer used
    delete vm_bp_to_nmap[bp];
  


    //No more connections
    if (vm_n_sessions === 0) {
      vm_on_sleep();
    }

  }
  
  //'Event' handlers
  
    function vm_on_write(bp, params) {
      var sessions = vm_sessions;
      
    

    //We are going to fix the _hash on the page and __index
    vm_reindex_page(params.page);
    vm_rehash_page(params.page);

    
      vm_write_list.push(params.page);
    

    //If the page does not exist, we need to send a disk request for a read because we may
    //need to commit to the page
    if (vm_cache[params.ns][params.page._id] === undefined) {
      //Save the page into the waiting list or throw an exception if there's already a write
      //queued, at this time, we do not support multiple writes in the same frame
      if (vm_pager_waiting_read[params.ns][params.page._id] !== undefined) {
        throw "vm on_write was called multiple times within the same frame (I.e. page did not exist, so we read it from disk, but that disk read didn't come back before the page was attempted to written again). This is not terribly illegal but it can lead to undefined behavior.";
      }
      vm_pager_waiting_read[params.ns][params.page._id] = params.page;

      //Notify the disk
disk_q.push([3, "if_per_get", "vm", params.ns, params.page._id])
    } else {
      //Else, just notify the pager right away
      
        if (params.ns === "spec") {
          pg_spec0_write(params.page);
        }
      
        if (params.ns === "local1") {
          pg_mem0_write(params.page);
        }
      
        if (params.ns === "auth") {
          pg_mem1_write(params.page);
        }
      
        if (params.ns === "sockio") {
          pg_sockio0_write(params.page);
        }
      
    }
  

    }
  
    function vm_on_watch(bp, params) {
      var sessions = vm_sessions;
      
    

    //Cache entry
    var cache_entry = vm_cache[params.ns][params.id];

    //Ensure map exists
    ////////////////////////////////////////////////
    var b = vm_notify_map[params.ns][params.id];
    if (!b) {
      b = [];
      vm_notify_map[params.ns][params.id] = b;
    }

    //Check if it exists, if it's already being watched, ignore it
    var midx = vm_notify_map[params.ns][params.id].indexOf(bp)
    if (midx != -1) {
      return;
    }

    b.push(bp)
    ////////////////////////////////////////////////

    //Add to vm_bp_to_nmap
    ////////////////////////////////////////////////
    //Construct 
    if (vm_bp_to_nmap[bp][params.ns] === undefined) { vm_bp_to_nmap[bp][params.ns] = {}; }

    //Add reverse mapping, length-1 because it was just pushed
    vm_bp_to_nmap[bp][params.ns][params.id] = [b, b.length-1];

    //If cache exists, then signal controller *now* while we wait for the pager
    if (cache_entry) {
      //If sync flag is set, then send the data *now*
      if (params.sync) {
        int_event(bp, "read_res", cache_entry);
      } else {
        int_event_defer(bp, "read_res", cache_entry);
      }
    }

    //Send a request now for disk read for sync
    if (!cache_entry) {
      if (params.sync !== undefined && params.sync === true) {
        //Add ourselves to synchronous read list so the next disk read will
        //send a synchronous event to us (and then clear). We will not get the 
        //normal asynhronous read. Additionally, we may also get a `{}` page indicating
        //that the page is blank
        vm_cache_write_sync_pending[params.id] = vm_cache_write_sync_pending[params.id] || []; 
        vm_cache_write_sync_pending[params.id].push(bp);
main_q.push([3, "if_per_get", "vm", params.ns, params.id])
      } else {
disk_q.push([3, "if_per_get", "vm", params.ns, params.id])
      }
    }

    //Do not signal pager if there is a watch request already in place
    //as pager already knows; if it's equal to 1, this is the 'first'
    //watch to go through as we have no info on it but just added it
    if (vm_notify_map[params.ns][params.id].length > 1) { return; }

    //Now load the appropriate pager
    
      if (params.ns === "spec") {
        pg_spec0_watch(params.id, cache_entry);
      }
    
      if (params.ns === "local1") {
        pg_mem0_watch(params.id, cache_entry);
      }
    
      if (params.ns === "auth") {
        pg_mem1_watch(params.id, cache_entry);
      }
    
      if (params.ns === "sockio") {
        pg_sockio0_watch(params.id, cache_entry);
      }
    
  

    }
  
    function vm_on_read_sync(bp, params) {
      var sessions = vm_sessions;
      
    
      if (params.id === undefined) {
        throw "You need to pass an id for the page in read_sync request";
      }

      if (params.ns === undefined) {
        throw "You need to pass an ns for the page in read_sync request";
      }
    

    var cache_entry = vm_cache[params.ns][params.id];
    if (cache_entry !== undefined) {
      int_event(bp, "read_res", cache_entry);
    } else {
      //Set this controller as awaiting as synchronous response
      vm_cache_write_sync_pending[params.id] = vm_cache_write_sync_pending[params.id] || []; 
      vm_cache_write_sync_pending[params.id].push(bp);
main_q.push([3, "if_per_get", "vm", params.ns, params.id])
    }
  

    }
  
    function vm_on_unwatch(bp, params) {
      var sessions = vm_sessions;
      
    

    //It won't have an array if it was never watched
    if (vm_notify_map[params.ns][params.id] === undefined) {
      return;
    }

    //Get the position of bp in the watch array, this may not exist, in which case
    //this controller is not actually watching it.
    var midx = vm_notify_map[params.ns][params.id].indexOf(bp)
    if (midx === -1) {
      return;
    }

    vm_notify_map[params.ns][params.id].splice(midx, 1);
    
    //Remove from notify map if no entries exist
    if (vm_notify_map[params.ns][params.id].length === 0) { delete vm_notify_map[params.ns][params.id]; }

    delete vm_bp_to_nmap[bp][params.ns][params.id];

    
      if (params.ns === "spec") {
        pg_spec0_unwatch(params.id);
      }
    
      if (params.ns === "local1") {
        pg_mem0_unwatch(params.id);
      }
    
      if (params.ns === "auth") {
        pg_mem1_unwatch(params.id);
      }
    
      if (params.ns === "sockio") {
        pg_sockio0_unwatch(params.id);
      }
    
  

    }
  

  //Timer receivers
  /////////////////////////////////////////////////////////////////////
  function vm_handle_timer_events(ep, ename, info) {
    var sessions = vm_sessions;

    
        if (ename === '5_sec_e957649') {
          
    vm_pageout();
    vm_pg_sync_wakeup();
    vm_pg_sync_pageout();
  

        }
    
        if (ename === '2_sec_5a83e20') {
          
    vm_pg_sync_pagein();
  

        }
    
  }
  /////////////////////////////////////////////////////////////////////

  //Variables
  var rest_sessions = {};  //Currently connected clients
  var rest_n_sessions = 0;  //Number of sessions

  //Static global
  
    rest_in_flight = {}

    function rest_cb(tp, success, info) {
      var e = rest_in_flight[tp];
      var bp = e[0];
      var path = e[1];

      int_event(bp, "rest_res", {
        path: path,
        res: info
      });

      tel_del(tp);
    }
  


  //Start of rest on_wakeup
  function rest_on_wakeup() {
    //Timer related
    /////////////////////////////////////////////////////////////////////////////////////
    //The timer base pointer for incomming callout events
    rest_timer_bp = tels(1);
    reg_evt(rest_timer_bp, rest_handle_timer_events);

    //Tell the timer to notify our timer event handlers
    //The name is randomly generated for each one
    
    /////////////////////////////////////////////////////////////////////////////////////

    
  

  }

  function rest_on_sleep() {
    //Do not receive anymore timer events
    dereg_evt(rest_timer_bp);

    
  

  }

  function rest_on_connect(bp) {
    var sessions = rest_sessions;
    rest_n_sessions += 1;

    //First connection
    if (rest_n_sessions === 1) {
      rest_on_wakeup();
    }

    sessions[bp] = true;
    
  

  }

  function rest_on_disconnect(bp) {
    var sessions = rest_sessions;

    rest_n_sessions -= 1;
    delete sessions[bp];

    
  


    //No more connections
    if (rest_n_sessions === 0) {
      rest_on_sleep();
    }

  }
  
  //'Event' handlers
  
    function rest_on_get(bp, params) {
      var sessions = rest_sessions;
      
    
      if (params.path === undefined) {
        throw "rest_service, no path given in get request";
      }

      if (params.params === undefined) {
        throw "rest_service, no params given in get request";
      }
    

    var tp = tel_reg(rest_cb);
    rest_in_flight[tp] = [bp, params.path];
net_q.push([4, "if_net_req", "GET", "http://imac.local:4567/"+params.path, params.params, tp])
  

    }
  

  //Timer receivers
  /////////////////////////////////////////////////////////////////////
  function rest_handle_timer_events(ep, ename, info) {
    var sessions = rest_sessions;

    
  }
  /////////////////////////////////////////////////////////////////////

  //Variables
  var factive_sessions = {};  //Currently connected clients
  var factive_n_sessions = 0;  //Number of sessions

  //Static global
  

  //Start of factive on_wakeup
  function factive_on_wakeup() {
    //Timer related
    /////////////////////////////////////////////////////////////////////////////////////
    //The timer base pointer for incomming callout events
    factive_timer_bp = tels(1);
    reg_evt(factive_timer_bp, factive_handle_timer_events);

    //Tell the timer to notify our timer event handlers
    //The name is randomly generated for each one
    
    /////////////////////////////////////////////////////////////////////////////////////

    
  }

  function factive_on_sleep() {
    //Do not receive anymore timer events
    dereg_evt(factive_timer_bp);

    
  }

  function factive_on_connect(bp) {
    var sessions = factive_sessions;
    factive_n_sessions += 1;

    //First connection
    if (factive_n_sessions === 1) {
      factive_on_wakeup();
    }

    sessions[bp] = true;
    
    
  

  }

  function factive_on_disconnect(bp) {
    var sessions = factive_sessions;

    factive_n_sessions -= 1;
    delete sessions[bp];

    

    //No more connections
    if (factive_n_sessions === 0) {
      factive_on_sleep();
    }

  }
  
  //'Event' handlers
  
    function factive_on_play(bp, params) {
      var sessions = factive_sessions;
      
    console.log("Trying to play...");

    var info = {
      ui_text: "",
    };
    int_event_defer(bp, "tts_change", info);
  

    }
  

  //Timer receivers
  /////////////////////////////////////////////////////////////////////
  function factive_handle_timer_events(ep, ename, info) {
    var sessions = factive_sessions;

    
  }
  /////////////////////////////////////////////////////////////////////

  //Variables
  var dlink_sessions = {};  //Currently connected clients
  var dlink_n_sessions = 0;  //Number of sessions

  //Static global
  
    //Static from the dlink module itself, this is a sister service
    function dlink_notify_handler(url, params) {
      //Notify all view controllers
      var cbps = Object.keys(dlink_sessions);
      var einfo = {url: url, params: params};
      for (var i = 0; i < cbps.length; ++i) {
        int_event_defer(parseInt(cbps[i]), "dlink_req", einfo);
      }
    }
  


  //Start of dlink on_wakeup
  function dlink_on_wakeup() {
    //Timer related
    /////////////////////////////////////////////////////////////////////////////////////
    //The timer base pointer for incomming callout events
    dlink_timer_bp = tels(1);
    reg_evt(dlink_timer_bp, dlink_handle_timer_events);

    //Tell the timer to notify our timer event handlers
    //The name is randomly generated for each one
    
    /////////////////////////////////////////////////////////////////////////////////////

    
 

  }

  function dlink_on_sleep() {
    //Do not receive anymore timer events
    dereg_evt(dlink_timer_bp);

    
  

  }

  function dlink_on_connect(bp) {
    var sessions = dlink_sessions;
    dlink_n_sessions += 1;

    //First connection
    if (dlink_n_sessions === 1) {
      dlink_on_wakeup();
    }

    sessions[bp] = true;
    
  

  }

  function dlink_on_disconnect(bp) {
    var sessions = dlink_sessions;

    dlink_n_sessions -= 1;
    delete sessions[bp];

    
  


    //No more connections
    if (dlink_n_sessions === 0) {
      dlink_on_sleep();
    }

  }
  
  //'Event' handlers
  

  //Timer receivers
  /////////////////////////////////////////////////////////////////////
  function dlink_handle_timer_events(ep, ename, info) {
    var sessions = dlink_sessions;

    
  }
  /////////////////////////////////////////////////////////////////////

var CryptoJS=CryptoJS||function(a,m){var r={},f=r.lib={},g=function(){},l=f.Base={extend:function(a){g.prototype=this;var b=new g;a&&b.mixIn(a);b.hasOwnProperty("init")||(b.init=function(){b.$super.init.apply(this,arguments)});b.init.prototype=b;b.$super=this;return b},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var b in a)a.hasOwnProperty(b)&&(this[b]=a[b]);a.hasOwnProperty("toString")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},
p=f.WordArray=l.extend({init:function(a,b){a=this.words=a||[];this.sigBytes=b!=m?b:4*a.length},toString:function(a){return(a||q).stringify(this)},concat:function(a){var b=this.words,d=a.words,c=this.sigBytes;a=a.sigBytes;this.clamp();if(c%4)for(var j=0;j<a;j++)b[c+j>>>2]|=(d[j>>>2]>>>24-8*(j%4)&255)<<24-8*((c+j)%4);else if(65535<d.length)for(j=0;j<a;j+=4)b[c+j>>>2]=d[j>>>2];else b.push.apply(b,d);this.sigBytes+=a;return this},clamp:function(){var n=this.words,b=this.sigBytes;n[b>>>2]&=4294967295<<
32-8*(b%4);n.length=a.ceil(b/4)},clone:function(){var a=l.clone.call(this);a.words=this.words.slice(0);return a},random:function(n){for(var b=[],d=0;d<n;d+=4)b.push(4294967296*a.random()|0);return new p.init(b,n)}}),y=r.enc={},q=y.Hex={stringify:function(a){var b=a.words;a=a.sigBytes;for(var d=[],c=0;c<a;c++){var j=b[c>>>2]>>>24-8*(c%4)&255;d.push((j>>>4).toString(16));d.push((j&15).toString(16))}return d.join("")},parse:function(a){for(var b=a.length,d=[],c=0;c<b;c+=2)d[c>>>3]|=parseInt(a.substr(c,
2),16)<<24-4*(c%8);return new p.init(d,b/2)}},G=y.Latin1={stringify:function(a){var b=a.words;a=a.sigBytes;for(var d=[],c=0;c<a;c++)d.push(String.fromCharCode(b[c>>>2]>>>24-8*(c%4)&255));return d.join("")},parse:function(a){for(var b=a.length,d=[],c=0;c<b;c++)d[c>>>2]|=(a.charCodeAt(c)&255)<<24-8*(c%4);return new p.init(d,b)}},fa=y.Utf8={stringify:function(a){try{return decodeURIComponent(escape(G.stringify(a)))}catch(b){throw Error("Malformed UTF-8 data");}},parse:function(a){return G.parse(unescape(encodeURIComponent(a)))}},
h=f.BufferedBlockAlgorithm=l.extend({reset:function(){this._data=new p.init;this._nDataBytes=0},_append:function(a){"string"==typeof a&&(a=fa.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(n){var b=this._data,d=b.words,c=b.sigBytes,j=this.blockSize,l=c/(4*j),l=n?a.ceil(l):a.max((l|0)-this._minBufferSize,0);n=l*j;c=a.min(4*n,c);if(n){for(var h=0;h<n;h+=j)this._doProcessBlock(d,h);h=d.splice(0,n);b.sigBytes-=c}return new p.init(h,c)},clone:function(){var a=l.clone.call(this);
a._data=this._data.clone();return a},_minBufferSize:0});f.Hasher=h.extend({cfg:l.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){h.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(b,d){return(new a.init(d)).finalize(b)}},_createHmacHelper:function(a){return function(b,d){return(new ga.HMAC.init(a,
d)).finalize(b)}}});var ga=r.algo={};return r}(Math);
(function(a){var m=CryptoJS,r=m.lib,f=r.Base,g=r.WordArray,m=m.x64={};m.Word=f.extend({init:function(a,p){this.high=a;this.low=p}});m.WordArray=f.extend({init:function(l,p){l=this.words=l||[];this.sigBytes=p!=a?p:8*l.length},toX32:function(){for(var a=this.words,p=a.length,f=[],q=0;q<p;q++){var G=a[q];f.push(G.high);f.push(G.low)}return g.create(f,this.sigBytes)},clone:function(){for(var a=f.clone.call(this),p=a.words=this.words.slice(0),g=p.length,q=0;q<g;q++)p[q]=p[q].clone();return a}})})();
(function(){function a(){return g.create.apply(g,arguments)}for(var m=CryptoJS,r=m.lib.Hasher,f=m.x64,g=f.Word,l=f.WordArray,f=m.algo,p=[a(1116352408,3609767458),a(1899447441,602891725),a(3049323471,3964484399),a(3921009573,2173295548),a(961987163,4081628472),a(1508970993,3053834265),a(2453635748,2937671579),a(2870763221,3664609560),a(3624381080,2734883394),a(310598401,1164996542),a(607225278,1323610764),a(1426881987,3590304994),a(1925078388,4068182383),a(2162078206,991336113),a(2614888103,633803317),
a(3248222580,3479774868),a(3835390401,2666613458),a(4022224774,944711139),a(264347078,2341262773),a(604807628,2007800933),a(770255983,1495990901),a(1249150122,1856431235),a(1555081692,3175218132),a(1996064986,2198950837),a(2554220882,3999719339),a(2821834349,766784016),a(2952996808,2566594879),a(3210313671,3203337956),a(3336571891,1034457026),a(3584528711,2466948901),a(113926993,3758326383),a(338241895,168717936),a(666307205,1188179964),a(773529912,1546045734),a(1294757372,1522805485),a(1396182291,
2643833823),a(1695183700,2343527390),a(1986661051,1014477480),a(2177026350,1206759142),a(2456956037,344077627),a(2730485921,1290863460),a(2820302411,3158454273),a(3259730800,3505952657),a(3345764771,106217008),a(3516065817,3606008344),a(3600352804,1432725776),a(4094571909,1467031594),a(275423344,851169720),a(430227734,3100823752),a(506948616,1363258195),a(659060556,3750685593),a(883997877,3785050280),a(958139571,3318307427),a(1322822218,3812723403),a(1537002063,2003034995),a(1747873779,3602036899),
a(1955562222,1575990012),a(2024104815,1125592928),a(2227730452,2716904306),a(2361852424,442776044),a(2428436474,593698344),a(2756734187,3733110249),a(3204031479,2999351573),a(3329325298,3815920427),a(3391569614,3928383900),a(3515267271,566280711),a(3940187606,3454069534),a(4118630271,4000239992),a(116418474,1914138554),a(174292421,2731055270),a(289380356,3203993006),a(460393269,320620315),a(685471733,587496836),a(852142971,1086792851),a(1017036298,365543100),a(1126000580,2618297676),a(1288033470,
3409855158),a(1501505948,4234509866),a(1607167915,987167468),a(1816402316,1246189591)],y=[],q=0;80>q;q++)y[q]=a();f=f.SHA512=r.extend({_doReset:function(){this._hash=new l.init([new g.init(1779033703,4089235720),new g.init(3144134277,2227873595),new g.init(1013904242,4271175723),new g.init(2773480762,1595750129),new g.init(1359893119,2917565137),new g.init(2600822924,725511199),new g.init(528734635,4215389547),new g.init(1541459225,327033209)])},_doProcessBlock:function(a,f){for(var h=this._hash.words,
g=h[0],n=h[1],b=h[2],d=h[3],c=h[4],j=h[5],l=h[6],h=h[7],q=g.high,m=g.low,r=n.high,N=n.low,Z=b.high,O=b.low,$=d.high,P=d.low,aa=c.high,Q=c.low,ba=j.high,R=j.low,ca=l.high,S=l.low,da=h.high,T=h.low,v=q,s=m,H=r,E=N,I=Z,F=O,W=$,J=P,w=aa,t=Q,U=ba,K=R,V=ca,L=S,X=da,M=T,x=0;80>x;x++){var B=y[x];if(16>x)var u=B.high=a[f+2*x]|0,e=B.low=a[f+2*x+1]|0;else{var u=y[x-15],e=u.high,z=u.low,u=(e>>>1|z<<31)^(e>>>8|z<<24)^e>>>7,z=(z>>>1|e<<31)^(z>>>8|e<<24)^(z>>>7|e<<25),D=y[x-2],e=D.high,k=D.low,D=(e>>>19|k<<13)^
(e<<3|k>>>29)^e>>>6,k=(k>>>19|e<<13)^(k<<3|e>>>29)^(k>>>6|e<<26),e=y[x-7],Y=e.high,C=y[x-16],A=C.high,C=C.low,e=z+e.low,u=u+Y+(e>>>0<z>>>0?1:0),e=e+k,u=u+D+(e>>>0<k>>>0?1:0),e=e+C,u=u+A+(e>>>0<C>>>0?1:0);B.high=u;B.low=e}var Y=w&U^~w&V,C=t&K^~t&L,B=v&H^v&I^H&I,ha=s&E^s&F^E&F,z=(v>>>28|s<<4)^(v<<30|s>>>2)^(v<<25|s>>>7),D=(s>>>28|v<<4)^(s<<30|v>>>2)^(s<<25|v>>>7),k=p[x],ia=k.high,ea=k.low,k=M+((t>>>14|w<<18)^(t>>>18|w<<14)^(t<<23|w>>>9)),A=X+((w>>>14|t<<18)^(w>>>18|t<<14)^(w<<23|t>>>9))+(k>>>0<M>>>
0?1:0),k=k+C,A=A+Y+(k>>>0<C>>>0?1:0),k=k+ea,A=A+ia+(k>>>0<ea>>>0?1:0),k=k+e,A=A+u+(k>>>0<e>>>0?1:0),e=D+ha,B=z+B+(e>>>0<D>>>0?1:0),X=V,M=L,V=U,L=K,U=w,K=t,t=J+k|0,w=W+A+(t>>>0<J>>>0?1:0)|0,W=I,J=F,I=H,F=E,H=v,E=s,s=k+e|0,v=A+B+(s>>>0<k>>>0?1:0)|0}m=g.low=m+s;g.high=q+v+(m>>>0<s>>>0?1:0);N=n.low=N+E;n.high=r+H+(N>>>0<E>>>0?1:0);O=b.low=O+F;b.high=Z+I+(O>>>0<F>>>0?1:0);P=d.low=P+J;d.high=$+W+(P>>>0<J>>>0?1:0);Q=c.low=Q+t;c.high=aa+w+(Q>>>0<t>>>0?1:0);R=j.low=R+K;j.high=ba+U+(R>>>0<K>>>0?1:0);S=l.low=
S+L;l.high=ca+V+(S>>>0<L>>>0?1:0);T=h.low=T+M;h.high=da+X+(T>>>0<M>>>0?1:0)},_doFinalize:function(){var a=this._data,f=a.words,h=8*this._nDataBytes,g=8*a.sigBytes;f[g>>>5]|=128<<24-g%32;f[(g+128>>>10<<5)+30]=Math.floor(h/4294967296);f[(g+128>>>10<<5)+31]=h;a.sigBytes=4*f.length;this._process();return this._hash.toX32()},clone:function(){var a=r.clone.call(this);a._hash=this._hash.clone();return a},blockSize:32});m.SHA512=r._createHelper(f);m.HmacSHA512=r._createHmacHelper(f)})();

//Calculate HH:MM:SS from a seconds count
function __time_calc_hh_mm_ss(totalSec) {
  var hours = parseInt( totalSec / 3600 ) % 24;
  var minutes = parseInt( totalSec / 60 ) % 60;
  var seconds = totalSec % 60;

  var result = (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds  < 10 ? "0" + seconds : seconds);

  return result;
}

function wad_group_names(wad) {
  var group_names = [];
  for (var i = 0; i < wad.members.length; ++i) {
    if (wad.members[i].type == "group_phrase") {
      group_names.push(wad.members[i]["group"]["ui_title"])
    }
  }

  return group_names;
}

function wad_short_group_names(wad) {
  var short_group_names = [];
  var group_names = wad_group_names(wad);
  for (var i = 0; i < group_names.length; ++i) {
    short_group_names.push(group_names[i].substr(0, 2));
  }

  return short_group_names;
}

function group_exercise_count(wad, i) {
  return wad.members.filter(function(e) { return e.type == "group_phrase"})[i].group.members.filter(function(e) { return e.type == "exercise_phrase"}).length
}

function group_exercise_duration_mins(wad, i) {
  var total = 0;
  wad.members[i].group.members.filter(function(e) { return e.type == "exercise_phrase"}).forEach(function(e) {
    total += parseInt(e.seconds/60.0);
  });

  return total;
}

function group_exercise_images(wad, i) {
  images = [];
  wad.members[i].group.members.filter(function(e) { return e.type == "exercise_phrase"}).forEach(function(e) {
    images.push(e.exercise.image_url)
  });

  return images;
}

function get_exercise_phrase(wad, gi, ei) {
  window._wad = wad;
  window._gi = gi;
  window._ei = ei;
  return wad.members.filter(function(e) { return e.type == "group_phrase"})[gi].group.members.filter(function(e) { return e.type == "exercise_phrase"})[ei];
}

//Temporary wad
//
wad = {
	"program_class_tag": "circuit_training_strength",
	"name": "Cir Stre C+Bi 1",
	"related_tags": ["chest", "biceps"],
	"_id": "2691a2a508b3ed9c829b89c66efd9296",
	"members": [{
		"type": "group_phrase",
		"group_tag": "warm_up_c,_s,_b_3",
		"repeat_count": 1,
		"intra_repeat_break_seconds": 0,
		"group": {
			"work_seconds": 200,
			"ui_title": "Warm Up",
			"name": "Warm Up C, S, B 3",
			"seconds": 240,
			"_id": "2ec175e98eb71dea3b5ffabd53948d2d",
			"related_tags": "[\"warmup\"]",
			"members": [{
				"type": "exercise_phrase",
				"exercise_tag": "2_minute_jog",
				"verb_type": "seconds",
				"seconds": 120,
				"exercise": {
					"ui_title": "2 Minute Jog",
					"name": "2 Minute Jog",
					"seconds_per_rep": "3.5",
					"_id": "7d6f9899ef1e930519ad694129cf84bf",
					"ui_title_speech": "2 minute jog",
					"tag": "2_minute_jog",
					"one_sided": "false",
					"equipment": "[]",
					"image_url": "http://162e2d3f0c198620adbd-cb0bd6add7ac33a8441063931d35466b.r11.cf1.rackcdn.com/running.gif",
					"muscle_group": "cardio",
					"comments": "done bs",
					"last_updated": "1405959809",
					"description": "Jog for 2 minutes while taking as little breaks as possible",
					"has_weight": "false",
					"_equipment": []
				}
			}, {
				"type": "break",
				"seconds": 10
			}, {
				"type": "exercise_phrase",
				"exercise_tag": "forward_wind_mills",
				"verb_type": "seconds",
				"seconds": 20,
				"exercise": {
					"ui_title": "Forward Wind Mills",
					"name": "Forward Wind Mills",
					"seconds_per_rep": "3.5",
					"_id": "f8779643a9a123bec2031a189895ffc9",
					"ui_title_speech": "Forward wind mills",
					"tag": "forward_wind_mills",
					"one_sided": "true",
					"equipment": "[]",
					"image_url": "http://9278062bc520c24294bf-55a583b59fc0fdc73f2639f4f9d59bf5.r9.cf1.rackcdn.com/onearmwindmillfront.gif",
					"muscle_group": "warmup",
					"comments": "done warmup",
					"last_updated": "1404419226",
					"description": "Extend your arms out to your side so that they are parallel to the ground. Start rotating your arms in big circles forwards for prescribed amount of reps or time",
					"has_weight": "false",
					"_equipment": []
				}
			}, {
				"type": "break",
				"seconds": 10
			}, {
				"type": "exercise_phrase",
				"exercise_tag": "backwards_wind_mills",
				"verb_type": "seconds",
				"seconds": 20,
				"exercise": {
					"ui_title": "Back Wind Mills",
					"name": "Backwards Wind Mills",
					"seconds_per_rep": "3.5",
					"_id": "f261efb964d71f9e320c9dbf7e19be1a",
					"ui_title_speech": "Backwards wind mills",
					"tag": "backwards_wind_mills",
					"one_sided": "true",
					"equipment": "[]",
					"image_url": "http://9278062bc520c24294bf-55a583b59fc0fdc73f2639f4f9d59bf5.r9.cf1.rackcdn.com/onearmwindmillback.gif",
					"muscle_group": "warmup",
					"comments": "done warmup",
					"last_updated": "1404419278",
					"description": "Extend your arms out to your side so that they are parallel to the ground. Start rotating your arms in big circles backwards for prescribed amount of reps or time",
					"has_weight": "false",
					"_equipment": []
				}
			}, {
				"type": "break",
				"seconds": 10
			}, {
				"type": "exercise_phrase",
				"exercise_tag": "jumping_jacks",
				"verb_type": "seconds",
				"seconds": 20,
				"exercise": {
					"ui_title": "Jumping Jacks",
					"name": "Jumping Jacks",
					"seconds_per_rep": "3.5",
					"_id": "91e315d386ef251a910b8d4b1b779f5d",
					"ui_title_speech": "Jumping jacks",
					"tag": "jumping_jacks",
					"one_sided": "false",
					"equipment": "[]",
					"image_url": "http://fafd177d177f46c24d92-537e8f6e3e51d21a07cfa2a78ea42f90.r96.cf1.rackcdn.com/jumpingjacks.gif",
					"muscle_group": "cardio",
					"comments": "done",
					"last_updated": "1404084606",
					"description": "Do jumping jacks for the prescribed amount of time or reps",
					"has_weight": "false",
					"_equipment": []
				}
			}, {
				"type": "break",
				"seconds": 10
			}, {
				"type": "exercise_phrase",
				"exercise_tag": "wide_leg_hip_twists",
				"verb_type": "seconds",
				"seconds": 20,
				"exercise": {
					"ui_title": "Wide Leg Hip Twists",
					"name": "Wide Leg Hip Twists",
					"seconds_per_rep": "3.5",
					"_id": "e6a16810ba0408b70eb74737e7978e23",
					"ui_title_speech": "Wide leg hip twists",
					"tag": "wide_leg_hip_twists",
					"one_sided": "false",
					"equipment": "[]",
					"image_url": "http://162e2d3f0c198620adbd-cb0bd6add7ac33a8441063931d35466b.r11.cf1.rackcdn.com/waist-spins.gif",
					"muscle_group": "warmup",
					"comments": "done warmup cant",
					"last_updated": "1405181221",
					"description": "Widen your stance so that your feet are outside of your shoulder width and put your hands on your hips. Roll your hips forward and around like you are trying to keep a hoola hoop up in one direction then repeat in the other direction. Do the prescribed amount of twists in each direction",
					"has_weight": "false",
					"_equipment": []
				}
			}],
			"repeat_count": "1",
			"ui_title_speech": "Warm up",
			"tag": "warm_up_c,_s,_b_3",
			"break_seconds": 40,
			"exemplar": "true",
			"work_break_timing": [
				[0.0, 2],
				[0.5, 0],
				[0.5416666666666666, 2],
				[0.625, 0],
				[0.6666666666666666, 2],
				[0.75, 0],
				[0.7916666666666666, 2],
				[0.875, 0],
				[0.9166666666666666, 2]
			],
			"last_updated": "1405368705"
		}
	}, {
		"type": "break",
		"seconds": 60
	}, {
		"type": "group_phrase",
		"group_tag": "circuit_lifting_c+bi_1_(a).5cccc5967a5bd5b2dd1dacd4fb84b538",
		"repeat_count": 3,
		"intra_repeat_break_seconds": 90,
		"group": {
			"work_seconds": 80,
			"ui_title": "Chest & Biceps",
			"name": "Circuit Lifting C+Bi 1 (A)",
			"seconds": 125,
			"related_tags": "[]",
			"_id": "18ef9010d6a24a03c331190f2f2809ce",
			"members": [{
				"type": "exercise_phrase",
				"exercise_tag": "dumbbell_flat_bench",
				"verb_type": "sets_reps",
				"sets": 1,
				"reps": 10,
				"set_break_seconds": 20,
				"exercise": {
					"ui_title": "Db Flat Bench",
					"name": "Dumbbell Flat Bench",
					"seconds_per_rep": "3.5",
					"_id": "295d082dcb903b71f32b32aef056df7d",
					"ui_title_speech": "Dumbbell flat bench",
					"tag": "dumbbell_flat_bench",
					"one_sided": "false",
					"equipment": "[\"bench\",\"dumbbells\"]",
					"image_url": "http://3eedee86686b5cabf87f-6ce4da06081ec0ee0c38a2cf35d4f5db.r39.cf1.rackcdn.com/dbbench.gif",
					"muscle_group": "chest",
					"comments": "done",
					"last_updated": "1404835701",
					"description": "While laying on a flat bench bring the dumbbells to your chest and push them back upwards. You should hold the dumbbells just outside shoulder width and at the top of the rep the dumbbells should be touching directly above the center of your chest. Keep your elbows by your side to avoid shoulder injury",
					"has_weight": "false",
					"_equipment": [{
						"ui_title": "Bench",
						"image_url": "http://res.cloudinary.com/fittr/image/upload/v1407606634/bijwnkyali0kqknribe0.png",
						"last_updated": "1407606633",
						"_id": "53dd33d80f55f222383d9ab428fb7ec1",
						"mutually_exclusive_with": "[]",
						"has_weight": "false",
						"tag": "bench"
					}, {
						"ui_title": "Dumbbells",
						"image_url": "http://res.cloudinary.com/fittr/image/upload/v1407606601/ajw1tfc3wlydc7w1wehc.png",
						"last_updated": "1412905211",
						"_id": "33c5686285a8ca525e46baf836d15c26",
						"mutually_exclusive_with": "[]",
						"has_weight": "true",
						"tag": "dumbbells"
					}]
				}
			}, {
				"type": "break",
				"seconds": 15
			}, {
				"type": "exercise_phrase",
				"exercise_tag": "supermans",
				"verb_type": "sets_reps",
				"sets": 1,
				"reps": 10,
				"set_break_seconds": 20,
				"exercise": {
					"ui_title": "Supermans",
					"name": "Supermans",
					"seconds_per_rep": "3.5",
					"_id": "89ecda5590bc2d0cd293c999a1b1cc01",
					"ui_title_speech": "Supermans",
					"tag": "supermans",
					"one_sided": "false",
					"equipment": "[]",
					"image_url": "http://fafd177d177f46c24d92-537e8f6e3e51d21a07cfa2a78ea42f90.r96.cf1.rackcdn.com/supermans.gif",
					"muscle_group": "back",
					"comments": "done",
					"last_updated": "1404863794",
					"description": "Lie flat on your stomach with your arms straight and above your head. Raise your straight arms and legs at the same time slowly. Your legs and arms should only rise off the ground about a foot depending on how flexible your are",
					"has_weight": "false",
					"_equipment": []
				}
			}, {
				"type": "break",
				"seconds": 15
			}, {
				"type": "exercise_phrase",
				"exercise_tag": "dumbbell_flat_bench",
				"verb_type": "sets_reps",
				"sets": 1,
				"reps": 10,
				"set_break_seconds": 20,
				"exercise": {
					"ui_title": "Db Flat Bench",
					"name": "Dumbbell Flat Bench",
					"seconds_per_rep": "3.5",
					"_id": "295d082dcb903b71f32b32aef056df7d",
					"ui_title_speech": "Dumbbell flat bench",
					"tag": "dumbbell_flat_bench",
					"one_sided": "false",
					"equipment": "[\"bench\",\"dumbbells\"]",
					"image_url": "http://3eedee86686b5cabf87f-6ce4da06081ec0ee0c38a2cf35d4f5db.r39.cf1.rackcdn.com/dbbench.gif",
					"muscle_group": "chest",
					"comments": "done",
					"last_updated": "1404835701",
					"description": "While laying on a flat bench bring the dumbbells to your chest and push them back upwards. You should hold the dumbbells just outside shoulder width and at the top of the rep the dumbbells should be touching directly above the center of your chest. Keep your elbows by your side to avoid shoulder injury",
					"has_weight": "false",
					"_equipment": [{
						"ui_title": "Bench",
						"image_url": "http://res.cloudinary.com/fittr/image/upload/v1407606634/bijwnkyali0kqknribe0.png",
						"last_updated": "1407606633",
						"_id": "53dd33d80f55f222383d9ab428fb7ec1",
						"mutually_exclusive_with": "[]",
						"has_weight": "false",
						"tag": "bench"
					}, {
						"ui_title": "Dumbbells",
						"image_url": "http://res.cloudinary.com/fittr/image/upload/v1407606601/ajw1tfc3wlydc7w1wehc.png",
						"last_updated": "1412905211",
						"_id": "33c5686285a8ca525e46baf836d15c26",
						"mutually_exclusive_with": "[]",
						"has_weight": "true",
						"tag": "dumbbells"
					}]
				}
			}, {
				"type": "break",
				"seconds": 15
			}, {
				"type": "exercise_phrase",
				"exercise_tag": "dumbbell_row",
				"verb_type": "sets_reps",
				"sets": 1,
				"reps": 10,
				"set_break_seconds": 20,
				"exercise": {
					"ui_title": "Dumbbell Row",
					"name": "Dumbbell Row",
					"seconds_per_rep": "3.5",
					"_id": "15ec39ab54d6527cddbb543cc7233a3b",
					"ui_title_speech": "Dumbbell row",
					"tag": "dumbbell_row",
					"one_sided": "true",
					"equipment": "[\"dumbbells\"]",
					"image_url": "http://162e2d3f0c198620adbd-cb0bd6add7ac33a8441063931d35466b.r11.cf1.rackcdn.com/one-arm-row.gif",
					"muscle_group": "back",
					"comments": "done cant",
					"last_updated": "1405182660",
					"description": "Leaning on a bench or something else that is sturdy with your free hand keep your back straight and have a slight bend in your knees. The dumbbell should be hanging down by your knees and without moving any other part of your body pull the weight upwards towards your chest while your elbow goes directly behind you",
					"has_weight": "true",
					"_equipment": [{
						"ui_title": "Dumbbells",
						"image_url": "http://res.cloudinary.com/fittr/image/upload/v1407606601/ajw1tfc3wlydc7w1wehc.png",
						"last_updated": "1412905211",
						"_id": "33c5686285a8ca525e46baf836d15c26",
						"mutually_exclusive_with": "[]",
						"has_weight": "true",
						"tag": "dumbbells"
					}]
				}
			}],
			"repeat_count": "1",
			"ui_title_speech": "Chest and biceps",
			"tag": "circuit_lifting_c+bi_1_(a).5cccc5967a5bd5b2dd1dacd4fb84b538",
			"work_break_timing": [
				[0.0, 2],
				[0.16, 0],
				[0.28, 2],
				[0.44, 0],
				[0.56, 2],
				[0.72, 0],
				[0.84, 2]
			],
			"break_seconds": 45,
			"last_updated": "1404869172"
		}
	}, {
		"type": "break",
		"seconds": 60
	}, {
		"type": "group_phrase",
		"group_tag": "circuit_lifting_c+bi_2(a).b92aabee258c9ad7e7007379b3be9be4",
		"repeat_count": 3,
		"intra_repeat_break_seconds": 90,
		"group": {
			"work_seconds": 64,
			"ui_title": "Chest & Biceps",
			"name": "Circuit Lifting C+Bi 2(A)",
			"seconds": 109,
			"related_tags": "[]",
			"_id": "26f8424b04f4fbd2a2289f8ff4ca6081",
			"members": [{
				"type": "exercise_phrase",
				"exercise_tag": "supermans",
				"verb_type": "sets_reps",
				"sets": 1,
				"reps": 8,
				"set_break_seconds": 20,
				"exercise": {
					"ui_title": "Supermans",
					"name": "Supermans",
					"seconds_per_rep": "3.5",
					"_id": "89ecda5590bc2d0cd293c999a1b1cc01",
					"ui_title_speech": "Supermans",
					"tag": "supermans",
					"one_sided": "false",
					"equipment": "[]",
					"image_url": "http://fafd177d177f46c24d92-537e8f6e3e51d21a07cfa2a78ea42f90.r96.cf1.rackcdn.com/supermans.gif",
					"muscle_group": "back",
					"comments": "done",
					"last_updated": "1404863794",
					"description": "Lie flat on your stomach with your arms straight and above your head. Raise your straight arms and legs at the same time slowly. Your legs and arms should only rise off the ground about a foot depending on how flexible your are",
					"has_weight": "false",
					"_equipment": []
				}
			}, {
				"type": "break",
				"seconds": 15
			}, {
				"type": "exercise_phrase",
				"exercise_tag": "supermans",
				"verb_type": "sets_reps",
				"sets": 1,
				"reps": 8,
				"set_break_seconds": 20,
				"exercise": {
					"ui_title": "Supermans",
					"name": "Supermans",
					"seconds_per_rep": "3.5",
					"_id": "89ecda5590bc2d0cd293c999a1b1cc01",
					"ui_title_speech": "Supermans",
					"tag": "supermans",
					"one_sided": "false",
					"equipment": "[]",
					"image_url": "http://fafd177d177f46c24d92-537e8f6e3e51d21a07cfa2a78ea42f90.r96.cf1.rackcdn.com/supermans.gif",
					"muscle_group": "back",
					"comments": "done",
					"last_updated": "1404863794",
					"description": "Lie flat on your stomach with your arms straight and above your head. Raise your straight arms and legs at the same time slowly. Your legs and arms should only rise off the ground about a foot depending on how flexible your are",
					"has_weight": "false",
					"_equipment": []
				}
			}, {
				"type": "break",
				"seconds": 15
			}, {
				"type": "exercise_phrase",
				"exercise_tag": "dumbbell_flys",
				"verb_type": "sets_reps",
				"sets": 1,
				"reps": 8,
				"set_break_seconds": 20,
				"exercise": {
					"ui_title": "Db Flys",
					"name": "Dumbbell Flys",
					"seconds_per_rep": "3.5",
					"_id": "2cc2474e3ea14a9e51b210631fc251fe",
					"ui_title_speech": "Dumbbell flys",
					"tag": "dumbbell_flys",
					"one_sided": "false",
					"equipment": "[\"dumbbells\",\"bench\"]",
					"image_url": "http://3eedee86686b5cabf87f-6ce4da06081ec0ee0c38a2cf35d4f5db.r39.cf1.rackcdn.com/flatdbinclineflies.gif",
					"muscle_group": "chest",
					"comments": "done",
					"last_updated": "1404089108",
					"description": "Laying on a flat bench start with the weight in your hands and your arms extended upwards above your chest. Keeping your arms nearly straight bring the weight outwards like a bird flapping its wing and back to the starting point",
					"has_weight": "true",
					"_equipment": [{
						"ui_title": "Dumbbells",
						"image_url": "http://res.cloudinary.com/fittr/image/upload/v1407606601/ajw1tfc3wlydc7w1wehc.png",
						"last_updated": "1412905211",
						"_id": "33c5686285a8ca525e46baf836d15c26",
						"mutually_exclusive_with": "[]",
						"has_weight": "true",
						"tag": "dumbbells"
					}, {
						"ui_title": "Bench",
						"image_url": "http://res.cloudinary.com/fittr/image/upload/v1407606634/bijwnkyali0kqknribe0.png",
						"last_updated": "1407606633",
						"_id": "53dd33d80f55f222383d9ab428fb7ec1",
						"mutually_exclusive_with": "[]",
						"has_weight": "false",
						"tag": "bench"
					}]
				}
			}, {
				"type": "break",
				"seconds": 15
			}, {
				"type": "exercise_phrase",
				"exercise_tag": "bent_over_dumbbell_rows",
				"verb_type": "sets_reps",
				"sets": 1,
				"reps": 8,
				"set_break_seconds": 20,
				"exercise": {
					"ui_title": "Bent Over Dumbbell Rows",
					"name": "Bent Over Dumbbell Rows",
					"seconds_per_rep": "3.5",
					"_id": "861d972945ca549362764aa7a32d49a7",
					"ui_title_speech": "Bent over dumbbell rows",
					"tag": "bent_over_dumbbell_rows",
					"one_sided": "false",
					"equipment": "[\"dumbbells\"]",
					"image_url": "http://c549d6e886f960c6971a-f0d0047f639f0fc1be4069d281ef4823.r99.cf1.rackcdn.com/db-lat-pulls.gif",
					"muscle_group": "back",
					"comments": "t",
					"last_updated": "1404833310",
					"description": "Begin with your feet around shoulder width and holding two dumbbells in front of you. Bend over slightly and keep your weight over your heels and with dumbbells around your knees and your shoulders directly above your hands lift the dumbbells up towards your body. Your elbows should stay close to the sides of your body. Repeat for prescribed amount of time or reps",
					"has_weight": "true",
					"_equipment": [{
						"ui_title": "Dumbbells",
						"image_url": "http://res.cloudinary.com/fittr/image/upload/v1407606601/ajw1tfc3wlydc7w1wehc.png",
						"last_updated": "1412905211",
						"_id": "33c5686285a8ca525e46baf836d15c26",
						"mutually_exclusive_with": "[]",
						"has_weight": "true",
						"tag": "dumbbells"
					}]
				}
			}],
			"repeat_count": "1",
			"ui_title_speech": "Chest and biceps",
			"tag": "circuit_lifting_c+bi_2(a).b92aabee258c9ad7e7007379b3be9be4",
			"work_break_timing": [
				[0.0, 2],
				[0.14678899082568808, 0],
				[0.28440366972477066, 2],
				[0.43119266055045874, 0],
				[0.5688073394495413, 2],
				[0.7155963302752294, 0],
				[0.8532110091743119, 2]
			],
			"break_seconds": 45,
			"last_updated": "1404869084"
		}
	}, {
		"type": "break",
		"seconds": 60
	}, {
		"type": "group_phrase",
		"group_tag": "abs_(3x3)_1.63e003a7bb4ddc2c678d0672094eec72",
		"repeat_count": 1,
		"intra_repeat_break_seconds": 0,
		"group": {
			"work_seconds": 435,
			"ui_title": "Abs",
			"name": "Abs (3x3) 1",
			"seconds": 675,
			"related_tags": "[\"abs\"]",
			"_id": "edab59b12bb93e548fd52ec08644178f",
			"members": [{
				"type": "exercise_phrase",
				"exercise_tag": "cross_holds",
				"verb_type": "sets_seconds",
				"sets": 3,
				"seconds": 45,
				"set_break_seconds": 30,
				"exercise": {
					"ui_title": "Cross Holds",
					"name": "Cross Holds",
					"seconds_per_rep": "3.5",
					"_id": "2e517d5516195f162acb151b7ad0be68",
					"ui_title_speech": "Cross holds",
					"tag": "cross_holds",
					"one_sided": "false",
					"equipment": "[]",
					"image_url": "http://65b806f68645e2cb22ee-b8bf136434abd1bf2737402d3e080459.r13.cf1.rackcdn.com/crosses.gif",
					"muscle_group": "core",
					"comments": "done",
					"last_updated": "1404146383",
					"description": "Lie flat on your back with straight legs and your arms extended to each side. Lift your legs and arms about 6 inches off the ground and hold for the prescribed amount of time",
					"has_weight": "false",
					"_equipment": []
				}
			}, {
				"type": "break",
				"seconds": 30
			}, {
				"type": "exercise_phrase",
				"exercise_tag": "side_plank_taps",
				"verb_type": "sets_reps",
				"sets": 3,
				"reps": 25,
				"set_break_seconds": 30,
				"exercise": {
					"ui_title": "Side Plank Taps",
					"name": "Side Plank Taps",
					"seconds_per_rep": "3.5",
					"_id": "2ab67155bc1bf29199d0d3068fa07d13",
					"ui_title_speech": "Side plank taps",
					"tag": "side_plank_taps",
					"one_sided": "true",
					"equipment": "[]",
					"image_url": "http://65b806f68645e2cb22ee-b8bf136434abd1bf2737402d3e080459.r13.cf1.rackcdn.com/sideplanklifts.gif",
					"muscle_group": "core",
					"comments": "done",
					"last_updated": "1404174312",
					"description": "Put one elbow on the ground and lift your body so that your elbow and feet are the only parts of your body touching the ground. Lower your waist until your hip touches the ground and repeat for the prescribed amount of time or reps on the other side",
					"has_weight": "false",
					"_equipment": []
				}
			}, {
				"type": "break",
				"seconds": 30
			}, {
				"type": "exercise_phrase",
				"exercise_tag": "side_crunches",
				"verb_type": "sets_reps",
				"sets": 3,
				"reps": 25,
				"set_break_seconds": 30,
				"exercise": {
					"ui_title": "Side Crunches",
					"name": "Side Crunches",
					"seconds_per_rep": "3.5",
					"_id": "d45e863889e588d4205dd1aa5868aec8",
					"ui_title_speech": "Side crunches",
					"tag": "side_crunches",
					"one_sided": "true",
					"equipment": "[]",
					"image_url": "http://65b806f68645e2cb22ee-b8bf136434abd1bf2737402d3e080459.r13.cf1.rackcdn.com/sidecrunches.gif",
					"muscle_group": "abs",
					"comments": "done",
					"last_updated": "1404170857",
					"description": "Begin by laying on your back with your hands behind your neck and your knees bent and crossed at the ankles. Your head should never touch the ground and your right elbow should touch your left knee then your left elbow should touch your right knee to complete each crunch. Perform prescribed reps on both sides",
					"has_weight": "false",
					"_equipment": []
				}
			}],
			"repeat_count": "1",
			"ui_title_speech": "Abs",
			"tag": "abs_(3x3)_1.63e003a7bb4ddc2c678d0672094eec72",
			"work_break_timing": [
				[0.0, 2],
				[0.06666666666666667, 1],
				[0.1111111111111111, 2],
				[0.17777777777777778, 1],
				[0.2222222222222222, 2],
				[0.28888888888888886, 0],
				[0.3333333333333333, 2],
				[0.4074074074074074, 1],
				[0.45185185185185184, 2],
				[0.5259259259259259, 1],
				[0.5703703703703704, 2],
				[0.6444444444444445, 0],
				[0.6888888888888889, 2],
				[0.762962962962963, 1],
				[0.8074074074074075, 2],
				[0.8814814814814815, 1],
				[0.9259259259259259, 2]
			],
			"break_seconds": 240,
			"last_updated": "1404913808"
		}
	}],
	"tag": "cir_stre_c+bi_1",
	"difficulty": 14,
	"last_updated": "1419157533",
	"[]": "difficulty"
}
